From 66cc4a253ab283504059a7ecca97779305ed9a06 Mon Sep 17 00:00:00 2001
From: Denis Vasilik <contact@denisvasilik.com>
Date: Sat, 30 Jan 2021 17:56:58 +0100
Subject: [PATCH] Fix N25Qxxx for VHDL simulation

---
 code/N25Qxxx.v | 3792 ++++++++++++++++++++++++------------------------
 1 file changed, 1888 insertions(+), 1904 deletions(-)

diff --git a/code/N25Qxxx.v b/code/N25Qxxx.v
index bce45ae..a8a88bc 100644
--- a/code/N25Qxxx.v
+++ b/code/N25Qxxx.v
@@ -15,13 +15,13 @@
 // Confidential:
 // -------------
 // This file and all files delivered herewith are Micron Confidential Information.
-// 
-// 
+//
+//
 // Disclaimer of Warranty:
 // -----------------------
 // This software code and all associated documentation, comments
-// or other information (collectively "Software") is provided 
-// "AS IS" without warranty of any kind. MICRON TECHNOLOGY, INC. 
+// or other information (collectively "Software") is provided
+// "AS IS" without warranty of any kind. MICRON TECHNOLOGY, INC.
 // ("MTI") EXPRESSLY DISCLAIMS ALL WARRANTIES EXPRESS OR IMPLIED,
 // INCLUDING BUT NOT LIMITED TO, NONINFRINGEMENT OF THIRD PARTY
 // RIGHTS, AND ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS
@@ -41,7 +41,7 @@
 // Because some jurisdictions prohibit the exclusion or limitation
 // of liability for consequential or incidental damages, the above
 // limitation may not apply to you.
-// 
+//
 // Copyright 2013 Micron Technology, Inc. All rights reserved.
 //
 `timescale 1ns / 1ps
@@ -58,10 +58,10 @@
 
 
 
-`include "include/UserData.h"
+`include "UserData.h"
 
 module paramConfig();
-`include "include/DevParam.h"
+`include "DevParam.h"
 
 endmodule
 
@@ -74,38 +74,45 @@ endmodule
 
 `ifdef Feature_8
     `ifdef HOLD_pin
-        module N25Qxxx (S, C_, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2, RESET2);
-    `elsif RESET_pin 
-        module N25Qxxx (S, C_, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2, RESET2);
+        module N25Qxxx (S, C, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2, RESET2);
+    `elsif RESET_pin
+        module N25Qxxx (S, C, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2, RESET2);
     `endif
-`else    
+`else
     `ifdef HOLD_pin
-        module N25Qxxx (S, C_, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
-    `elsif RESET_pin 
-        module N25Qxxx (S, C_, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
+        module N25Qxxx (S, C, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
+    `elsif RESET_pin
+        module N25Qxxx (S, C, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
     `endif
 `endif
 
-`include "include/DevParam.h"
+`include "DevParam.h"
  parameter [1:0] rdeasystacken = 0;
  parameter [1:0] rdeasystacken2 = 0;
  parameter [15:0] NVConfigReg_default = `NVCR_DEFAULT_VALUE;
- 
+
 `ifdef MEDITERANEO
     `define defaultDummy 6
     `define defaultiDummy 5
 `else
     `define defaultDummy 8
     `define defaultiDummy 7
-`endif    
+`endif
 
 input S;
-input C_;
+input C;
 input [`VoltageRange] Vcc;
 
-inout DQ0; 
-inout DQ1;
-//wire RESET;
+input DQ0;
+output DQ1;
+
+wire DQ1;
+reg DQ1_reg = 1'bZ;
+assign DQ1 = DQ1_reg;
+
+// assign DQ1 = 1'bZ;
+
+wire RESET;
 
 `ifdef Feature_8
    `ifdef HOLD_pin
@@ -136,10 +143,10 @@ parameter [48*8:1] fdp_file = `FILENAME_sfdp;
 
 reg PollingAccessOn = 0;
 reg ReadAccessOn = 0;
-wire WriteAccessOn; 
+wire WriteAccessOn;
 
 // indicate type of data that will be latched by the model:
-//  C=command, A=address, I= address on two pins; E= address on four pins; D=data, N=none, Y=dummy, F=dual_input(F=fast),Q=Quad_io 
+//  C=command, A=address, I= address on two pins; E= address on four pins; D=data, N=none, Y=dummy, F=dual_input(F=fast),Q=Quad_io
 reg [8:1] latchingMode = "N";
 
 reg [8*8:1] protocol="extended";
@@ -166,10 +173,10 @@ reg die_active = 'h1;  // Indicates that this die is active
                        // Used for stacked die
 
 
-buf (strong1, strong0) b0(C, C_);
+// buf (strong1, strong0) b0(C, C);
 
 //----------------------
-// Report Model Info 
+// Report Model Info
 //----------------------
 initial begin
     $display ("==============================================");
@@ -177,22 +184,22 @@ initial begin
     determineDevName;
     `ifdef RESET_pin
         $display ("===INFO=== DQ3 = RESET pin");
-    `endif   
+    `endif
     `ifdef HOLD_pin
         $display ("===INFO=== DQ3 = HOLD pin");
-    `endif   
-    `ifdef XIP_Numonyx 
+    `endif
+    `ifdef XIP_Numonyx
         $display ("===INFO=== XIP type = Numonyx");
-    `endif   
-    `ifdef XIP_basic 
+    `endif
+    `ifdef XIP_basic
         $display ("===INFO=== XIP type = Basic");
-    `endif   
+    `endif
     `ifdef VCC_1e8V
         $display ("===INFO=== VCC 1.8V");
-    `endif    
+    `endif
     `ifdef VCC_3V
         $display ("===INFO=== VCC 3V");
-    `endif   
+    `endif
     $display ("==============================================");
 end
 
@@ -208,30 +215,30 @@ reg NVCR_HoldResetEnable;
     reg intHOLD=1;
 
 //aggiunta verificare
-   //latchingMode=="E"                                                                                                                                                                 
-    assign HOLD = (read.enable_quad || 
-                   quadMode == 1 || 
-                   latchingMode=="Q"  || 
-                   latchingMode=="E" || 
-                   protocol=="quad" || 
-                   VolatileEnhReg.VECR[4]==0 || 
+   //latchingMode=="E"
+    assign HOLD = (read.enable_quad ||
+                   quadMode == 1 ||
+                   latchingMode=="Q"  ||
+                   latchingMode=="E" ||
+                   protocol=="quad" ||
+                   VolatileEnhReg.VECR[4]==0 ||
                    (NVCR_HoldResetEnable==0 && prog.dummySetByVECR==0))  ? 1 : HOLD_DQ3; //serve per disabilitare la funzione di hold nel caso di quad read
 
 
-    always @(HOLD) if (S==0 && C==0) 
+    always @(HOLD) if (S==0 && C==0)
         intHOLD = HOLD;
-    
-    always @(negedge C) if(S==0 && intHOLD!=HOLD) 
+
+    always @(negedge C) if(S==0 && intHOLD!=HOLD)
         intHOLD = HOLD;
 
     always @(posedge HOLD , posedge S) if(S==1)
         intHOLD = 1;
-    
+
     always @intHOLD if (Vcc>=Vcc_min) begin
         if(intHOLD==0)
             $display("[%0t ns] ==INFO== Hold condition enabled: communication with the device has been paused.", $time);
         else if(intHOLD==1)
-            $display("[%0t ns] ==INFO== Hold condition disabled: communication with the device has been activated.", $time);  
+            $display("[%0t ns] ==INFO== Hold condition disabled: communication with the device has been activated.", $time);
    end
 `endif
 
@@ -243,7 +250,7 @@ reg NVCR_HoldResetEnable;
 
 reg busy=0;
 
-reg [2:0] ck_count = 0; //clock counter (modulo 8) 
+reg [2:0] ck_count = 0; //clock counter (modulo 8)
 
 reg reset_by_powerOn = 1; //reset_by_powerOn is updated in "Power Up & Voltage check" section
 
@@ -252,7 +259,7 @@ reg reset_by_powerOn = 1; //reset_by_powerOn is updated in "Power Up & Voltage c
         assign RESET = ((read.enable_quad || latchingMode=="Q" || quadMode == 1 ||
                         cmdRecName=="Quad Output Read" || cmdRecName=="Quad I/O Fast Read" ||
                         latchingMode=="E" || protocol=="quad" || VolatileEnhReg.VECR[4]==0 ||
-                        NVCR_HoldResetEnable==0 || cmdRecName=="Extended command DOFRDTR" || 
+                        NVCR_HoldResetEnable==0 || cmdRecName=="Extended command DOFRDTR" ||
                         cmdRecName=="Extended command DIOFRDTR" || cmdRecName=="Extended command QOFRDTR" ||
                         cmdRecName=="Extended command QIOFRDTR" || cmdRecName=="Quad Command Fast Read" ||
                         cmdRecName=="Quad Output Read" || cmdRecName=="Quad I/O Fast Read" ) &&  S == 0)? 1 : RESET2;  //|| cmdRecName=="Quad I/O Fast Read")  ? 1 : RESET_DQ3; //serve per disabilitare la funzione di reset nel caso di quad read
@@ -260,17 +267,17 @@ reg reset_by_powerOn = 1; //reset_by_powerOn is updated in "Power Up & Voltage c
         assign int_reset = (RESET===0 || RESET===1 && protocol!="quad") ? !RESET || reset_by_powerOn : reset_by_powerOn;
 
     `ifdef HOLD_pin
-        assign logicOn = !int_reset && !S && intHOLD; 
+        assign logicOn = !int_reset && !S && intHOLD;
     `else
         assign logicOn = !int_reset && !S;
-    `endif  
-`else    
+    `endif
+`else
     `ifdef RESET_pin
 
         assign RESET = (read.enable_quad || latchingMode=="Q" || quadMode == 1 ||
                         cmdRecName=="Quad Output Read" || cmdRecName=="Quad I/O Fast Read" ||
                         latchingMode=="E" || protocol=="quad" || VolatileEnhReg.VECR[4]==0 ||
-                        NVCR_HoldResetEnable==0 || cmdRecName=="Extended command DOFRDTR" || 
+                        NVCR_HoldResetEnable==0 || cmdRecName=="Extended command DOFRDTR" ||
                         cmdRecName=="Extended command DIOFRDTR" || cmdRecName=="Extended command QOFRDTR" ||
                         cmdRecName=="Extended command QIOFRDTR" || cmdRecName=="Quad Command Fast Read" ||
                         //cmdRecName=="Quad Output Read" || cmdRecName=="Quad I/O Fast Read" ) &&  S == 0)? 1 : RESET_DQ3;  //|| cmdRecName=="Quad I/O Fast Read")  ? 1 : RESET_DQ3; //serve per disabilitare la funzione di reset nel caso di quad read
@@ -280,35 +287,35 @@ reg reset_by_powerOn = 1; //reset_by_powerOn is updated in "Power Up & Voltage c
 
     `else
         assign int_reset = reset_by_powerOn;
-    `endif  
+    `endif
 
     `ifdef HOLD_pin
-        assign logicOn = !int_reset && !S && intHOLD; 
+        assign logicOn = !int_reset && !S && intHOLD;
     `else
         assign logicOn = !int_reset && !S;
-    `endif  
-`endif  
+    `endif
+`endif
 
 
 
 reg deep_power_down = 0; //updated in "Deep power down" processes
 
 //XIP mode status (XIP=0 XIP mode not selected, XIP=1 XIP mode selected)
-reg XIP=0; 
+reg XIP=0;
 // driven high on XIP_reset sequence, this is the first part of PLRS
-reg XIP_rst = 0; 
+reg XIP_rst = 0;
 // driven high on Power reset sequence this is the second part of PLRS
-reg power_rst = 0; 
-// Power Loss Recovery Sequence required flag 
-reg plrs_required = 0; 
+reg power_rst = 0;
+// Power Loss Recovery Sequence required flag
+reg plrs_required = 0;
 
 
 reg DoubleTransferRate = 0;
-wire read_enable = read.enable || 
-                   read.enable_dual || 
-                   read.enable_quad || 
-                   read.enable_fast || 
-                   VolatileReg.enable_VCR_read || 
+wire read_enable = read.enable ||
+                   read.enable_dual ||
+                   read.enable_quad ||
+                   read.enable_fast ||
+                   VolatileReg.enable_VCR_read ||
                    VolatileEnhReg.enable_VECR_read ||
                    stat.enable_SR_read ||
                    PMReg.enable_PMR_read ||
@@ -324,8 +331,8 @@ wire read_enable = read.enable ||
                    lock4kb.enable_lockReg_read ||
                    `endif
                    NonVolatileReg.enable_NVCR_read ||
-                   read.enable_ID; 
-                
+                   read.enable_ID;
+
 
 //---------------------------------------
 //  Vpp_W signal : write protect feature
@@ -337,7 +344,7 @@ assign W_int = Vpp_W_DQ2;
 // CUI decoders istantiation
 //----------------------------
 
-`include "include/Decoders.h"
+`include "Decoders.h"
 
 
 
@@ -374,7 +381,7 @@ VolatileConfigurationRegister VolatileReg ();
 
 FlashDiscoveryParameter FlashDiscPar (fdp_file);
 
-Read            read ();        
+Read            read ();
 
 LockManager     lock (); //DYB
 
@@ -395,13 +402,13 @@ LockManager     lock (); //DYB
     ASPRegister ASP_Reg();
 `endif
 
-ProtectionManagementRegister PMReg(); // instantiated the protection management register -- 
+ProtectionManagementRegister PMReg(); // instantiated the protection management register --
 
 `ifdef timingChecks
- 
-    `ifdef N25Q256A33E 
+
+    `ifdef N25Q256A33E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, RESET);
-    `elsif  N25Q256A31E 
+    `elsif  N25Q256A31E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, RESET);
     `elsif  N25Q256A13E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
@@ -425,13 +432,13 @@ ProtectionManagementRegister PMReg(); // instantiated the protection management
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
     `elsif N25Q032A11E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
-    `elsif MEDITERANEO_1_8v    
+    `elsif MEDITERANEO_1_8v
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
-    `elsif MEDITERANEO    
+    `elsif MEDITERANEO
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
-    `elsif N25Q256A83E    
+    `elsif N25Q256A83E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
-    `elsif N25Q256A73E    
+    `elsif N25Q256A73E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
     `elsif N25Q128A11E
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
@@ -453,22 +460,22 @@ ProtectionManagementRegister PMReg(); // instantiated the protection management
         TimingCheck     timeCheck (S, C, DQ0, DQ1, W_int, HOLD_DQ3);
     `endif
 
-`endif  
+`endif
 
 `ifdef HOLD_pin
 
-    DualQuadOps     dualQuad (S, C, ck_count,DoubleTransferRate, DQ0, DQ1, Vpp_W_DQ2, HOLD_DQ3); 
+    DualQuadOps     dualQuad (S, C, ck_count,DoubleTransferRate, DQ0, DQ1, Vpp_W_DQ2, HOLD_DQ3);
 
 `elsif RESET_pin
- 
-    DualQuadOps     dualQuad (S, C, ck_count,DoubleTransferRate, DQ0, DQ1, Vpp_W_DQ2, RESET_DQ3); 
- 
+
+    DualQuadOps     dualQuad (S, C, ck_count,DoubleTransferRate, DQ0, DQ1, Vpp_W_DQ2, RESET_DQ3);
+
 `endif
 
-OTP_memory      OTP (); 
+OTP_memory      OTP ();
 
 
-`include "include/PLRSDetectors.h"
+`include "PLRSDetectors.h"
 
 DebugModule Debug ();
 
@@ -484,22 +491,22 @@ always @(negedge S) begin : CP_latchInit
 
     disable VolatileReg.READ_VCR;//test Jan17
 
-    if (!XIP) latchingMode = "C";  
-    
+    if (!XIP) latchingMode = "C";
+
     ck_count = 0;
     iCmd = cmdDim - 1;
     addrLatch = 'h0;  //etv
     `ifdef byte_4
-    //if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hBE || cmd=='hEE) 
-    if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3) 
+    //if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hBE || cmd=='hEE)
+    if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3)
         iAddr = addrDimLatch4 - 1;
-    else 
+    else
         iAddr = addrDimLatch - 1;
     `else
     if (cmd=='hE2)
         iAddr = addrDimLatch4 - 1;
     else
-     iAddr = addrDimLatch - 1; 
+     iAddr = addrDimLatch - 1;
     `endif
     iData = dataDim - 1;
 
@@ -528,9 +535,9 @@ event cmdLatched;
 
 always @(C) if(logicOn && latchingMode=="C" && protocol=="extended") begin : CP_latchCmd
   `ifdef MEDITERANEO
-  if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin 
+  if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin
   `else
-  if (C==1) begin  
+  if (C==1) begin
   `endif
     cmd[iCmd] = DQ0;
 
@@ -539,21 +546,21 @@ always @(C) if(logicOn && latchingMode=="C" && protocol=="extended") begin : CP_
     else if(iCmd==0) begin
         latchingMode = "N";
         `ifdef MEDITERANEO
-            if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3 || cmd=='hE2) 
+            if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3 || cmd=='hE2)
                 iAddr = addrDimLatch4 - 1;
-            else 
+            else
                 iAddr = addrDimLatch - 1;
         `endif
         -> cmdLatched;
-    end    
- end        
+    end
+ end
 end
 
 always @(C) if(logicOn && latchingMode=="C" && protocol=="dual") begin : CP_latchCmdDual
       `ifdef MEDITERANEO
-   if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin 
+   if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin
    `else
-  if (C==1) begin  
+  if (C==1) begin
    `endif
 
     cmd[iCmd] = DQ1;
@@ -564,24 +571,24 @@ always @(C) if(logicOn && latchingMode=="C" && protocol=="dual") begin : CP_latc
     else if(iCmd==1) begin
         latchingMode = "N";
         `ifdef MEDITERANEO
-            if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3 || cmd=='hE2) 
+            if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3 || cmd=='hE2)
                 iAddr = addrDimLatch4 - 1;
-            else 
+            else
                 iAddr = addrDimLatch - 1;
         `endif
         -> cmdLatched;
          end
-     //end     
-  end       
+     //end
+  end
 end
 
 
 `ifdef HOLD_pin
 always @(C) if(logicOn && latchingMode=="C" && protocol=="quad") begin : CP_latchCmdQuad
   `ifdef MEDITERANEO
-  if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin 
+  if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin
   `else
-  if (C==1) begin  
+  if (C==1) begin
   `endif
     cmd[iCmd] = HOLD_DQ3;
     cmd[iCmd-1] = Vpp_W_DQ2;
@@ -593,21 +600,21 @@ always @(C) if(logicOn && latchingMode=="C" && protocol=="quad") begin : CP_latc
     else if(iCmd==3) begin
         latchingMode = "N";
         `ifdef MEDITERANEO
-            if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3 || cmd=='hE2) 
+            if (prog.enable_4Byte_address || cmd=='h0E || cmd=='hE3 || cmd=='hE2)
                 iAddr = addrDimLatch4 - 1;
-            else 
+            else
                 iAddr = addrDimLatch - 1;
         `endif
         -> cmdLatched;
-    end    
-  end      
+    end
+  end
 end
 
 `elsif RESET_pin
 
 always @(C) if(logicOn && latchingMode=="C" && protocol=="quad") begin : CP_latchCmdQuad
-  if (C==1) begin 
-  // if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin 
+  if (C==1) begin
+  // if (((C==0) && (VolatileEnhReg.VECR[5] == 0) && (iCmd != 7)) || (C == 1)) begin
 
     cmd[iCmd] = RESET_DQ3;
     cmd[iCmd-1] = Vpp_W_DQ2;
@@ -619,8 +626,8 @@ always @(C) if(logicOn && latchingMode=="C" && protocol=="quad") begin : CP_latc
     else if(iCmd==3) begin
         latchingMode = "N";
         -> cmdLatched;
-    end    
-  end        
+    end
+  end
 end
 
 `endif
@@ -633,10 +640,10 @@ event addrLatched;
 
 
 always @(C) if (logicOn && latchingMode=="A") begin : CP_latchAddr
-  if (C==1 || DoubleTransferRate==1 || 
+  if (C==1 || DoubleTransferRate==1 ||
     (C==0 && (cmd=='h0D || cmd=='h3D || cmd=='hBD || cmd=='h6D || cmd=='hED || cmd=='h0E || cmd=='h39 || cmd=='hBE || cmd=='h3A || cmd=='hEE)
     // (C==0 && (cmd=='h0D || cmd=='h3D || cmd=='hBD || cmd=='h6D || cmd=='hED || cmd=='h0E || cmd=='h3E || cmd=='hBE || cmd=='h6E || cmd=='hEE)
-    && iAddr!=23 && iAddr!=31)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode, except for negedge C immediately following negedge S in XIP mode and also in negedge of DTR mode and when the command is (address and data in DTR mode ('h0D,'h3D,'h6D) 
+    && iAddr!=23 && iAddr!=31)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode, except for negedge C immediately following negedge S in XIP mode and also in negedge of DTR mode and when the command is (address and data in DTR mode ('h0D,'h3D,'h6D)
 
     addrLatch[iAddr] = DQ0;
     if (iAddr>0)
@@ -646,11 +653,11 @@ always @(C) if (logicOn && latchingMode=="A") begin : CP_latchAddr
         `ifdef byte_4
         if ((!prog.enable_4Byte_address) && (cmd != 'h13) && (cmd != 'h0C) && (cmd != 'h3C) && (cmd != 'h6C) && (cmd != 'h0E) && (cmd != 'hE0) && (cmd !='h12) && (cmd != 'hE3) &&
              cmd != 'hE1 && cmd != 'hE2 )
-            begin  
+            begin
             addr = {ExtAddReg.EAR[EARvalidDim-1:0],addrLatch[addrDimLatch-1:0]};
             end
-          //else if(prog.enable_4Byte_address==1) 
-          else if(prog.enable_4Byte_address==1 || cmd != 'h13) 
+          //else if(prog.enable_4Byte_address==1)
+          else if(prog.enable_4Byte_address==1 || cmd != 'h13)
             begin
                 addr = addrLatch[addrDimLatch4-1:0];
             end
@@ -669,8 +676,8 @@ end
 
 always @(C) if (logicOn && latchingMode=="I") begin : CP_latchAddrDual
   if (C==1 ||DoubleTransferRate==1 || (C==0 && (cmd=='h0D || cmd=='h3D ||
-    cmd=='hBD || cmd=='h0E || cmd=='h39 || cmd=='hBE) && iAddr!=23 && iAddr!=31)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode, except for negedge C immediately follwing negedge S in XIP mode and also in negedge of DTR mode and when the command is (address and data in DTR mode ('hBD) 
-    // cmd=='hBD || cmd=='h0E || cmd=='h3E || cmd=='hBE) && iAddr!=23 && iAddr!=31)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode, except for negedge C immediately follwing negedge S in XIP mode and also in negedge of DTR mode and when the command is (address and data in DTR mode ('hBD) 
+    cmd=='hBD || cmd=='h0E || cmd=='h39 || cmd=='hBE) && iAddr!=23 && iAddr!=31)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode, except for negedge C immediately follwing negedge S in XIP mode and also in negedge of DTR mode and when the command is (address and data in DTR mode ('hBD)
+    // cmd=='hBD || cmd=='h0E || cmd=='h3E || cmd=='hBE) && iAddr!=23 && iAddr!=31)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode, except for negedge C immediately follwing negedge S in XIP mode and also in negedge of DTR mode and when the command is (address and data in DTR mode ('hBD)
 
     addrLatch[iAddr] = DQ1;
     addrLatch[iAddr-1]= DQ0;
@@ -679,7 +686,7 @@ always @(C) if (logicOn && latchingMode=="I") begin : CP_latchAddrDual
     else if(iAddr==1) begin
         latchingMode = "N";
         `ifdef byte_4
-            if (!prog.enable_4Byte_address && (cmd != 'hBC && cmd != 'hBE && cmd != 'h3C && cmd != 'h0C && cmd != 'h0E)) begin 
+            if (!prog.enable_4Byte_address && (cmd != 'hBC && cmd != 'hBE && cmd != 'h3C && cmd != 'h0C && cmd != 'h0E)) begin
                 addr = {ExtAddReg.EAR[EARvalidDim-1:0],addrLatch[addrDimLatch-1:0]};
             end
             else addr = addrLatch[addrDimLatch4-1:0];
@@ -703,14 +710,14 @@ always @(C) if (logicOn && latchingMode=="E") begin : CP_latchAddrQuad
     addrLatch[iAddr-1]= Vpp_W_DQ2;
     addrLatch[iAddr-2]= DQ1;
     addrLatch[iAddr-3]= DQ0;
-   
+
     if (iAddr>=7)
         iAddr = iAddr - 4;
 
     else if(iAddr==3) begin
         latchingMode = "N";
         `ifdef byte_4
-            if (!prog.enable_4Byte_address && (cmd != 'hEC && cmd != 'hEE && cmd != 'h0E && cmd != 'h6C  && cmd != 'h0C  && cmd != 'hE0)) begin 
+            if (!prog.enable_4Byte_address && (cmd != 'hEC && cmd != 'hEE && cmd != 'h0E && cmd != 'h6C  && cmd != 'h0C  && cmd != 'hE0)) begin
             addr = {ExtAddReg.EAR[EARvalidDim-1:0],addrLatch[addrDimLatch-1:0]};
                         end
             else begin
@@ -734,16 +741,16 @@ always @(C) if (logicOn && latchingMode=="E") begin : CP_latchAddrQuad
     addrLatch[iAddr-1]= Vpp_W_DQ2;
     addrLatch[iAddr-2]= DQ1;
     addrLatch[iAddr-3]= DQ0;
-   
+
     if (iAddr>=7)
         iAddr = iAddr - 4;
 
     else if(iAddr==3) begin
         latchingMode = "N";
         `ifdef byte_4
-        if (!prog.enable_4Byte_address && (cmd != 'hEC)) 
+        if (!prog.enable_4Byte_address && (cmd != 'hEC))
             addr = {ExtAddReg.EAR[EARvalidDim-1:0],addrLatch[addrDimLatch-1:0]};
-        else  
+        else
             addr = addrLatch[addrDim-1:0];
         `else
         addr = addrLatch[addrDim-1:0];
@@ -765,9 +772,9 @@ reg dataLatchedr=0;
 
 always @(C) if (logicOn && latchingMode=="D") begin : CP_latchData
     `ifdef MEDITERANEO
-  if (((C==0) && (VolatileEnhReg.VECR[5] == 0)) || (C == 1)) begin 
+  if (((C==0) && (VolatileEnhReg.VECR[5] == 0)) || (C == 1)) begin
   `else
-  if (C==1) begin // ENABLE if posedge C in all modes 
+  if (C==1) begin // ENABLE if posedge C in all modes
   `endif
     data[iData] = DQ0;
 
@@ -778,12 +785,12 @@ always @(C) if (logicOn && latchingMode=="D") begin : CP_latchData
      if ((cmdRecName=="Write NV Configuration Reg" || cmdRecName=="ASP Write")&& prog.LSByte) begin
         LSdata=data;
          prog.LSByte=0;
-     end   
+     end
         -> dataLatched;
         dataLatchedr=1;
         $display("  [%0t ns] Data latched: %h", $time, data);
         iData=dataDim-1;
-    end    
+    end
   end
 end
 
@@ -815,46 +822,46 @@ always @(posedge C) if (logicOn && latchingMode=="Y") begin : CP_latchDummy
 
     end else if (iDummy==dummyDimEff-1 &&  dummy[iDummy]==1) begin
 
-        if (XIP) begin 
+        if (XIP) begin
             $display("  [%0t ns] XIP mode exit.", $time);
             -> checkProtocolAfterXIPexit;
         end
     end
 
-//!    end     
+//!    end
 
  `elsif XIP_Numonyx
- 
+
     if(iDummy==dummyDimEff-1 &&  dummy[iDummy]==0 && VolatileReg.VCR[3]==0) begin
-    
-        XIP=1; 
-       
+
+        XIP=1;
+
 
     end else if (iDummy==dummyDimEff-1 &&  dummy[iDummy]==1) begin
-       
-        if (XIP) begin 
+
+        if (XIP) begin
             $display("  [%0t ns] XIP mode exit.", $time);
             -> checkProtocolAfterXIPexit;
             VolatileReg.VCR[3] = 1;
         end
 
         XIP=0;
-    end    
+    end
 
- `endif  
+ `endif
 
-    if (iDummy>0) begin 
+    if (iDummy>0) begin
        // if(cmdRecName != "Read Serial Flash Discovery Parameter")
        //     begin
                 iDummy = iDummy-1;
        //     end
-        end  
+        end
         else begin
         -> dummyLatched;
         $display("  [%0t ns] Dummy clock cycles latched.", $time);
         iDummy=dummyDimEff-1;
         ck_count <= #1 0; // avoid race condition with ck_count auto-incrementer @(posedge C)
-    end    
+    end
 
 end
 
@@ -893,30 +900,30 @@ always
         if(rescue_seq_flag==1 && delta_plrs < 50) begin
             $display(" [%0t ps] ==TIMING ERROR== PLRS: tSHSL constraint violated during Power Loss Rescue Sequence ", $time);
         end
-    end    
-        
-////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
- 
+    end
 
-// check dummy clock cycles 
+//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
+
+// check dummy clock cycles
 `ifdef MEDT_DUMMY_CYCLES
 time CDeltaBy2;
 integer fO; //calculated operating frequency upon latching of dummy cycles
 always @(dummyLatched) begin
     CDeltaBy2 = timeCheck.C_high - timeCheck.C_low;
     fO = 1000 / (CDeltaBy2 * 2);
-    //$display("---fO--- %d @ %0t", fO, $time); 
+    //$display("---fO--- %d @ %0t", fO, $time);
     case (dummyDimEff)
 
         1: begin
 
-            if(((fO>94) && (cmdRecName=="Read Fast")) || 
+            if(((fO>94) && (cmdRecName=="Read Fast")) ||
               ((fO>88) &&  (cmdRecName=="Dual Output Fast Read")) ||
               ((fO>60) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read")) ||
               ((fO>69) && (cmdRecName=="Quad Output Fast Read")) ||
               ((fO>41) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns]  ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
-        
+
            end
 
         2: begin
@@ -927,21 +934,21 @@ always @(dummyLatched) begin
               ((fO>78) && (cmdRecName=="Quad Output Fast Read")) ||
               ((fO>50) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
-        
+
            end
 
         3: begin
-             
+
                if(((fO>129) && (cmdRecName=="Read Fast")) ||
                  ((fO>106) && (cmdRecName=="Dual Output Fast Read")) ||
-                 ((fO>88) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read")) || 
+                 ((fO>88) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read")) ||
                  ((fO>88) && (cmdRecName=="Quad Output Fast Read")) ||
                  ((fO>60) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
            end
 
         4 : begin
-             
+
                if(((fO>133) && (cmdRecName=="Read Fast")) ||
                  ((fO>115) && (cmdRecName=="Dual Output Fast Read")) ||
                  ((fO>97) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
@@ -949,22 +956,22 @@ always @(dummyLatched) begin
                $display("  [%0t ns] ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
            end
 
-        
+
         5 : begin
-             
+
                if(((fO>133) && (cmdRecName=="Read Fast" || cmdRecName=="Dual Output Fast Read")) ||
                  ((fO>125) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
                  ((fO>106) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
            end
-        
+
         6 : begin
                if(((fO>133) && (cmdRecName=="Read Fast" || cmdRecName=="Dual Output Fast Read")) ||
                  ((fO>105) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
                  ((fO>80) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
             end
-        
+
         7 : begin
 
                if(((fO>108) && (cmdRecName=="Read Fast" || cmdRecName=="Dual Output Fast Read" || cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
@@ -986,7 +993,7 @@ always @(dummyLatched) begin
                  cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read"))
                $display("  [%0t ns] ==WARNING== Dummy clock number is not sufficient for the operating frequency. The memory reads wrong data",$time);
             end
-            
+
         default : begin end
     endcase
 end
@@ -996,18 +1003,18 @@ integer fO; //calculated operating frequency upon latching of dummy cycles
 always @(dummyLatched) begin
     CDeltaBy2 = timeCheck.C_high - timeCheck.C_low;
     fO = 1000 / (CDeltaBy2 * 2);
-    //$display("---fO--- %d @ %0t", fO, $time); 
+    //$display("---fO--- %d @ %0t", fO, $time);
     case (dummyDimEff)
 
         1: begin
 
-            if(((fO>90) && (cmdRecName=="Read Fast")) || 
+            if(((fO>90) && (cmdRecName=="Read Fast")) ||
               ((fO>80) &&  (cmdRecName=="Dual Output Fast Read")) ||
               ((fO>50) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read")) ||
               ((fO>43) && (cmdRecName=="Quad Output Fast Read")) ||
               ((fO>30) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns]  ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
-        
+
            end
 
         2: begin
@@ -1018,21 +1025,21 @@ always @(dummyLatched) begin
               ((fO>60) && (cmdRecName=="Quad Output Fast Read")) ||
               ((fO>40) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
-        
+
            end
 
         3: begin
-             
+
                if(((fO>108) && (cmdRecName=="Read Fast")) ||
                  ((fO>100) && (cmdRecName=="Dual Output Fast Read")) ||
-                 ((fO>80) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read")) || 
+                 ((fO>80) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read")) ||
                  ((fO>75) && (cmdRecName=="Quad Output Fast Read")) ||
                  ((fO>50) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
            end
 
         4 : begin
-             
+
                if(((fO>108) && (cmdRecName=="Read Fast")) ||
                  ((fO>105) && (cmdRecName=="Dual Output Fast Read")) ||
                  ((fO>90) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
@@ -1040,22 +1047,22 @@ always @(dummyLatched) begin
                $display("  [%0t ns] ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
            end
 
-        
+
         5 : begin
-             
+
                if(((fO>108) && (cmdRecName=="Read Fast" || cmdRecName=="Dual Output Fast Read")) ||
                  ((fO>100) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
                  ((fO>70) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
            end
-        
+
         6 : begin
                if(((fO>108) && (cmdRecName=="Read Fast" || cmdRecName=="Dual Output Fast Read")) ||
                  ((fO>105) && (cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
                  ((fO>80) && (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read")))
                $display("  [%0t ns] ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
             end
-        
+
         7 : begin
 
                if(((fO>108) && (cmdRecName=="Read Fast" || cmdRecName=="Dual Output Fast Read" || cmdRecName=="Dual I/O Fast Read" || cmdRecName=="Dual Command Fast Read" || cmdRecName=="Quad Output Fast Read")) ||
@@ -1077,7 +1084,7 @@ always @(dummyLatched) begin
                  cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Quad Command Fast Read"))
                $display("  [%0t ns] ==WARNING== Dummy clock number %d is not sufficient for the operating frequency %d. The memory reads wrong data",$time,dummyDimEff,fO);
             end
-            
+
         default : begin end
     endcase
 end
@@ -1088,7 +1095,7 @@ end
  // Calculating device select during stacked die
  // die active indicates the die selected
  //------------------------------
- 
+
  always@(addrLatched) begin
    if((prog.enable_4Byte_address == 1) || (NonVolatileReg.NVCR[0] == 0)) begin
      if(rdeasystacken == addrLatch[addrDim +1: addrDim]) begin
@@ -1107,7 +1114,7 @@ end
      end
    end
  end
- 
+
  `endif
 
 
@@ -1135,22 +1142,22 @@ always @(cmdLatched) fork : CP_cmdRecControl
 
 
     begin : ok
-        @(codeRecognized or seqRecognized) 
+        @(codeRecognized or seqRecognized)
           disable error;
     end
 
-    ///////////////////////////////////////////////////////  
+    ///////////////////////////////////////////////////////
      // adding to fix the 4 byte address problem
      // if the cmd is 4 byte address,the counter for address
-     // is reinitialised to 32 bit. // added  
+     // is reinitialised to 32 bit. // added
      ///////////////////////////////////////////////////////
- 
+
     begin
-         
-         if (cmd == 'h13 || cmd  == 'h0C || cmd == 'h3C || cmd == 'hBC || 
-           // cmd == 'h6C ||  cmd == 'h0E ||  cmd == 'h3E || cmd == 'hBE || 
-           cmd == 'h6C ||  cmd == 'h0E ||  cmd == 'h39 || cmd == 'hBE || 
-           // cmd == 'h6E || cmd == 'hEE || cmd == 'hEC || cmd == 'h10 || 
+
+         if (cmd == 'h13 || cmd  == 'h0C || cmd == 'h3C || cmd == 'hBC ||
+           // cmd == 'h6C ||  cmd == 'h0E ||  cmd == 'h3E || cmd == 'hBE ||
+           cmd == 'h6C ||  cmd == 'h0E ||  cmd == 'h39 || cmd == 'hBE ||
+           // cmd == 'h6E || cmd == 'hEE || cmd == 'hEC || cmd == 'h10 ||
            cmd == 'h3A || cmd == 'hEE || cmd == 'hEC || cmd == 'h10 ||
            `ifdef MEDT_4READ4D
 //               cmd=='hE7 ||
@@ -1160,19 +1167,19 @@ always @(cmdLatched) fork : CP_cmdRecControl
            `endif
            `ifdef PP_4byte
                cmd=='h12 ||
-           `endif        
-           `ifdef SE_4byte 
+           `endif
+           `ifdef SE_4byte
                cmd=='hDC ||
-           `endif     
-           `ifdef SSE_4byte 
+           `endif
+           `ifdef SSE_4byte
                cmd=='h21 ||
-           `endif     
-           `ifdef QIFP_4byte 
+           `endif
+           `ifdef QIFP_4byte
                cmd=='h34 ||
-           `endif     
+           `endif
            `ifdef QIEFP_38
             //   cmd=='h38 ||
-           `endif        
+           `endif
            `ifdef MEDT_DYB_4byte
                cmd=='hE0 || cmd=='hE1 || cmd=='hE2 || cmd=='hE3 ||
            `endif
@@ -1187,31 +1194,31 @@ always @(cmdLatched) fork : CP_cmdRecControl
           else if(cmd == 'h5A) begin
             iAddr = addrDimLatch - 1;
           end
-    end 
-     
-    ///////////////////////////////////////////////////////    
-     
+    end
+
+    ///////////////////////////////////////////////////////
+
+
+
 
-    
-    
     begin : error
-        #0; 
+        #0;
         #1; //wait until CUI decoders execute recognition process (2 delta time maximum)
             //questo secondo ritardo si puo' anche togliere (perche' il ritardo max e' 1 delta)
-            if (busy)  begin 
+            if (busy)  begin
             $display("[%0t ns] **WARNING** Device is busy. Command not accepted.", $time);
                         end
             `ifdef PowDown
          else if (deep_power_down)
             $display("[%0t ns] **WARNING** Deep power down mode. Command not accepted.", $time);
-            `endif 
-        else if (!ReadAccessOn || !WriteAccessOn || !PollingAccessOn) 
-            $display("[%0t ns] **WARNING** Power up is ongoing. Command not accepted.", $time);    
-        else if (!busy)  
+            `endif
+        else if (!ReadAccessOn || !WriteAccessOn || !PollingAccessOn)
+            $display("[%0t ns] **WARNING** Power up is ongoing. Command not accepted.", $time);
+        else if (!busy)
                 //$display("[%0t ns] **ERROR** Command Not Recognized.", $time);
                 $display("[%0t ns] **WARNING** Command Not Recognized. %0h %d %d", $time, cmd, rdeasystacken, rdeasystacken2);
         disable ok;
-    end    
+    end
 
 join
 
@@ -1227,12 +1234,12 @@ join
 
 assign Vcc_L1 = (Vcc>=Vcc_wi) ?  1 : 0 ;
 
-always @Vcc_L1 
+always @Vcc_L1
   if (reset_by_powerOn && Vcc_L1)
     reset_by_powerOn = 0;
-  else if (!reset_by_powerOn && !Vcc_L1) 
+  else if (!reset_by_powerOn && !Vcc_L1)
     reset_by_powerOn = 1;
-    
+
 
 
 assign Vcc_L2 = (Vcc>=Vcc_min) ?  1 : 0 ;
@@ -1257,22 +1264,22 @@ reg dummySetByNVCR = 0;
 
 
 //----------------------------
-// Power Up  
+// Power Up
 //----------------------------
 
 
 always @Vcc_L2 if(Vcc_L2 && PollingAccessOn==0 && ReadAccessOn==0 && WriteAccessCondition==0) fork : CP_powUp_FullAccess
-    
+
     begin : p1
       $display("[%0t ns] ==INFO== Power up: polling allowed.",$time );
       PollingAccessOn=1;
-      
+
       #full_access_power_up_delay;
       $display("[%0t ns] ==INFO== Power up: device fully accessible.",$time );
       ReadAccessOn=1;
       WriteAccessCondition=1;
       // starting protocol defined by NVCR
-      -> checkProtocol; 
+      -> checkProtocol;
       //checking hold_enable defined by NVCR
       -> checkHoldResetEnable;
       -> checkDummyClockCycle;
@@ -1286,14 +1293,14 @@ always @Vcc_L2 if(Vcc_L2 && PollingAccessOn==0 && ReadAccessOn==0 && WriteAccess
       if (rescue_seq_flag == 1)
           -> power_reset;
       disable p2;
-    end 
+    end
 
     begin : p2
       @Vcc_L2 if(!Vcc_L2)
         disable p1;
     end
 
-join    
+join
 
 always @(checkDummyClockCycle) begin
     // if(NonVolatileReg.NVCR[15:12]=='b0000) dummyDimEff=15;
@@ -1303,7 +1310,7 @@ always @(checkDummyClockCycle) begin
         if(NonVolatileReg.NVCR[15:12]=='b0000 || NonVolatileReg.NVCR[15:12]=='b1111) begin
             dummySetByNVCR=0;
             dummyDimEff=8;
-        end 
+        end
         else begin
             dummySetByNVCR=1;
             dummyDimEff=NonVolatileReg.NVCR[15:12];
@@ -1321,13 +1328,13 @@ end
 
 always @(checkAddressMode) begin
 
- `ifdef start_in_byte_4   
+ `ifdef start_in_byte_4
      prog.enable_4Byte_address=1;
- `else    
+ `else
  if (NonVolatileReg.NVCR[0]==0)  begin
       prog.enable_4Byte_address=1;
       $display("[%0t ns] ==INFO== 4-byte address mode selected",$time);
- end else begin 
+ end else begin
        prog.enable_4Byte_address=0;
        $display("[%0t ns] ==INFO== 3-byte address mode selected",$time);
  end
@@ -1339,18 +1346,18 @@ end
 always @(checkAddressSegment) begin
 
  if (NonVolatileReg.NVCR[1]==0) begin
- 
+
     ExtAddReg.EAR[EARvalidDim-1:0]={EARvalidDim{1'b1}};
     if(prog.enable_4Byte_address==0) $display("[%0t ns] ==INFO== Top 128M selected",$time);
- 
+
  end else begin
-    
+
     ExtAddReg.EAR[EARvalidDim-1:0]=0;
     if(prog.enable_4Byte_address==0) $display("[%0t ns] ==INFO== Bottom 128M selected",$time);
-    
+
  end
- 
-end 
+
+end
 
 `endif
 assign WriteAccessOn =PollingAccessOn && ReadAccessOn && WriteAccessCondition;
@@ -1361,9 +1368,9 @@ if (NonVolatileReg.NVCR[3]==0) protocol="quad";
       else if (NonVolatileReg.NVCR[2]==0) protocol="dual";
       else if(NonVolatileReg.NVCR[3]==1 && NonVolatileReg.NVCR[2]==1) protocol="extended";
       $display("[%0t ns] ==INFO== Protocol selected is %0s",$time, protocol);
-      
 
- 
+
+
 
        case (NonVolatileReg.NVCR[11:9])
        'b000 : begin
@@ -1371,10 +1378,10 @@ if (NonVolatileReg.NVCR[3]==0) protocol="quad";
                 protocol="extended";
                 cmdRecName="Read Fast";
                end
-        
-       'b001 : begin 
+
+       'b001 : begin
                  XIP=1;
-                 cmdRecName="Dual Output Fast Read"; 
+                 cmdRecName="Dual Output Fast Read";
                  protocol="extended";
                end
        'b010 : begin
@@ -1382,28 +1389,28 @@ if (NonVolatileReg.NVCR[3]==0) protocol="quad";
                  cmdRecName="Dual I/O Fast Read";
                  protocol="dual";
                end
- 
+
        'b011 : begin
                  XIP=1;
-                 cmdRecName="Quad Output Read"; 
+                 cmdRecName="Quad Output Read";
                  protocol="extended";
                end
 
        'b100 :  begin
                  XIP=1;
-                 cmdRecName="Quad I/O Fast Read"; 
+                 cmdRecName="Quad I/O Fast Read";
                  protocol="quad";
                end
 
        'b111: XIP=0;
          default : XIP=0;
-       endcase  
-       
+       endcase
+
        `ifdef MEDITERANEO
        DoubleTransferRate = !NonVolatileReg.NVCR[5];
   `endif
       $display("[%0t ps] ==INFO== %0s Transfer Rate selected", $time, (DoubleTransferRate ? "Double" : "Single"));
-      
+
 end
 
 // When we exit XIP we should check what protocol we should fall to
@@ -1435,7 +1442,7 @@ end
 //            cmdRecName="Word Read Quad I/O";
 //            protocol="extended";
 //        end
-//    end    
+//    end
 //`endif
 
 //---Dummy clock cycle
@@ -1455,9 +1462,9 @@ always @Vcc_L1 if (!Vcc_L1 && (PollingAccessOn|| ReadAccessOn || WriteAccessCond
     ReadAccessOn=0;
     WriteAccessCondition=0;
     PollingAccessOn=0;
-    prog.Suspended=0; //the suspended state is reset  
-    
-end    
+    prog.Suspended=0; //the suspended state is reset
+
+end
 
 
 
@@ -1470,7 +1477,7 @@ assign VccOk = (Vcc>=Vcc_min && Vcc<=Vcc_max) ?  1 : 0 ;
 
 always @VccOk if (!VccOk) ->voltageFault; //check is active when device is not reset
                                           //(this is a dynamic check used during program and erase operations)
-        
+
 
 
 
@@ -1485,7 +1492,7 @@ always @VccOk if (!VccOk) ->voltageFault; //check is active when device is not r
 
 
 
-                   
+
 
 //-----------------
 // Read execution
@@ -1504,7 +1511,7 @@ event sendToBus_stack;
 
 // values assumed by DQ0 and DQ1, when they are not forced
 assign DQ0 = 1'bZ;
-assign DQ1 = 1'bZ;
+// assign DQ1 = 1'bZ;
 
 
 //  DQ1 : release of values assigned with "force statement"
@@ -1513,12 +1520,12 @@ always @(posedge S) begin
         `ifdef MEDITERANEO
       //      cmd = 'hFF;
             firstPSWORD = 0;
-        `endif    
+        `endif
 
-        #tSHQZ release DQ1; 
+        #tSHQZ release DQ1;
         if (protocol=="dual" || read.enable_dual) release Vpp_W_DQ2;
-        if (protocol=="quad" || read.enable_quad) begin 
-            
+        if (protocol=="quad" || read.enable_quad) begin
+
                         release Vpp_W_DQ2;
                         `ifdef RESET_pin
                         release RESET_DQ3;
@@ -1533,14 +1540,14 @@ always @(posedge S) begin
         firstASP = 1;
     `endif
 
-end        
+end
 // effect on DQ1 by HOLD signal
 `ifdef HOLD_pin
-    
+
     reg temp;
     reg temp1;
-    //need to recode this 
-//    always @(intHOLD) if(intHOLD===0) begin : CP_HOLD_out_effect 
+    //need to recode this
+//    always @(intHOLD) if(intHOLD===0) begin : CP_HOLD_out_effect
 //        begin : out_effect
 //            if(cmdRecName=="Dual Output Fast Read") begin
 //            temp = DQ0;
@@ -1549,7 +1556,7 @@ end
 //            disable guardian;
 //            release DQ1;
 //            release DQ0;
-//            @(posedge intHOLD) #tHHQX begin 
+//            @(posedge intHOLD) #tHHQX begin
 //                force DQ1=temp1;
 //                force DQ0=temp;
 //            end
@@ -1562,14 +1569,14 @@ end
 //             @(posedge intHOLD) #tHHQX force DQ1=temp;
 //            end
 //
-//        end  
+//        end
 //
-//        begin : guardian 
+//        begin : guardian
 //            @(posedge intHOLD)
 //            ->Debug.x8;
 //            disable out_effect;
 //        end
-//    end //CP_HOLD_out_effect   
+//    end //CP_HOLD_out_effect
 
     always @(negedge intHOLD) begin : CP_HOLD_out_effect_n
     begin : out_effect_n
@@ -1585,7 +1592,7 @@ end
             #tHLQZ;
             disable guardian_n;
         end
-    end    
+    end
     begin: guardian_n
     end
 end
@@ -1593,13 +1600,13 @@ end
     always @(posedge intHOLD) begin : CP_HOLD_out_effect_p
     begin : out_effect_p
         if(cmdRecName=="Dual Output Fast Read") begin
-            force DQ1 = temp1;
-            force DQ0 = temp;
+            // force DQ1 = temp1;
+            // force DQ0 = temp;
         end
-    end    
-end     
+    end
+end
 
-`endif    
+`endif
 
 
 
@@ -1632,7 +1639,7 @@ input [2:0] bit_count;
 begin
   #1;
     // $display("In singleIO_output: ck_count=%h", bit_count, $time);
-    if(read.enable==1) begin    
+    if(read.enable==1) begin
         `ifdef MEDITERANEO
         //if((N25Qxxx.DoubleTransferRate == 1 && ((bit_count == 1 && read.succeedingReads == 0) || (bit_count == 0 && read.succeedingReads == 1)))
         if((N25Qxxx.DoubleTransferRate == 1 && ((bit_count == 0 && read.succeedingReads == 0) || (bit_count == 0 && read.succeedingReads == 1)))
@@ -1645,30 +1652,30 @@ begin
             mem.readData(dataOut); //read data and increments address
             f.out_info(readAddr, dataOut);
         end
-        
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
-    end else if(read.enable_fast==1) begin    
+    end else if(read.enable_fast==1) begin
         if(bit_count==0) begin
             readAddr = mem.memAddr;
             mem.readData(dataOut); //read data and increments address
             f.out_info(readAddr, dataOut);
         end
-        
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
-    
+
     end else if (read.enable_rsfdp==1) begin
-       
+
         if(bit_count==0) begin
                 readAddr = FlashDiscPar.fdpAddr;
                 FlashDiscPar.readData(dataOut); //read data and increments address
                 f.out_info(readAddr, dataOut);
         end
-          
+
          #tCLQX
           bitOut = dataOut[dataDim-1-bit_count];
           -> sendToBus;
@@ -1682,88 +1689,88 @@ begin
      //  `endif
             dataOut = stat.SR;
             f.out_info(readAddr, dataOut);
-        end    
-       
+        end
+
        #tCLQX
      //  `ifdef MEDITERANEO
      //   if(DoubleTransferRate == 1) begin
      //   bitOut = dataOut[dataDim-1-bit_count-2];
-  //  end else 
+  //  end else
     //`endif
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
      end else if (flag.enable_FSR_read==1) begin
-        
+
         if(bit_count==0) begin
 
             dataOut = flag.FSR;
             f.out_info(readAddr, dataOut);
-        end    
-       
+        end
+
        #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
      end else if (VolatileReg.enable_VCR_read==1) begin
-        
+
        if(bit_count==0) begin
 
             dataOut = VolatileReg.VCR;
             f.out_info(readAddr, dataOut);
-       end    
-       
+       end
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
     // added   to check for PMR register read
      end else if (PMReg.enable_PMR_read==1) begin
-        
+
         if(bit_count==0) begin
             dataOut = PMReg.PMR;
             f.out_info(readAddr, dataOut);
-        end    
-        
+        end
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
      end else if (flag.enable_FSR_read==1) begin
-        
+
         if(bit_count==0) begin
             dataOut = flag.FSR;
             f.out_info(readAddr, dataOut);
-        end    
-        
+        end
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
-        -> sendToBus;    
+        -> sendToBus;
      end else if (VolatileEnhReg.enable_VECR_read==1) begin
-        
+
        if(bit_count==0) begin
 
             dataOut = VolatileEnhReg.VECR;
             f.out_info(readAddr, dataOut);
-        end    
-        
+        end
+
         #tCLQX
         // $display("In VECR Read: dataOut=%h, bitOut=%h ", dataOut, bitOut, $time);
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
-    
+
 
      end else if (NonVolatileReg.enable_NVCR_read==1) begin
-     
- 
+
+
         if(bit_count==0 && firstNVCR == 1) begin
-            
+
             dataOut = NonVolatileReg.NVCR[7:0];
             f.out_info(readAddr, dataOut);
             firstNVCR=0;
-          
+
         end else if(bit_count==0 && firstNVCR == 0) begin
-         
+
            dataOut = NonVolatileReg.NVCR[15:8];
            f.out_info(readAddr, dataOut);
            firstNVCR=2;
@@ -1772,7 +1779,7 @@ begin
            dataOut = 0;
            f.out_info(readAddr, dataOut);
         end
-       
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
@@ -1783,29 +1790,29 @@ begin
           if (GPRR_Reg.GPRR_location != 0 && GPRR_Reg.GPRR_location >= 64) begin
             dataOut = 8'h00;
             f.out_info(readAddr, dataOut);
-          end else begin   
+          end else begin
             dataOut = GPRR_Reg.GPRR[(GPRR_Reg.GPRR_location*8) +: 8];
             f.out_info(readAddr, dataOut);
           end
           if(GPRR_Reg.GPRR_location < 65) begin
-            GPRR_Reg.GPRR_location = GPRR_Reg.GPRR_location + 1; 
+            GPRR_Reg.GPRR_location = GPRR_Reg.GPRR_location + 1;
           end
         end
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
-    `endif        
+    `endif
 
 `ifdef MEDT_PASSWORD
      end else if (PSWORD_Reg.enable_PSWORD_read==1) begin
         if (bit_count == 0 && firstPSWORD == 1) begin
           if(PSWORD_Reg.PSWORD_location < 9) begin
-            PSWORD_Reg.PSWORD_location = PSWORD_Reg.PSWORD_location + 1; 
+            PSWORD_Reg.PSWORD_location = PSWORD_Reg.PSWORD_location + 1;
           end
           if (PSWORD_Reg.PSWORD_location != 0 && PSWORD_Reg.PSWORD_location >= 8) begin
             dataOut = 8'h00;
             f.out_info(readAddr, dataOut);
-          end else begin   
+          end else begin
             dataOut = PSWORD_Reg.PSWORD[(PSWORD_Reg.PSWORD_location*8) +: 8];
             f.out_info(readAddr, dataOut);
           end
@@ -1814,29 +1821,29 @@ begin
           firstPSWORD = 1;
           dataOut = PSWORD_Reg.PSWORD[(PSWORD_Reg.PSWORD_location*8) +: 8];
           f.out_info(readAddr, dataOut);
-        end  
+        end
 
         if(PSWORD_Reg.passwordReadNotAllowed==1) begin
             dataOut = 'hzz;
         end
 
         #tCLQX
-        
+
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
-    `endif        
+    `endif
 
 `ifdef MEDT_ADVANCED_SECTOR
      end else if (ASP_Reg.enable_ASP_read==1) begin
- 
+
         if(bit_count==0 && firstASP == 1) begin
-            
+
             dataOut = ASP_Reg.ASP[7:0];
             f.out_info(readAddr, dataOut);
             firstASP=0;
-          
+
         end else if(bit_count==0 && firstASP == 0) begin
-         
+
            dataOut = ASP_Reg.ASP[15:8];
            f.out_info(readAddr, dataOut);
            firstASP=2;
@@ -1845,38 +1852,38 @@ begin
            dataOut = 0;
            f.out_info(readAddr, dataOut);
         end
-       
+
         #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 `endif
- 
+
 
   `ifdef byte_4
 
-  //modificare 
+  //modificare
    end else if (ExtAddReg.enable_EAR_read==1) begin
-        
+
         if(ck_count==0) begin
-        
+
             dataOut = ExtAddReg.EAR[7:0];
             f.out_info(readAddr, dataOut);
-            
+
         end
-       
+
         #tCLQX
         //bitOut = dataOut[dataDim-1-ck_count];
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
-   `endif   
+   `endif
    `ifdef MEDT_4KBLocking
    end else if (lock.enable_lockReg_read==1 || lock4kb.enable_lockReg_read==1) begin
-   `else    
+   `else
    end else if (lock.enable_lockReg_read==1) begin
    `endif
           if((bit_count==0 && N25Qxxx.DoubleTransferRate==0) ||
-             (bit_count==2 && N25Qxxx.DoubleTransferRate==1)) begin 
+             (bit_count==2 && N25Qxxx.DoubleTransferRate==1)) begin
               readAddr = f.sec(addr);
               `ifdef MEDT_4KBLocking
                   if(readAddr == 'h0 || readAddr == 'h1ff) begin
@@ -1887,17 +1894,17 @@ begin
                       dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
                       f.out_info(readAddr, dataOut);
                   end
-              `else    
+              `else
                 dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
                 f.out_info(readAddr, dataOut);
-              `endif 
+              `endif
           end
-          
+
           #tCLQX
           bitOut = dataOut[dataDim-1-bit_count];
           -> sendToBus;
 
-   `ifdef MEDT_PPB 
+   `ifdef MEDT_PPB
    end else if (ppb.enable_PPBReg_read == 1) begin
        if(bit_count==0) begin
            readAddr = f.sec(addr);
@@ -1917,8 +1924,8 @@ begin
        bitOut = dataOut[dataDim-1-bit_count];
        -> sendToBus;
    `endif
-    
-   end else if (read.enable_OTP==1) begin 
+
+   end else if (read.enable_OTP==1) begin
 
           if(bit_count==0) begin
               readAddr = 'h0;
@@ -1931,15 +1938,15 @@ begin
               end
               f.out_info(readAddr, dataOut);
           end
-          
+
           if(N25Qxxx.deep_power_down==1) dataOut = 'hzz;
           #tCLQX
           bitOut = dataOut[dataDim-1-bit_count];
           -> sendToBus;
 
-   
-   
-    end else if (read.enable_ID==1) begin // && protocol=="extended") begin 
+
+
+    end else if (read.enable_ID==1) begin // && protocol=="extended") begin
         // $display("In READ_ID : bit_count=%h , rdaddr=%h ", bit_count, readAddr, $time);
         `ifdef MEDITERANEO
         if(bit_count==2 && N25Qxxx.DoubleTransferRate == 1 && read.ID_index == 0 ) begin
@@ -1958,7 +1965,7 @@ begin
             if(goReadId == 1) begin //
             readAddr = 'h0;
             readAddr = read.ID_index;
-            
+
             if (read.ID_index==0)      dataOut=Manufacturer_ID;
             else if (read.ID_index==1) dataOut=MemoryType_ID;
             else if (read.ID_index==2) dataOut=MemoryCapacity_ID;
@@ -1980,7 +1987,7 @@ begin
             else if (read.ID_index==18) dataOut=CFD_12;
             else if (read.ID_index==19) dataOut=CFD_13;
             else if (read.ID_index>19) dataOut=0;
-            
+
             //RK if (read.ID_index<=18) read.ID_index=read.ID_index+1;
             if (read.ID_index<=19) read.ID_index=read.ID_index+1;
             //RK else read.ID_index=0;
@@ -1991,12 +1998,12 @@ begin
             end //
         `endif
         end
-       
+
        #tCLQX
         bitOut = dataOut[dataDim-1-bit_count];
         -> sendToBus;
 
-    end   
+    end
 
 end
 
@@ -2018,31 +2025,8 @@ always @(sendToBus) begin
   #0;
   if(die_active == 1 ) begin
     fork : CP_sendToBus
-
-
       dtr_dout_started = 1'b1;
-      force DQ1 = 1'bX;
-      if(N25Qxxx.DoubleTransferRate == 1) force DQ0 = 1'bX;
-      if((cmdRecName == "Read Fast") || 
-        (cmdRecName == "Dual Command Fast Read") || 
-        (cmdRecName == "Quad Command Fast Read") || 
-        (cmdRecName == "Dual Output Fast Read") ||
-        (cmdRecName == "Dual I/O Fast Read") ||
-        (cmdRecName == "Quad I/O Fast Read") 
-        ) begin 
-      // #(tCLQV - tCLQX) 
-        #(tCLQV/2 - tCLQX - 1); 
-      end 
-      else begin
-        #(tCLQV - tCLQX - 1) ;
-      end
-      // if(DoubleTransferRate == 1) begin
-      //   force DQ0 = bitOut;
-      // end
-      // else begin
-        force DQ1 = bitOut;
-      // end
-
+      DQ1_reg = bitOut;
     join
   end
 end
@@ -2063,13 +2047,13 @@ end
 event resetEvent; //Activated only in devices with RESET pin.
 event SSEresumeHwDone;
 
-reg resetDuringDecoding=0; //These two boolean variables are used in TimingCheck 
+reg resetDuringDecoding=0; //These two boolean variables are used in TimingCheck
 reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
 
     always @reset_by_powerOn if (reset_by_powerOn) begin : PON_reset
 
         ->resetEvent;
-        
+
 
         release DQ1; //verificare
         ck_count = 0;
@@ -2080,7 +2064,7 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
         data='h0;
         dataOut='h0;
 
-        `ifdef byte_4 
+        `ifdef byte_4
             ExtAddReg.EAR = 'b00000000;
             -> checkAddressMode;
             -> checkAddressSegment;
@@ -2117,17 +2101,17 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
             stat.SR[1] = 0; // WEL - write enable latch
         end
         // commands waiting to be executed are disabled internally
-        
+
         // read enabler are resetted internally, in the read processes
-        
+
         // CUIdecoders are internally disabled by reset signal
-        
+
         #0 $display("[%0t ns] ==INFO== VCC has been driven below threshold : internal logic will be reset.", $time);
         -> checkProtocol;
         prog.disableOperations;
     end
-        
-`ifdef RESET_pin 
+
+`ifdef RESET_pin
 
     always @RESET if (!RESET) begin : CP_reset
 
@@ -2135,18 +2119,18 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
             ->resumeSSEfromHwReset;
             prog.resumedFromHWReset = 1;
             @SSEresumeHwDone;
-            end 
+            end
         else if(prog.operation =="Subsector Erase" || prog.operation=="Subsector Erase 32K")
             prog.HwResetDuringSSE = 1;
 
         ->resetEvent;
-        
-        
-        if(S===0 && !busy) 
-            resetDuringDecoding=1; 
+
+
+        if(S===0 && !busy)
+            resetDuringDecoding=1;
         else if (busy && prog.operation!="Subsector Erase" && prog.operation!="Subsector Erase 32K")
-            resetDuringBusy=1; 
-        
+            resetDuringBusy=1;
+
         if(prog.operation=="Subsector Erase" || prog.oldOperation=="Subsector Erase" ||
            prog.operation=="Subsector Erase 32K" || prog.oldOperation=="Subsector Erase 32K") @prog.noError2;
         release DQ1; //verificare
@@ -2158,7 +2142,7 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
         data='h0;
         dataOut='h0;
 
-        `ifdef byte_4 
+        `ifdef byte_4
             ExtAddReg.EAR = 'b00000000;
             -> checkAddressMode;
             -> checkAddressSegment;
@@ -2195,11 +2179,11 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
             stat.SR[1] = 0; // WEL - write enable latch
         end
         // commands waiting to be executed are disabled internally
-        
+
         // read enabler are resetted internally, in the read processes
-        
+
         // CUIdecoders are internally disabled by reset signal
-        
+
         #0 $display("[%0t ns] ==INFO== Reset Signal has been driven low : internal logic will be reset.", $time);
         -> checkProtocol;
         prog.disableOperations;
@@ -2207,35 +2191,35 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
     end
 `ifdef Feature_8
     always @(posedge RESET2) begin
-        if(!prog.subsec_erase_susp && prog.operation!="Subsector Erase" && prog.oldOperation!="Subsector Erase")begin 
+        if(!prog.subsec_erase_susp && prog.operation!="Subsector Erase" && prog.oldOperation!="Subsector Erase")begin
             -> checkProtocol;
             flag.FSR[7:1] = 'b1000000;
         end
     end
-`endif    
+`endif
 `ifdef RESET_pin
     always @(posedge RESET_DQ3) begin
-        if(!prog.subsec_erase_susp && prog.operation!="Subsector Erase" && prog.oldOperation!="Subsector Erase")begin 
+        if(!prog.subsec_erase_susp && prog.operation!="Subsector Erase" && prog.oldOperation!="Subsector Erase")begin
             -> checkProtocol;
             flag.FSR[7:1] = 'b1000000;
         end
     end
-`endif    
+`endif
 
-`endif    
+`endif
 
  event resumeSSEfromSwReset;
  event SSEresumeDone;
 `ifdef RESET_software
 //-----------------------
-// Software Reset 
+// Software Reset
 //-----------------------
 
    reg  Reset_enable= 0;
-    always @(seqRecognized) if (cmdRecName=="Reset Enable") fork : REN 
-        
+    always @(seqRecognized) if (cmdRecName=="Reset Enable") fork : REN
+
         begin : exe
-          @(posedge N25Qxxx.S); 
+          @(posedge N25Qxxx.S);
           disable reset;
           Reset_enable= 1;
           $display("  [%0t ns] Command execution: Reset Enable.", $time);
@@ -2245,12 +2229,12 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
           @N25Qxxx.resetEvent;
           disable exe;
         end
-    
+
     join
 
 
  always @(seqRecognized) if (cmdRecName=="Reset") begin : SW_reset
-        
+
     if(Reset_enable==1) begin
         if(prog.subsec_erase_susp == 1) begin
             ->resumeSSEfromSwReset;
@@ -2261,13 +2245,13 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
             prog.SwResetDuringSSE = 1;
 
         ->resetEvent;
-        
+
         Reset_enable=0;//verificare se va bene
-        if(S===0 && !busy) 
-            resetDuringDecoding=1; 
+        if(S===0 && !busy)
+            resetDuringDecoding=1;
         else if (busy)
-            resetDuringBusy=1; 
-        
+            resetDuringBusy=1;
+
         //if(prog.operation=="Subsector Erase" || prog.oldOperation=="Subsector Erase" ||
         //   prog.operation=="Subsector Erase 32K" || prog.oldOperation=="Subsector Erase 32K") @prog.noError2;
 
@@ -2279,9 +2263,9 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
         addr='h0;
         data='h0;
         dataOut='hff;//Jan3
-        
+
         `ifdef byte_4
-            ExtAddReg.EAR = 'b00000000; 
+            ExtAddReg.EAR = 'b00000000;
             -> checkAddressMode;
             -> checkAddressSegment;
         `endif
@@ -2321,11 +2305,11 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
             stat.SR[1] = 0; // WEL - write enable latch
         end
         // commands waiting to be executed are disabled internally
-        
+
         // read enabler are resetted internally, in the read processes
-        
+
         // CUIdecoders are internally disabled by reset signal
-        
+
         #0 $display("[%0t ns] ==INFO== Software reset : internal logic will be reset.", $time);
         -> checkProtocol;
         //prog.SR_data = stat.SR;
@@ -2336,13 +2320,13 @@ reg resetDuringBusy=0;     //entity to check tRHSL timing constraint
  end
 
 
-always @(seqRecognized) if (cmdRecName!="Reset" && Reset_enable==1) begin 
+always @(seqRecognized) if (cmdRecName!="Reset" && Reset_enable==1) begin
         Reset_enable=0;
 end
 
 `endif
 //-----------------------
-//  Deep power down 
+//  Deep power down
 //-----------------------
 
 
@@ -2357,7 +2341,7 @@ end
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - Deep Power Down aborted due to Prog/Erase Suspend",$time);
             disable CP_deepPowerDown;
-          end  
+          end
 
           busy=1;
           $display("  [%0t ns] Device is entering in deep power down mode...",$time);
@@ -2386,7 +2370,7 @@ end
           $display("  [%0t ns] ...release from power down mode completed.",$time);
           busy=0;
           deep_power_down=0;
-        end 
+        end
 
         begin : reset
           @resetEvent;
@@ -2399,14 +2383,14 @@ end
 `endif
 
 
-     
+
 //-----------------
 //   XIP mode
 //-----------------
 
 
 //-----------------
-// Latching address 
+// Latching address
 //-----------------
 
 
@@ -2419,20 +2403,20 @@ always @(negedge S) if (XIP) begin : XIP_latchInit
            latchingMode = "I";
        end else if (cmdRecName=="Quad I/O Fast Read" || cmdRecName=="Extended command QIOFRDTR") begin
            latchingMode = "E";
-       `ifdef MEDT_4READ4D    
+       `ifdef MEDT_4READ4D
        end else if (cmdRecName=="Word Read Quad I/O" || cmdRecName=="Word Read Quad Command Fast Read") begin
            latchingMode = "E";
-       `endif    
+       `endif
        end else begin
            latchingMode = "A";
        end
        $display("[%0t ns] %0s. Address expected ...", $time,cmdRecName);
-            
-            fork : XipProc1 
+
+            fork : XipProc1
 
                 @(addrLatched) begin
-                    
-                    $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time, 
+
+                    $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time,
                                  addr, f.col(addr), f.pag(addr), f.sec(addr));
                     -> seqRecognized;
                     disable XipProc1;
@@ -2446,18 +2430,18 @@ always @(negedge S) if (XIP) begin : XIP_latchInit
                 @(resetEvent or voltageFault) begin
                     disable XipProc1;
                 end
-            
+
             join
 
     end else  if (protocol=="dual") begin
 
        latchingMode = "I";
        $display("[%0t ns] %0s. Address expected ...", $time,cmdRecName);
-        
-              fork : XipProc2 
+
+              fork : XipProc2
 
                 @(addrLatched) begin
-                     $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time, 
+                     $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time,
                                  addr, f.col(addr), f.pag(addr), f.sec(addr));
                      -> seqRecognized;
                      disable XipProc2;
@@ -2471,18 +2455,18 @@ always @(negedge S) if (XIP) begin : XIP_latchInit
                 @(resetEvent or voltageFault) begin
                     disable XipProc2;
                 end
-            
+
             join
 
     end else  if (protocol=="quad") begin
 
        latchingMode = "E";
        $display("[%0t ns]  %0s. Address expected ...", $time,cmdRecName);
-        
-              fork : XipProc3 
+
+              fork : XipProc3
 
                 @(addrLatched) begin
-                     $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time, 
+                     $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time,
                                  addr, f.col(addr), f.pag(addr), f.sec(addr));
                     -> seqRecognized;
                     disable XipProc3;
@@ -2496,28 +2480,28 @@ always @(negedge S) if (XIP) begin : XIP_latchInit
                 @(resetEvent or voltageFault) begin
                     disable XipProc3;
                 end
-            
+
             join
-    
+
     end
- 
-end 
+
+end
 
 task determineDevName;
     begin
         `ifdef STACKED_MEDT_1G
-            $display ("===INFO=== Device Name: %s 1G (2 die stacked) die%d %d",devName,rdeasystacken,rdeasystacken2)    ; 
+            $display ("===INFO=== Device Name: %s 1G (2 die stacked) die%d %d",devName,rdeasystacken,rdeasystacken2)    ;
         `elsif Stack1024Mb
-            $display ("===INFO=== Device Name: %s 1G (4 die stacked) die%d %d",devName,rdeasystacken,rdeasystacken2)    ; 
+            $display ("===INFO=== Device Name: %s 1G (4 die stacked) die%d %d",devName,rdeasystacken,rdeasystacken2)    ;
         `elsif Stack512Mb
-            $display ("===INFO=== Device Name: %s 512Mb (2 die stacked) die%d %d",devName, rdeasystacken,rdeasystacken2)    ; 
+            $display ("===INFO=== Device Name: %s 512Mb (2 die stacked) die%d %d",devName, rdeasystacken,rdeasystacken2)    ;
         `else
-            $display ("===INFO=== Device Name: %s",devName)    ; 
+            $display ("===INFO=== Device Name: %s",devName)    ;
         `endif
 
     end
 endtask //determineDevName
-            
+
 
 
 
@@ -2547,21 +2531,21 @@ endmodule //N25Qxxx
 -----------------------------------------------------------
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 
-`timescale 1ns / 1ps 
+`timescale 1ns / 1ps
 
 module CUIdecoder (cmdAllowed);
 
 
-    `include "include/DevParam.h" 
+    `include "DevParam.h"
 
     input cmdAllowed;
 
     parameter [40*8:1] cmdName = "Write Enable";
     parameter [cmdDim-1:0] cmdCode = 'h06;
-    parameter withAddr = 1'b0; // 1 -> command with address  /  0 -> without address 
-    parameter with2Addr = 1'b0; // 1 -> command with address  /  0 -> without address 
-    parameter with4Addr = 1'b0; // 1 -> command with address  /  0 -> without address 
-     
+    parameter withAddr = 1'b0; // 1 -> command with address  /  0 -> without address
+    parameter with2Addr = 1'b0; // 1 -> command with address  /  0 -> without address
+    parameter with4Addr = 1'b0; // 1 -> command with address  /  0 -> without address
+
     //debug events
     event cui0;
     event cui1;
@@ -2573,23 +2557,23 @@ module CUIdecoder (cmdAllowed);
         $display("[%0t ns] COMMAND DECODED: %0s , withAddr=%h, with2Addr=%h, with4Addr=%h, cmdcode=%h ", $time, cmdName, withAddr, with2Addr, with4Addr, cmdCode);
 
         if(!withAddr && !with2Addr && !with4Addr) begin
-            
+
             N25Qxxx.cmdRecName = cmdName;
             $display("[%0t ns] COMMAND RECOGNIZED: %0s.", $time, cmdName);
-            -> N25Qxxx.seqRecognized; 
-        
+            -> N25Qxxx.seqRecognized;
+
         end else if (withAddr) begin
-            
+
             N25Qxxx.quadMode = 0;
             N25Qxxx.latchingMode = "A";
              $display("[%0t ns] 1.COMMAND RECOGNIZED: %0s. Address expected ...", $time, cmdName);
             -> N25Qxxx.codeRecognized;
-            
-            fork : proc1 
+
+            fork : proc1
 
                 @(N25Qxxx.addrLatched) begin
                     if (cmdName!="Read OTP" && cmdName!="Program OTP")
-                        $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time, 
+                        $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time,
                                  N25Qxxx.addr, f.col(N25Qxxx.addr), f.pag(N25Qxxx.addr), f.sec(N25Qxxx.addr));
                     else
                         $display("  [%0t ns] Address latched: column %0h", $time, N25Qxxx.addr);
@@ -2606,22 +2590,22 @@ module CUIdecoder (cmdAllowed);
                 @(N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
                     disable proc1;
                 end
-            
+
             join
 
 
          end else if (with2Addr) begin
-            
+
             N25Qxxx.quadMode = 0;
             N25Qxxx.latchingMode = "I";
             $display("[%0t ns] 2.COMMAND RECOGNIZED: %0s. Address expected ...", $time, cmdName);
             -> N25Qxxx.codeRecognized;
-            
-            fork : proc2 
+
+            fork : proc2
 
                 @(N25Qxxx.addrLatched) begin
                     if (cmdName!="Read OTP" && cmdName!="Program OTP")
-                        $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time, 
+                        $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time,
                                  N25Qxxx.addr, f.col(N25Qxxx.addr), f.pag(N25Qxxx.addr), f.sec(N25Qxxx.addr));
                     else
                         $display("  [%0t ns] Address latched: column %0h cmdName %s", $time, N25Qxxx.addr, cmdName);
@@ -2640,17 +2624,17 @@ module CUIdecoder (cmdAllowed);
                 end
             join
         end  else if (with4Addr) begin
-                    
+
                                 N25Qxxx.quadMode = 1;
                                 N25Qxxx.latchingMode = "E";
                                 $display("[%0t ns] 4.COMMAND RECOGNIZED: %0s. Address expected ...", $time, cmdName);
                                 -> N25Qxxx.codeRecognized;
-                                            
-                                fork : proc3 
-                                   
+
+                                fork : proc3
+
                                    @(N25Qxxx.addrLatched) begin
                                        if (cmdName!="Read OTP" && cmdName!="Program OTP")
-                                           $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time, 
+                                           $display("  [%0t ns] Address latched: %h (byte %0d of page %0d, sector %0d)", $time,
                                            N25Qxxx.addr, f.col(N25Qxxx.addr), f.pag(N25Qxxx.addr), f.sec(N25Qxxx.addr));
                                        else
                                            $display("  [%0t ns] Address latched: column %0h", $time, N25Qxxx.addr);
@@ -2668,24 +2652,24 @@ module CUIdecoder (cmdAllowed);
                                        disable proc3;
                                    end
                                 join
-      end    
+      end
     end
 end
-endmodule //CUIdecoder    
+endmodule //CUIdecoder
 
 `ifdef MEDT_MSE
-//CUIdecoderEFI captures 
+//CUIdecoderEFI captures
 module CUIdecoderEFI_MSE (cmdAllowed);
-    `include "include/DevParam.h" 
+    `include "DevParam.h"
 
     input cmdAllowed;
 
     parameter [40*8:1] cmdName = "Write Enable";
     parameter [cmdDim-1:0] cmdCode1 = 'h9B;
     parameter [cmdDim-1:0] cmdCode2 = 'h26;
-    parameter withAddr = 1'b0; // 1 -> command with address  /  0 -> without address 
-    parameter with2Addr = 1'b0; // 1 -> command with address  /  0 -> without address 
-    parameter with4Addr = 1'b0; // 1 -> command with address  /  0 -> without address 
+    parameter withAddr = 1'b0; // 1 -> command with address  /  0 -> without address
+    parameter with2Addr = 1'b0; // 1 -> command with address  /  0 -> without address
+    parameter with4Addr = 1'b0; // 1 -> command with address  /  0 -> without address
 
     reg [cmdDim-1:0] cmd;
     reg [cmdDim-1:0] attr;
@@ -2717,9 +2701,9 @@ module CUIdecoderEFI_MSE (cmdAllowed);
     // latch sub-opcode
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="2" && N25Qxxx.protocol=="extended") begin : CP_latchCmd2
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         cmd[iCmd2] = N25Qxxx.DQ0;
@@ -2735,16 +2719,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                 $display("[%0t ns] Sub-opcode: %h not recognized, aborting operation", $time, cmd);
                 -> abortEFI;
             end
-        end    
-     end        
+        end
+     end
     end //CP_latchCmd2
-    
+
     //latch attribute (extended)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && N25Qxxx.protocol=="extended") begin : CP_latchAttr
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         attr[iCmd2] = N25Qxxx.DQ0;
@@ -2760,18 +2744,18 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             end else begin
                 N25Qxxx.latchingMode = "4";
                 iStartAddr = addrDimLatch4;
-            end    
+            end
             $display("[%0t ns] Attribute Latched: %0h ", $time, attr);
-        end    
-     end        
+        end
+     end
     end //CP_latchAttr
 
     //latch STARTING ADDRESS (extended)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="4" && N25Qxxx.protocol=="extended") begin : CP_latchStartingAddress
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStartAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStartAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         start_address[iStartAddr] = N25Qxxx.DQ0;
@@ -2782,16 +2766,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             N25Qxxx.latchingMode = "5";
             iStopAddr = addrDimLatch4;
             $display("[%0t ns] Starting Address Latched: %0h ", $time, start_address);
-        end    
-     end        
+        end
+     end
     end //CP_latchStartingAddress
 
     //latch STOPING ADDRESS (extended)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="5" && N25Qxxx.protocol=="extended") begin : CP_latchStopingAddress
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStopAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStopAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         stop_address[iStopAddr] = N25Qxxx.DQ0;
@@ -2803,15 +2787,15 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             -> efiSeqRecognized;
             $display("[%0t ns] Stopping Address Latched: %0h ", $time, stop_address);
             disable disableEFI;
-        end    
-     end        
+        end
+     end
     end //CP_latchStopingAddress
 
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="2" && N25Qxxx.protocol=="dual") begin : CP_latchCmd2Dual
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         cmd[iCmd2] = N25Qxxx.DQ1;
@@ -2824,16 +2808,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             iCmd2 = cmdDim +1;
             $display("[%0t ns] Sub-opcode DECODED (dual): %0s , cmdcode=%h ", $time, cmdName, cmd);
             N25Qxxx.cmdRecName = cmdName;
-        end    
-     end        
+        end
+     end
     end //CP_latchCmd2Dual
 
     //latch attribute (dual)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && N25Qxxx.protocol=="dual") begin : CP_latchAttrDual
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         attr[iCmd2] = N25Qxxx.DQ1;
@@ -2845,16 +2829,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             N25Qxxx.latchingMode = "4";
             iStartAddr = addrDimLatch4+1;
             $display("[%0t ns] Attribute Latched (dual) : %0h ", $time, attr);
-        end    
-     end        
+        end
+     end
     end //CP_latchAttrDual
 
     //latch STARTING ADDRESS (dual)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="4" && N25Qxxx.protocol=="dual") begin : CP_latchStartAddrDual
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStartAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStartAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         start_address[iStartAddr] = N25Qxxx.DQ1;
@@ -2866,16 +2850,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             N25Qxxx.latchingMode = "5";
             iStopAddr = addrDimLatch4+1;
             $display("[%0t ns] Start Address Latched (dual) : %0h ", $time, start_address);
-        end    
-     end        
+        end
+     end
     end //CP_latchStartAddrDual
 
     //latch STOPING ADDRESS (dual)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="5" && N25Qxxx.protocol=="dual") begin : CP_latchStopAddrDual
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStopAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iStopAddr != addrDimLatch4 - 1)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         stop_address[iStopAddr] = N25Qxxx.DQ1;
@@ -2888,16 +2872,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             -> efiSeqRecognized;
             $display("[%0t ns] Stop Address Latched (dual) : %0h ", $time, stop_address);
             disable disableEFI;
-        end    
-     end        
+        end
+     end
     end //CP_latchStopAddrDual
 
 
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="2" && N25Qxxx.protocol=="quad") begin : CP_latchCmd2Quad
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         `ifdef HOLD_pin
@@ -2917,16 +2901,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             iCmd2 = cmdDim+3;
             $display("[%0t ns] Sub-opcode DECODED: %0s , cmdcode=%h ", $time, cmdName, cmd);
             N25Qxxx.cmdRecName = cmdName;
-        end    
-     end        
+        end
+     end
     end //CP_latchCmd2Quad
 
     //latch attribute (quad)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && N25Qxxx.protocol=="quad") begin : CP_latchAttrQuad
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         `ifdef HOLD_pin
@@ -2944,16 +2928,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             N25Qxxx.latchingMode = "4";
             iStartAddr = addrDimLatch4+3;
             $display("[%0t ns] Attribute Latched: %0h ", $time, attr);
-        end    
-     end        
+        end
+     end
     end //CP_latchAttrQuad
 
     //latch STARTING ADDRESS (quad)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="4" && N25Qxxx.protocol=="quad") begin : CP_latchStartAddrQuad
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         `ifdef HOLD_pin
@@ -2971,16 +2955,16 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             N25Qxxx.latchingMode = "5";
             iStopAddr = addrDimLatch4+3;
             $display("[%0t ns] Start Address Latched: %0h ", $time, start_address);
-        end    
-     end        
+        end
+     end
     end //CP_latchStartAddrQuad
 
     //latch STOPING ADDRESS (quad)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="5" && N25Qxxx.protocol=="quad") begin : CP_latchStopAddrQuad
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         `ifdef HOLD_pin
@@ -2999,12 +2983,12 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             -> efiSeqRecognized;
             $display("[%0t ns] Stop Address Latched: %0h ", $time, stop_address);
             disable disableEFI;
-        end    
-     end        
+        end
+     end
     end //CP_latchStopAddrQuad
 
 
-    always @(N25Qxxx.latchingMode or N25Qxxx.S) begin 
+    always @(N25Qxxx.latchingMode or N25Qxxx.S) begin
         if(N25Qxxx.latchingMode == 2 ||
            N25Qxxx.latchingMode == 3 ||
            N25Qxxx.latchingMode == 4 ||
@@ -3039,21 +3023,21 @@ module CUIdecoderEFI_MSE (cmdAllowed);
     reg [3:0] ssCount_stop; //Subsector count
     reg [31:0] ssCount_total;
     reg [8:0] sCount_total;
-    //sector address holders for 
+    //sector address holders for
     reg [7:0] sector_start_addr;
     reg [7:0] sector_stop_addr;
     reg [3:0] subsector_start_addr;
     reg [3:0] subsector_stop_addr;
     reg [11:0] ss_start_4Kb_address;
     reg [11:0] ss_stop_4Kb_address;
-    
+
     reg [32:0] ssEraseable [0:31]; //[erase me flag][address to be erased]
 
     reg [7:0] sector_start;
     reg [7:0] sector_stop;
-    reg sector_locked_by_V; 
-    reg sector_locked_by_NV_b; 
-    reg sector_locked_by_SR; 
+    reg sector_locked_by_V;
+    reg sector_locked_by_NV_b;
+    reg sector_locked_by_SR;
     reg ssector_locked_by_V;
     integer i;
     integer y;
@@ -3064,7 +3048,7 @@ module CUIdecoderEFI_MSE (cmdAllowed);
     integer myTemp;
 
     always @(efiSeqRecognized) begin
-        if(N25Qxxx.cmdRecName == cmdName) 
+        if(N25Qxxx.cmdRecName == cmdName)
             fork : MSE_ops
                 begin : exe
                     @(posedge N25Qxxx.S)
@@ -3073,15 +3057,15 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                     N25Qxxx.busy = 1;
                     //mse_delay = 1000;
                     $display("  [%0t ns] Command execution begins: %0s.", $time, N25Qxxx.prog.operation);
-                    
+
                     sector_start_addr = start_address[23:16];
                     subsector_start_addr = start_address[15:12];
                     sector_stop_addr = stop_address[23:16];
                     subsector_stop_addr = stop_address[15:12];
 
                     //4Kb granularity addressing
-                    ss_start_4Kb_address = start_address[23:12]; 
-                    ss_stop_4Kb_address = stop_address[23:12]; 
+                    ss_start_4Kb_address = start_address[23:12];
+                    ss_stop_4Kb_address = stop_address[23:12];
 
                     sector_temp = sector_stop_addr - sector_start_addr;
 
@@ -3091,10 +3075,10 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                     end else if(start_address == stop_address) begin //implies same sector and subsector
                             sCount_total = 0;
                             ssCount_total = 1;
-                            checkSubSectorLocksInRange(ssCount_total,start_address);  
-                    end else begin //A <= B 
+                            checkSubSectorLocksInRange(ssCount_total,start_address);
+                    end else begin //A <= B
                         //start and stop between top and bottom sectors
-                        if(ss_start_4Kb_address > 'hF && ss_stop_4Kb_address < 'hFF0) begin 
+                        if(ss_start_4Kb_address > 'hF && ss_stop_4Kb_address < 'hFF0) begin
                             ssCount_total = ss_start_4Kb_address % 'd16;
                             if(ssCount_total != 0) begin
                                 ssCount_total = 'd16 - ssCount_total;
@@ -3106,28 +3090,28 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                             sCount_total = sCount_total + sector_temp;
                         //start and stop at bottom or top
                         end else if((ss_start_4Kb_address < 'h10 && ss_stop_4Kb_address < 'h10) ||
-                                    (ss_start_4Kb_address > 'hFEF && ss_stop_4Kb_address > 'hFEF)) begin 
+                                    (ss_start_4Kb_address > 'hFEF && ss_stop_4Kb_address > 'hFEF)) begin
                             ssCount_total = (ss_stop_4Kb_address - ss_start_4Kb_address) +1;
                             sCount_total = 0;
-                            checkSubSectorLocksInRange(ssCount_total,start_address);  
+                            checkSubSectorLocksInRange(ssCount_total,start_address);
                             ->N25Qxxx.Debug.x1;
                         //start at bottom and stop anywhere but bottom and top
-                        end else if(ss_start_4Kb_address <= 'hF && (ss_stop_4Kb_address > 'hF && ss_stop_4Kb_address < 'hFF0)) begin 
-                            ssCount_total = 'd16 - subsector_start_addr; 
-                            checkSubSectorLocksInRange(ssCount_total,start_address);  
+                        end else if(ss_start_4Kb_address <= 'hF && (ss_stop_4Kb_address > 'hF && ss_stop_4Kb_address < 'hFF0)) begin
+                            ssCount_total = 'd16 - subsector_start_addr;
+                            checkSubSectorLocksInRange(ssCount_total,start_address);
                             ssCount_total = ssCount_total + ((ss_stop_4Kb_address + 1) % 'd16);
-                            checkSubSectorLocksInRange((ss_stop_4Kb_address + 1) %'d16,{ss_stop_4Kb_address,12'h0});  
+                            checkSubSectorLocksInRange((ss_stop_4Kb_address + 1) %'d16,{ss_stop_4Kb_address,12'h0});
                             //sCount_total = sector_temp - 'h1;
                             sCount_total = sector_temp ;
                             ->N25Qxxx.Debug.x2;
                         //start anywhere between top and bottom and stop at top
-                        end else if((ss_start_4Kb_address > 'hF && ss_start_4Kb_address < 'hFF0) && ss_stop_4Kb_address >= 'hFF0) begin 
+                        end else if((ss_start_4Kb_address > 'hF && ss_start_4Kb_address < 'hFF0) && ss_stop_4Kb_address >= 'hFF0) begin
                             ssCount_total = subsector_stop_addr + 'h1;
-                            checkSubSectorLocksInRange(ssCount_total,{12'hFF0,12'h0});  
+                            checkSubSectorLocksInRange(ssCount_total,{12'hFF0,12'h0});
                             ssCount_total_temp = ss_start_4Kb_address % 'd16;
                             if(ssCount_total_temp != 0) begin
                                 ssCount_total_temp = 'd16 - ssCount_total_temp;
-                                checkSubSectorLocksInRange(ssCount_total_temp,{ss_start_4Kb_address,12'h0});  
+                                checkSubSectorLocksInRange(ssCount_total_temp,{ss_start_4Kb_address,12'h0});
                                 ssCount_total = ssCount_total + ssCount_total_temp;
                                 sCount_total = -1;
                             end else begin
@@ -3137,9 +3121,9 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                             ->N25Qxxx.Debug.x3;
                         end else begin //start at bottom while stop at top
                             ssCount_total = 'd16 - subsector_start_addr;
-                            checkSubSectorLocksInRange(ssCount_total,start_address);  
+                            checkSubSectorLocksInRange(ssCount_total,start_address);
                             ssCount_total_temp = subsector_stop_addr + 'h1;
-                            checkSubSectorLocksInRange(ssCount_total_temp,{12'hFF0,12'h0});  
+                            checkSubSectorLocksInRange(ssCount_total_temp,{12'hFF0,12'h0});
                             ssCount_total = ssCount_total + ssCount_total_temp;
                             sCount_total = 'd254;
                             ->N25Qxxx.Debug.x4;
@@ -3162,7 +3146,7 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                         if(sCount_total != 'd0) begin
                             eraseSectorsInRange(sCount_total, sector_start_addr);
                         end
-                        eraseSubSectorsInRange; 
+                        eraseSubSectorsInRange;
                         $display("  [%0t ns] Command execution completed: %0s.", $time, N25Qxxx.prog.operation);
                         for(y=0; y<32; y=y+1) begin
                             ssEraseable[y] = 33'h0_0000_0000;
@@ -3177,9 +3161,9 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                 end // reset
             join //MSE_ops
     end
-    
 
-    always @(efiErrorCheck) fork : efiErrorCheck_ops 
+
+    always @(efiErrorCheck) fork : efiErrorCheck_ops
         begin : static_check
             //check if any of the sectors is locked
             if(sCount_total > 0) begin
@@ -3190,7 +3174,7 @@ module CUIdecoderEFI_MSE (cmdAllowed);
         fork : dynamic_check
             @(N25Qxxx.voltageFault) begin
                 $display("  [%0t ns] **WARNING** Operation Fault because of Vcc Out of Range!", $time);
-                -> efiError; 
+                -> efiError;
             end
             begin
                 -> efiNoError;
@@ -3198,8 +3182,8 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                 resetForMSE;
             end
         join //dynamic_check
-    join //efiErrorCheck_ops   
- 
+    join //efiErrorCheck_ops
+
     always @(efiError) begin
         //clear ssEraseable
         for(y=0; y<32; y=y+1) begin
@@ -3225,13 +3209,13 @@ module CUIdecoderEFI_MSE (cmdAllowed);
              end
         end
     endfunction //mseDelay
-    
+
     task resetForMSE;
         begin
             N25Qxxx.busy = 0;
             //we initialize everything efi
-            start_address = 32'h0000_0000; 
-            stop_address = 32'h0000_0000; 
+            start_address = 32'h0000_0000;
+            stop_address = 32'h0000_0000;
             sector_start_addr = 0;
             sector_stop_addr = 0;
             sector_temp = 0;
@@ -3252,7 +3236,7 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             attr = 0;
             mse_delay = 0;
             destAddr = 0;
-            ss_address_tracker = 0; 
+            ss_address_tracker = 0;
             disable efiErrorCheck_ops.dynamic_check;
             disable efiErrorCheck_ops;
         end
@@ -3278,7 +3262,7 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             end
         end
     endtask //checkSectorLocksInRange
-    
+
     task eraseSectorsInRange;
         input [8:0] nSectors;
         input [7:0] start_address;
@@ -3294,17 +3278,17 @@ module CUIdecoderEFI_MSE (cmdAllowed);
             end
         end
     endtask //eraseSectorsInRange
-    
+
     task checkSubSectorLocksInRange;
         input [4:0] nSubSectors;
         input [addrDimLatch4 -1:0] start_address;
         begin
             //$display("We are in checkSubSectorLocksInRange %0d %0h\n", nSubSectors, start_address);
             destAddr = start_address;
-            //for (y=init_val;y<(nSubSectors+init_val);y=y+1) begin  
-            for (y=0;y<nSubSectors;y=y+1) begin  
+            //for (y=init_val;y<(nSubSectors+init_val);y=y+1) begin
+            for (y=0;y<nSubSectors;y=y+1) begin
                 if(destAddr[23:16] == 'h00 || destAddr[23:16] == 'hFF) begin //we only check ss locks when s is at bottom or top sector
-                    ssector_locked_by_V = N25Qxxx.lock4kb.isProtected_by_lockReg(destAddr);    
+                    ssector_locked_by_V = N25Qxxx.lock4kb.isProtected_by_lockReg(destAddr);
                 end else begin
                     ssector_locked_by_V = 0;
                 end
@@ -3318,10 +3302,10 @@ module CUIdecoderEFI_MSE (cmdAllowed);
                     ->efiError;
                     y = 'h1F; //this terminates the for loop
                 end
-            end 
+            end
         end
     endtask //checkSubSectorLocksInRange
-    
+
     task cacheSSaddressForErase;
         begin
         end
@@ -3332,7 +3316,7 @@ module CUIdecoderEFI_MSE (cmdAllowed);
         reg erase_me;
         begin
             //loop through ssErasable, we only erase the address flagged as 1
-            for (y=0;y<32;y=y+1) begin  
+            for (y=0;y<32;y=y+1) begin
                 //each element of ssEraseable contains the address and the flag
                 //that tells the BFM to erase that address.  The flag is needed
                 //to be able to erase address 0 or not.
@@ -3352,15 +3336,15 @@ endmodule //CUIdecoderEFI_MSE
 
 `ifdef MEDT_TDP
 module CUIdecoder_TDP (cmdAllowed);
-    `include "include/DevParam.h" 
+    `include "DevParam.h"
 
     input cmdAllowed;
 
     parameter [40*8:1] cmdName = "Write Enable";
     parameter [cmdDim-1:0] cmdCode = 'h48;
-    parameter withAddr = 1'b0; // 1 -> command with address  /  0 -> without address 
-    parameter with2Addr = 1'b0; // 1 -> command with address  /  0 -> without address 
-    parameter with4Addr = 1'b0; // 1 -> command with address  /  0 -> without address 
+    parameter withAddr = 1'b0; // 1 -> command with address  /  0 -> without address
+    parameter with2Addr = 1'b0; // 1 -> command with address  /  0 -> without address
+    parameter with4Addr = 1'b0; // 1 -> command with address  /  0 -> without address
 
     integer iCmd2;
     integer iData;
@@ -3399,7 +3383,7 @@ module CUIdecoder_TDP (cmdAllowed);
 
     always @N25Qxxx.startCUIdec begin
         if (cmdAllowed && cmdCode==N25Qxxx.cmd) begin
-            $display("[%0t ns] COMMAND DECODED: %0s , withAddr=%h, with2Addr=%h, with4Addr=%h, cmdcode=%h ", 
+            $display("[%0t ns] COMMAND DECODED: %0s , withAddr=%h, with2Addr=%h, with4Addr=%h, cmdcode=%h ",
                             $time, cmdName, withAddr, with2Addr, with4Addr, cmdCode);
             N25Qxxx.latchingMode="2";
             iCmd2 = cmdDim - 1;
@@ -3411,9 +3395,9 @@ module CUIdecoder_TDP (cmdAllowed);
     //latch attribute (extended)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="2" && N25Qxxx.protocol=="extended") begin : CP_latchAttr
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         attr[iCmd2] = N25Qxxx.DQ0;
@@ -3431,18 +3415,18 @@ module CUIdecoder_TDP (cmdAllowed);
                 N25Qxxx.latchingMode = "3";
                 bitCounter = 7;
                 //iStartAddr = addrDimLatch4;
-            end    
+            end
             $display("[%0t ns] TDP Attribute Latched: %0h ", $time, attr);
-        end    
-     end        
+        end
+     end
     end //CP_latchAttr
 
     //latch attribute (dual)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="2" && N25Qxxx.protocol=="dual") begin : CP_latchAttrDual
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         attr[iCmd2] = N25Qxxx.DQ1;
@@ -3455,16 +3439,16 @@ module CUIdecoder_TDP (cmdAllowed);
             N25Qxxx.latchingMode = "3";
             //iStartAddr = addrDimLatch4+1;
             $display("[%0t ns] TDP Attribute Latched (dual) : %0h ", $time, attr);
-        end    
-     end        
+        end
+     end
     end //CP_latchAttrDual
 
     //latch attribute (quad)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="2" && N25Qxxx.protocol=="quad") begin : CP_latchAttrQuad
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         `ifdef HOLD_pin
@@ -3483,8 +3467,8 @@ module CUIdecoder_TDP (cmdAllowed);
             N25Qxxx.latchingMode = "3";
             //iStartAddr = addrDimLatch4+3;
             $display("[%0t ns] TDP Attribute Latched: %0h ", $time, attr);
-        end    
-     end        
+        end
+     end
     end //CP_latchAttrQuad
 
     always @(negedge N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && attr[7:6] == 'b00 && (N25Qxxx.protocol=="extended" && attr[5:4] == 'b00)) begin : TDPread_x1
@@ -3501,7 +3485,7 @@ module CUIdecoder_TDP (cmdAllowed);
     end //TDPread_x1
 
     always @(negedge N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && attr[7:6] == 'b00 && (N25Qxxx.protocol=="dual" ||
-                                  (N25Qxxx.protocol=="extended" && attr[5:4] == 'b01))) begin : TDPread_x2 
+                                  (N25Qxxx.protocol=="extended" && attr[5:4] == 'b01))) begin : TDPread_x2
         if(N25Qxxx.ck_count==0 || N25Qxxx.ck_count==4) begin
             dataOut=tdp_reg[tdp_counter];
             if(tdp_counter == 31) begin
@@ -3512,7 +3496,7 @@ module CUIdecoder_TDP (cmdAllowed);
         end
         #tCLQX
         N25Qxxx.dualQuad.bitOut = dataOut[ dataDim-1 - (2*(N25Qxxx.ck_count%4)) ]; //%=modulo operator
-        N25Qxxx.dualQuad.bitOut_extra = dataOut[ dataDim-2 - (2*(N25Qxxx.ck_count%4)) ]; 
+        N25Qxxx.dualQuad.bitOut_extra = dataOut[ dataDim-2 - (2*(N25Qxxx.ck_count%4)) ];
         ->N25Qxxx.dualQuad.sendToBus_dual;
     end //TDPread_x2
 
@@ -3527,13 +3511,13 @@ module CUIdecoder_TDP (cmdAllowed);
             end
         end
         `ifdef HOLD_pin
-        force N25Qxxx.intHOLD = 1;
+        // force N25Qxxx.intHOLD = 1;
         `endif
         #tCLQX
         N25Qxxx.dualQuad.bitOut3 = dataOut[ dataDim-1 - (4*(N25Qxxx.ck_count%2)) ]; //%=modulo operator
-        N25Qxxx.dualQuad.bitOut2 = dataOut[ dataDim-2 - (4*(N25Qxxx.ck_count%2)) ]; 
-        N25Qxxx.dualQuad.bitOut1 = dataOut[ dataDim-3 - (4*(N25Qxxx.ck_count%2)) ]; 
-        N25Qxxx.dualQuad.bitOut0 = dataOut[ dataDim-4 - (4*(N25Qxxx.ck_count%2)) ]; 
+        N25Qxxx.dualQuad.bitOut2 = dataOut[ dataDim-2 - (4*(N25Qxxx.ck_count%2)) ];
+        N25Qxxx.dualQuad.bitOut1 = dataOut[ dataDim-3 - (4*(N25Qxxx.ck_count%2)) ];
+        N25Qxxx.dualQuad.bitOut0 = dataOut[ dataDim-4 - (4*(N25Qxxx.ck_count%2)) ];
         ->N25Qxxx.dualQuad.sendToBus_quad;
     end //TDPread_x4
 
@@ -3545,9 +3529,9 @@ module CUIdecoder_TDP (cmdAllowed);
     //latch data pattern (extended)
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && attr[7:6] == 'b01 && (N25Qxxx.protocol=="extended" && attr[5:4] == 'b00)) begin : CP_latchData_x1
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
 
         byteHolder[bitCounter] = N25Qxxx.DQ0;
@@ -3560,15 +3544,15 @@ module CUIdecoder_TDP (cmdAllowed);
         bitCounter = bitCounter - 1;
 
         iData = iData + 1;
-     end        
+     end
     end //CP_latchData_x1
 
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && attr[7:6] == 'b01 && (N25Qxxx.protocol=="dual" ||
-                                  (N25Qxxx.protocol=="extended" && attr[5:4] == 'b01))) begin : CP_latchData_x2  
+                                  (N25Qxxx.protocol=="extended" && attr[5:4] == 'b01))) begin : CP_latchData_x2
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
         ->N25Qxxx.Debug.x10;
         byteHolder[bitCounter] = N25Qxxx.DQ1;
@@ -3580,18 +3564,18 @@ module CUIdecoder_TDP (cmdAllowed);
             tdp_counter = tdp_counter + 1;
             bitCounter = 7;
             //iStartAddr = addrDimLatch4+1;
-        end else    
+        end else
             bitCounter = bitCounter - 2;
-     end        
+     end
     end //CP_latchData_x2
 
     always @(N25Qxxx.C) if(N25Qxxx.logicOn && N25Qxxx.latchingMode=="3" && attr[7:6] == 'b01 && (N25Qxxx.protocol=="quad" ||
                                   (N25Qxxx.protocol=="extended" && attr[5:4] == 'b10))) begin : CP_latchData_x4
         N25Qxxx.quadMode = 1;
       `ifdef MEDITERANEO
-      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin 
+      if (((N25Qxxx.C==0) && (N25Qxxx.VolatileEnhReg.VECR[5] == 0) && (iCmd2 != 7)) || (N25Qxxx.C == 1)) begin
       `else
-      if (N25Qxxx.C==1) begin  
+      if (N25Qxxx.C==1) begin
       `endif
         `ifdef HOLD_pin
         byteHolder[bitCounter] = N25Qxxx.HOLD_DQ3;
@@ -3607,7 +3591,7 @@ module CUIdecoder_TDP (cmdAllowed);
             tdp_counter = tdp_counter + 1;
             bitCounter = 7;
             //iStartAddr = addrDimLatch4+1;
-        end else    
+        end else
             bitCounter = bitCounter - 4;
 
         end
@@ -3634,7 +3618,7 @@ module CUIdecoder_TDP (cmdAllowed);
         end
     end
 
-    always @(N25Qxxx.latchingMode or N25Qxxx.S) begin 
+    always @(N25Qxxx.latchingMode or N25Qxxx.S) begin
         if(N25Qxxx.latchingMode == 2 ||
            N25Qxxx.latchingMode == 3 )
         fork : disableTDP
@@ -3698,9 +3682,9 @@ endmodule //CUIdecoder_TDP
 
 module Memory(mem_file);
 
-    
 
-    `include "include/DevParam.h"
+
+    `include "DevParam.h"
 
 
     input [40*8:1] mem_file;
@@ -3733,54 +3717,54 @@ module Memory(mem_file);
     //  Init
     //-----------
 
-    initial begin 
+    initial begin
 
-        for (i=0; i<=memDim-1; i=i+1) 
+        for (i=0; i<=memDim-1; i=i+1)
             memory[i] = data_NP;
         #1;
-        
+
         // if ( `FILENAME_mem!="" && `FILENAME_mem!=" ") begin
         //     $readmemh(`FILENAME_mem, memory);
         //     $display("[%0t ns] ==INFO== Load memory content from file: \"%0s\".", $time, `FILENAME_mem);
-        // end    
-    
+        // end
+
         if ( mem_file!="" && mem_file!=" ") begin
           $readmemh(mem_file, memory);
           $display("[%0t ns] ==INFO== 1. Load memory content from file: \"%0s\".", $time, mem_file);
-        end    
+        end
     end
 
 
 
     // always @(N25Qxxx.Vcc_L2) if((N25Qxxx.Vcc_L2) && ( `FILENAME_mem!="" && `FILENAME_mem!=" ")) begin
     always @(N25Qxxx.Vcc_L2) if(N25Qxxx.Vcc_L2) begin
-         
+
          $readmemh(mem_file, memory);
          $display("[%0t ns] ==INFO== 2. Load memory content from file: \"%0s\".", $time, mem_file);
-                     
 
-   end      
+
+   end
 
 
     //-----------------------------------------
-    //  Task used in program & read operations  
+    //  Task used in program & read operations
     //-----------------------------------------
-    
+
     task refillMem;
         begin
-            for (i=0; i<=memDim-1; i=i+1) 
+            for (i=0; i<=memDim-1; i=i+1)
                 memory[i] = data_NP;
             #1;
             if ( mem_file!="" && mem_file!=" ") begin
               $readmemh(mem_file, memory);
               $display("[%0t ns] ==INFO== Load memory content from file: \"%0s\".", $time, mem_file);
-            end    
+            end
         end
     endtask //refillMem
-    
+
     // set start address & page index
     // (for program and read operations)
-    
+
     task setAddr;
 
     input [addrDim-1:0] addr;
@@ -3790,27 +3774,27 @@ module Memory(mem_file);
         memAddr = addr;
         pageStartAddr = {addr[addrDim-1:pageAddr_inf], zeroIndex};
         pageIndex = addr[colAddrDim-1:0];
-    
+
     end
-    
+
     endtask
 
 
 
-    
+
     // reset page with FF data
 
     task resetPage;
 
-    for (i=0; i<=pageDim-1; i=i+1) 
+    for (i=0; i<=pageDim-1; i=i+1)
         page[i] = data_NP;
 
-    endtask    
+    endtask
+
 
 
-    
 
-    // in program operations data latched 
+    // in program operations data latched
     // are written in page buffer
 
     task writeDataToPage;
@@ -3820,7 +3804,7 @@ module Memory(mem_file);
     begin
 
         page[pageIndex] = data;
-        pageIndex = pageIndex + 1; 
+        pageIndex = pageIndex + 1;
 
     end
 
@@ -3869,15 +3853,15 @@ module Memory(mem_file);
         end
             //aggiunta
         if (VolatileReg.VCR[1:0]!=2'd3) begin //implements the read data output wrap
-               
+
              case (VolatileReg.VCR[1:0])
-                    2'd0 : memAddr = {N25Qxxx.addr[addrDim-1: 4], memAddr[3:0]}; 
-                    2'd1 : memAddr = {N25Qxxx.addr[addrDim-1: 5], memAddr[4:0]}; 
+                    2'd0 : memAddr = {N25Qxxx.addr[addrDim-1: 4], memAddr[3:0]};
+                    2'd1 : memAddr = {N25Qxxx.addr[addrDim-1: 5], memAddr[4:0]};
                     2'd2 : memAddr = {N25Qxxx.addr[addrDim-1: 6], memAddr[5:0]};
              endcase
-                
-        end      
-            
+
+        end
+
 
     end
 
@@ -3892,8 +3876,8 @@ module Memory(mem_file);
 
 
     // page is written into the memory (old_data are over_written)
-    
-    task writePageToMemory; 
+
+    task writePageToMemory;
        reg value;
 
        for (i=0; i<=pageDim-1; i=i+1)begin
@@ -3908,8 +3892,8 @@ module Memory(mem_file);
 
 
     // pageMemory is loaded into the pageBuffer
-    
-    task loadPageBuffer; 
+
+    task loadPageBuffer;
 
     for (i=0; i<=pageDim-1; i=i+1)
       `ifdef Stack512Mb
@@ -3940,20 +3924,20 @@ module Memory(mem_file);
         mAddr = {sect, zeros};
         for(i=mAddr; i<=(mAddr+sectorSize-1); i=i+1) begin
           `ifdef Stack512Mb
-             //value= setMemory(i, data_NP); 
+             //value= setMemory(i, data_NP);
              memory[i] = data_NP;
           `else
              memory[i] = data_NP;
           `endif
         end
-    
+
     end
     endtask
 
 
 
-    `ifdef SubSect 
-    
+    `ifdef SubSect
+
      task eraseSubsector;
      input [addrDim-1:0] A;
      reg [subsecAddrDim-1:0] subsect;
@@ -3961,7 +3945,7 @@ module Memory(mem_file);
      reg [addrDim-1:0] mAddr;
      reg value;
      begin
-    
+
          subsect = f.sub(A);
          zeros = 'h0;
          mAddr = {subsect, zeros};
@@ -3973,14 +3957,14 @@ module Memory(mem_file);
              memory[i] = data_NP;
           `endif
          end
-    
+
      end
      endtask
 
     `endif
 
-    `ifdef MEDT_SubSect32K 
-    
+    `ifdef MEDT_SubSect32K
+
      task eraseSubsector32K;
      input [addrDim-1:0] A;
      reg [subsec32AddrDim-1:0] subsect;
@@ -3988,7 +3972,7 @@ module Memory(mem_file);
      reg [addrDim-1:0] mAddr;
      reg value;
      begin
-    
+
          subsect = f.sub32k(A);
          zeros = 'h0;
          mAddr = {subsect, zeros};
@@ -4000,14 +3984,14 @@ module Memory(mem_file);
              memory[i] = data_NP;
           `endif
          end
-    
+
      end
      endtask
 
     `endif
 
 
-   // `ifndef Stack512Mb 
+   // `ifndef Stack512Mb
     task eraseBulk;
      reg value;
       begin
@@ -4021,7 +4005,7 @@ module Memory(mem_file);
         end
       end
     endtask
-   // `endif 
+   // `endif
 
 
    // `ifdef Stack512Mb
@@ -4030,7 +4014,7 @@ module Memory(mem_file);
       begin
         for (i=0; i<=memDim-1; i=i+1) begin
           `ifdef Stack512Mb
-             //value = setMemory(i, data_NP); 
+             //value = setMemory(i, data_NP);
              memory[i] = data_NP; // etv May1
           `else
              memory[i] = data_NP;
@@ -4048,11 +4032,11 @@ module Memory(mem_file);
     reg [addrDim-1:0] mAddr;
     reg value;
       begin
-        `ifndef Stack512Mb 
-      
+        `ifndef Stack512Mb
+
           page = f.pag(A);
           zeros = 'h0;
-          mAddr = {page, zeros}; 
+          mAddr = {page, zeros};
           for(i=mAddr; i<=(mAddr+pageDim-1); i=i+1) begin
           `ifdef Stack512Mb
              //value = setMemory(i, data_NP);
@@ -4061,8 +4045,8 @@ module Memory(mem_file);
              memory[i] = data_NP;
           `endif
           end
-      
-        `endif 
+
+        `endif
       end
     endtask
 
@@ -4071,7 +4055,7 @@ module Memory(mem_file);
 
 
 
-    
+
 
 endmodule
 
@@ -4097,24 +4081,24 @@ endmodule
 -----------------------------------------------------------
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 
-`timescale 1ns / 1ps 
+`timescale 1ns / 1ps
 
 module UtilFunctions;
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     integer i;
 
-    
+
     //----------------------------------
-    // Utility functions for addresses 
+    // Utility functions for addresses
     //----------------------------------
 
 
     function [sectorAddrDim-1:0] sec;
     input [addrDim-1:0] A;
         sec = A[sectorAddr_sup:sectorAddr_inf];
-    endfunction   
+    endfunction
 
     `ifdef SubSect
         function [subsecAddrDim-1:0] sub;
@@ -4124,7 +4108,7 @@ module UtilFunctions;
                 sub = A[subsecAddr_sup:subsecAddr_inf];
             `else
                 sub = A[subsecAddr_sup:subsecAddr_inf];
-            `endif    
+            `endif
         endfunction
     `endif
 
@@ -4132,7 +4116,7 @@ module UtilFunctions;
         function [subsec32AddrDim-1:0] sub32k;
         input [addrDim-1:0] A;
             sub32k = A[subsec32Addr_sup:subsec32Addr_inf];
-        endfunction    
+        endfunction
     `endif
 
     function [pageAddrDim-1:0] pag;
@@ -4144,13 +4128,13 @@ module UtilFunctions;
     input [addrDim-1:0] A;
         col = A[colAddr_sup:0];
     endfunction
-    
-    
-    
-    
-    
+
+
+
+
+
     //----------------------------------
-    // Console messages 
+    // Console messages
     //----------------------------------
 
     task clock_error;
@@ -4160,7 +4144,7 @@ module UtilFunctions;
         `ifdef MEDITERANEO
             if(N25Qxxx.cmdRecName=="Write NV Configuration Reg") begin
                 NonVolatileReg.NVCR=prog.NVCR_temp;
-            end    
+            end
         `endif
         end
     endtask
@@ -4177,12 +4161,12 @@ module UtilFunctions;
 
 
     task out_info;
-    
+
         input [addrDim-1:0] A;
         input [dataDim-1:0] D;
 
-        if(N25Qxxx.die_active == 1) begin 
-          if (stat.enable_SR_read)          
+        if(N25Qxxx.die_active == 1) begin
+          if (stat.enable_SR_read)
          $display("  [%0t ns] Data are going to be output: %b. [Read Status Register] %d %d",
                   $time, D, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
          else if (NonVolatileReg.enable_NVCR_read)
@@ -4191,15 +4175,15 @@ module UtilFunctions;
          else if (VolatileReg.enable_VCR_read)
          $display("  [%0t ns] Data are going to be output: %b. [Read Volatile Register] %d %d",
                   $time, D, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-                  
+
          else if (VolatileEnhReg.enable_VECR_read)
          $display("  [%0t ns] Data are going to be output: %b. [Read Enhanced Volatile Register] %d %d",
                   $time, D, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-         `ifdef byte_4         
+         `ifdef byte_4
          else if (ExtAddReg.enable_EAR_read)
          $display("  [%0t ns] Data are going to be output: %b. [Extended Address Register] %d %d",
                   $time, D, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-         `endif         
+         `endif
          else if (flag.enable_FSR_read)
          $display("  [%0t ns] Data are going to be output: %b. [Read Flag Status Register] %d %d",
                   $time, D, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
@@ -4211,7 +4195,7 @@ module UtilFunctions;
           else if (PMReg.enable_PMR_read)
           $display("  [%0t ps] Data are going to be output: %h. [Read Protection Management Register] %d %d",
                     $time, D, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-        
+
           `ifdef MEDT_PPB
           else if (ppb.enable_PPBReg_read)
           $display("  [%0t ps] Data are going to be output: %h. [Read PPB Register of sector %0d] %d %d",
@@ -4225,22 +4209,22 @@ module UtilFunctions;
 
           else if (read.enable_ID)
             $display("  [%0t ns] Data are going to be output: %h. [Read ID, byte %0d] %d %d", $time, D, A, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-        
+
           else if (read.enable_OTP) begin
               if (A!=OTP_dim-1)
                   $display("  [%0t ns] Data are going to be output: %h. [Read OTP memory, column %0d] %d %d", $time, D, A, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-              else  
+              else
                   $display("  [%0t ns] Data are going to be output: %b. [Read OTP memory, column %0d (control byte)] %d %d", $time, D, A, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
           end
 
         `ifdef bottom
-        else        
+        else
         if (sec(A)<=bootSec_num-1) begin
-          
+
           if (read.enable || read.enable_fast)
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, subsector %0d of sector %0d)] %d %d",
-                  $time, D, A, col(A), pag(A), sub(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2); 
-        
+                  $time, D, A, col(A), pag(A), sub(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
+
           else if (read.enable_dual)
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, subsector %0d  sector %0d)] %d %d",
                     $time, D, A, col(A), pag(A), sub(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
@@ -4249,25 +4233,25 @@ module UtilFunctions;
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, subsector %0d sector %0d)] %d %d",
                     $time, D, A, col(A), pag(A),  sub(A),sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
         end
-        
-        
+
+
         else if (read.enable || read.enable_fast)
         $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, sector %0d)] %d %d",
-                  $time, D, A, col(A), pag(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2); 
-        
+                  $time, D, A, col(A), pag(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
+
         else if (read.enable_dual)
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d,sector %0d)] %d %d",
                     $time, D, A, col(A), pag(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-                  
+
         else if (read.enable_quad)
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, sector %0d)] %d %d",
                     $time, D, A, col(A), pag(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-    `else          
-        else        
+    `else
+        else
           if (read.enable || read.enable_fast)
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, subsector %0d of sector %0d)] %d %d",
-                  $time, D, A, col(A), pag(A), sub(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2); 
-        
+                  $time, D, A, col(A), pag(A), sub(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
+
           else if (read.enable_dual)
           $display("  [%0t ns] Data are going to be output: %h. [Read Memory. Address %h (byte %0d of page %0d, subsector %0d  sector %0d)] %d %d",
                     $time, D, A, col(A), pag(A), sub(A), sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
@@ -4277,8 +4261,8 @@ module UtilFunctions;
                     $time, D, A, col(A), pag(A),  sub(A),sec(A), N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
          else if (read.enable_rsfdp)
          $display("  [%0t ns] Data are going to be output: %h. [Read Serial Flash Discovery Parameter. Address %h] %d %d", $time, D, A, N25Qxxx.rdeasystacken, N25Qxxx.rdeasystacken2);
-        
-        `endif 
+
+        `endif
     end //N25Qxxx.die_active
     endtask
 
@@ -4289,18 +4273,18 @@ module UtilFunctions;
     //----------------------------------------------------
     // Special tasks used for testing and debug the model
     //----------------------------------------------------
-    
+
 
     //
     // erase the whole memory, and resets pageBuffer and cacheBuffer
     //
-    
+
     task fullErase;
     begin
-    
-        for (i=0; i<=memDim-1; i=i+1) 
-            mem.memory[i] = data_NP; 
-        
+
+        for (i=0; i<=memDim-1; i=i+1)
+            mem.memory[i] = data_NP;
+
         $display("[%0t ns] ==INFO== The whole memory has been erased.", $time);
 
     end
@@ -4312,7 +4296,7 @@ module UtilFunctions;
     //
     // unlock all sectors of the memory
     //
-    
+
     task unlockAll;
     begin
 
@@ -4341,13 +4325,13 @@ module UtilFunctions;
     input [40*8:1] memory_file;
 
     begin
-    
-        for (i=0; i<=memDim-1; i=i+1) 
+
+        for (i=0; i<=memDim-1; i=i+1)
             mem.memory[i] = data_NP;
-        
+
         $readmemh(memory_file, mem.memory);
         $display("[%0t ns] ==INFO== Load memory content from file: \"%0s\".", $time, `FILENAME_mem);
-    
+
     end
     endtask
 
@@ -4382,24 +4366,24 @@ endmodule
 
 module Program;
 
-    
 
-    `include "include/DevParam.h"
 
-    
+    `include "DevParam.h"
+
+
+
 
-    
     event errorCheck, error, noError, noError2;
-    
+
     reg [40*8:1] operation; //get the value of the command currently decoded by CUI decoders
     reg [40*8:1] oldOperation; // tiene traccia di quale operazione e' stata sospesa
     reg [40*8:1] holdOperation;// tiene traccia nel caso di suspend innestati della prima operazione sospesa
 
-    time delay,delay_resume,startTime,latencyTime;                 
-                                 
+    time delay,delay_resume,startTime,latencyTime;
+
 //variabili aggiunte per gestire il prog/erase suspend
     reg [pageAddrDim-1:0] page_susp; //pagina sospesa
- 
+
 
     reg [sectorAddrDim-1:0] sec_susp;
     reg [subsecAddrDim-1:0] subsec_susp;
@@ -4427,9 +4411,9 @@ module Program;
 
 
 
-    always @N25Qxxx.seqRecognized 
+    always @N25Qxxx.seqRecognized
     if((N25Qxxx.cmdRecName=="Page Program" || N25Qxxx.cmdRecName=="Dual Program" || N25Qxxx.cmdRecName=="Quad Program" ||
-       N25Qxxx.cmdRecName=="Dual Extended Program" ||  N25Qxxx.cmdRecName=="Quad Extended Program" || 
+       N25Qxxx.cmdRecName=="Dual Extended Program" ||  N25Qxxx.cmdRecName=="Quad Extended Program" ||
        N25Qxxx.cmdRecName=="Dual Command Page Program" ||
        N25Qxxx.cmdRecName=="Quad Command Page Program" ) && (N25Qxxx.die_active == 1)) begin : page_program_ops
 
@@ -4437,35 +4421,35 @@ module Program;
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable page_program_ops;
-                end    
+                end
             `endif
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - %s aborted due to Prog/Erase Suspend",$time,N25Qxxx.cmdRecName);
             disable page_program_ops;
-          end  
+          end
 
        if(flag.FSR[4]) begin
-                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction. Program Status bit is high!",$time); 
+                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction. Program Status bit is high!",$time);
                 disable page_program_ops;
        end else if(operation=="Program Erase Suspend" && prog_susp) begin
-                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction after a program suspend",$time); 
+                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction after a program suspend",$time);
                 disable page_program_ops;
-                
-       `ifdef SubSect    
+
+       `ifdef SubSect
        end else if(operation=="Program Erase Suspend" && subsec_erase_susp) begin
-           
-                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction after a subsector erase suspend",$time); 
+
+                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction after a subsector erase suspend",$time);
                 disable page_program_ops;
        `endif
        end else if(operation=="Program Erase Suspend" && sec_erase_susp && sec_susp==f.sec(N25Qxxx.addr)) begin
-           
-                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction in the sector whose erase cycle is suspend",$time); 
+
+                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction in the sector whose erase cycle is suspend",$time);
                 flag.FSR[4]=1;
                 disable page_program_ops;
 
        end else
 
-       
+
     //fork : program_ops
 
            begin
@@ -4475,7 +4459,7 @@ module Program;
             destAddr = N25Qxxx.addr;
             mem.setAddr(destAddr);
             if(Suspended == 0) destAddrSusp1 = destAddr;
-            
+
             if(operation=="Page Program")
                 N25Qxxx.latchingMode="D";
             else if(operation=="Dual Program" || operation=="Dual Extended Program" || operation=="Dual Command Page Program") begin
@@ -4493,26 +4477,26 @@ module Program;
                 `endif
 
             end
-  
-            
+
+
             writePage_en = 1;
 
-          end   
-        
+          end
+
     fork : program_ops
-                                                                                                                                                                             
+
 
         begin : exe
-            
+
            @(posedge N25Qxxx.S);
-            
+
             disable reset;
             writePage_en=0;
             N25Qxxx.latchingMode="N";
             N25Qxxx.busy=1;
             startTime = $time;
             $display("  [%0t ns] Command execution begins: %0s.", $time, operation);
-            
+
                 delay=program_delay;
 
                 -> errorCheck;
@@ -4522,17 +4506,17 @@ module Program;
                    mem.programPageToMemory;
                     $display("  [%0t ns] Command execution completed: %0s.", $time, operation);
                 end
-           
-        end 
+
+        end
 
 
         begin : reset
-        
+
           @N25Qxxx.resetEvent;
             writePage_en=0;
             operation = "None";
-            disable page_program_ops;    
-        
+            disable page_program_ops;
+
         end
 
     join
@@ -4544,7 +4528,7 @@ end //page_program_ops
     always @N25Qxxx.dataLatched if(writePage_en) begin
 
         mem.writeDataToPage(N25Qxxx.data);
-    
+
     end
 
 
@@ -4573,7 +4557,7 @@ end //page_program_ops
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable write_SR_ops;
-                end    
+                end
 
             `ifdef MEDITERANEO
                 if(`SRWD==1 && N25Qxxx.W_int===0) begin
@@ -4587,16 +4571,16 @@ end //page_program_ops
                 end
             `endif
                 if(prog.prog_susp==1) begin
-                    $display(" [%0t ps] **WARNING** Write SR not allowed while in suspend state.",$time); 
+                    $display(" [%0t ps] **WARNING** Write SR not allowed while in suspend state.",$time);
                     -> stat.WEL_reset;
                     disable write_SR_ops;
                 end
-        
+
         @(posedge N25Qxxx.S) begin: WRSR_ops
             `ifdef MEDITERANEO
                 if(N25Qxxx.dataLatchedr==0) begin
                     disable write_SR_ops;
-                end    
+                end
             `endif
             -> stat.WEL_reset;
             operation=N25Qxxx.cmdRecName;
@@ -4609,31 +4593,31 @@ end //page_program_ops
             $display("  [%0t ns] Command execution begins: Write SR.",$time);
             delay=write_SR_delay;
             `ifdef MEDITERANEO
-                `SRWD = SR_data[7];  
-                `BP3  = SR_data[6];  
-                `TB   = SR_data[5]; 
-                `BP2  = SR_data[4]; 
-                `BP1  = SR_data[3]; 
-                `BP0  = SR_data[2]; 
+                `SRWD = SR_data[7];
+                `BP3  = SR_data[6];
+                `TB   = SR_data[5];
+                `BP2  = SR_data[4];
+                `BP1  = SR_data[3];
+                `BP0  = SR_data[2];
             `endif
             -> errorCheck;
 
             @(noError) begin
-                
-                `SRWD = SR_data[7];  
-                `BP3  = SR_data[6];  
-                `TB   = SR_data[5]; 
-                `BP2  = SR_data[4]; 
-                `BP1  = SR_data[3]; 
-                `BP0  = SR_data[2]; 
- 
+
+                `SRWD = SR_data[7];
+                `BP3  = SR_data[6];
+                `TB   = SR_data[5];
+                `BP2  = SR_data[4];
+                `BP1  = SR_data[3];
+                `BP0  = SR_data[2];
+
                #0 $display("  [%0t ns] Command execution completed: Write SR. SR=%h, (SRWD,BP3,TB,BP2,BP1,BP0)=%b",
                            $time, stat.SR, {`SRWD,`BP3,`TB,`BP2,`BP1,`BP0} );
-            
+
             end
-                
+
         end
-    
+
     end
 
     //----------------------------------------
@@ -4651,13 +4635,13 @@ end //page_program_ops
        else if (N25Qxxx.protocol=="quad") N25Qxxx.latchingMode="Q";
        else
               N25Qxxx.latchingMode="D";
-        
+
         @(posedge N25Qxxx.S) begin
             `ifdef MEDITERANEO
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable write_VCR_ops;
-                end    
+                end
             `endif
             operation=N25Qxxx.cmdRecName;
             VCR_data=N25Qxxx.data;
@@ -4669,19 +4653,19 @@ end //page_program_ops
             -> errorCheck;
 
             @(noError) begin
-                
+
                 // datasheet specifies that VCR.2 is reserved
                 VolatileReg.VCR[7:3]=VCR_data[7:3];
                 VolatileReg.VCR[1:0]=VCR_data[1:0];
 
-                $display("  [%0t ns] Command execution completed: Write Volatile Configuration Reg. VCR=%h", 
+                $display("  [%0t ns] Command execution completed: Write Volatile Configuration Reg. VCR=%h",
                            $time, VolatileReg.VCR);
-                dummySetByVCR = 1;       
-            
+                dummySetByVCR = 1;
+
             end
-                
+
         end
-    
+
     end
 
 
@@ -4701,16 +4685,16 @@ end //page_program_ops
        else if (N25Qxxx.protocol=="quad") N25Qxxx.latchingMode="Q";
        else
               N25Qxxx.latchingMode="D";
-        
+
         @(posedge N25Qxxx.S) begin : WRVECR_ops
             `ifdef MEDITERANEO
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable WRVECR_ops;
-                end    
+                end
                 if(N25Qxxx.dataLatchedr==0)begin
                     disable write_VECR_ops;
-                end    
+                end
             `endif
             operation=N25Qxxx.cmdRecName;
             VECR_data=N25Qxxx.data;
@@ -4725,16 +4709,16 @@ end //page_program_ops
             -> errorCheck;
 
             @(noError) begin
-                
+
                 VolatileEnhReg.VECR=VECR_data;
-                $display("  [%0t ns] Command execution completed: Write Volatile Enhanced Configuration Reg. VECR=%h", 
+                $display("  [%0t ns] Command execution completed: Write Volatile Enhanced Configuration Reg. VECR=%h",
                            $time, VolatileEnhReg.VECR);
-                dummySetByVECR = 1;       
-            
+                dummySetByVECR = 1;
+
             end
-            N25Qxxx.dataLatchedr = 0;    
+            N25Qxxx.dataLatchedr = 0;
         end
-    
+
     end
 
     //---------------------------------------------
@@ -4743,7 +4727,7 @@ end //page_program_ops
 
 
     reg [dataDim-1:0] NVCR_LSByte;
-    
+
     reg [dataDim-1:0] NVCR_MSByte;
 
     reg LSByte;
@@ -4753,7 +4737,7 @@ end //page_program_ops
 
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Write NV Configuration Reg") begin : write_NVCR_ops
 
-        if (N25Qxxx.protocol=="dual") begin 
+        if (N25Qxxx.protocol=="dual") begin
             N25Qxxx.latchingMode="F";
             N25Qxxx.ck_count = 0;
        end else if (N25Qxxx.protocol=="quad") N25Qxxx.latchingMode="Q";
@@ -4765,16 +4749,16 @@ end //page_program_ops
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable write_NVCR_ops;
-                end    
+                end
             `endif
-        // added the check to abort writing in NVCR register if locked by PMR --  
+        // added the check to abort writing in NVCR register if locked by PMR --
          if (PMReg.PMR[7] == 0) begin
-                $display(" [%0t ps] **WARNING** Cant write to NVCR reg.PMR bit 7 set is 0.Register locked!",$time); 
+                $display(" [%0t ps] **WARNING** Cant write to NVCR reg.PMR bit 7 set is 0.Register locked!",$time);
                 flag.FSR[1] = 1;
                 disable NVCR_ops;
-                 
+
         end else if (prog.prog_susp==1) begin
-                $display(" [%0t ps] **WARNING** Write NVCR not allowed while in suspend state.",$time); 
+                $display(" [%0t ps] **WARNING** Write NVCR not allowed while in suspend state.",$time);
                 disable write_NVCR_ops;
         end
         else begin
@@ -4786,12 +4770,12 @@ end //page_program_ops
                   N25Qxxx.dataLatchedr=0;
                   $display(" [%0t ns] Write NV Configuration Reg aborted!", $time);
                   disable write_NVCR_ops;
-              end    
+              end
               operation=N25Qxxx.cmdRecName;
               NVCR_LSByte=N25Qxxx.LSdata;
               NVCR_MSByte=N25Qxxx.data;
               `ifdef MEDITERANEO
-                NVCR_LSByte[5] = N25Qxxx.LSdata[5]; 
+                NVCR_LSByte[5] = N25Qxxx.LSdata[5];
               `else
                 NVCR_LSByte[5] = 0; // Reserved for DTR
               `endif
@@ -4805,28 +4789,28 @@ end //page_program_ops
               delay=write_NVCR_delay;
               -> errorCheck;
                   NVCR_temp = NonVolatileReg.NVCR;
-                  NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte}; 
+                  NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte};
                   `ifdef start_in_byte_4
-                    NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte[dataDim-1:1],1'b0}; 
+                    NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte[dataDim-1:1],1'b0};
                   `endif
 
               @(noError) begin
-                  
-//                  NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte}; 
+
+//                  NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte};
 //                  `ifdef start_in_byte_4
-//                    NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte[dataDim-1:1],1'b0}; 
+//                    NonVolatileReg.NVCR={NVCR_MSByte,NVCR_LSByte[dataDim-1:1],1'b0};
 //                  `endif
-                  
+
                   $display("  [%0t ns] Command execution completed: Write Non Volatile Configuration Register. NVCR=%h (%b)",
                              $time, NonVolatileReg.NVCR,NonVolatileReg.NVCR);
-              
+
                 N25Qxxx.dataLatchedr=0;
                 bitCounter=0;
               end
-                  
+
           end
         end
-    
+
     end
 
     `ifdef MEDT_ADVANCED_SECTOR
@@ -4836,7 +4820,7 @@ end //page_program_ops
 
 
     reg [dataDim-1:0] ASP_LSByte = 'hFF;
-    
+
     reg [dataDim-1:0] ASP_MSByte = 'hFF;
 
 //    reg LSByte;
@@ -4851,17 +4835,17 @@ end //page_program_ops
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - ASP Write aborted due to Prog/Erase Suspend",$time);
             disable write_ASP_ops;
-          end  
+          end
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable write_ASP_ops;
-                end    
+                end
         LSByte=1;
          if (ASP_Reg.ASP[2] == 0 ) begin
-                $display(" [%0t ps] **WARNING** Cant write to ASP register anymore. Write once only.!",$time); 
+                $display(" [%0t ps] **WARNING** Cant write to ASP register anymore. Write once only.!",$time);
                 //flag.FSR[1] = 1;
                 //disable write_ASP_ops;
-        end     
+        end
          begin
           @(posedge N25Qxxx.S) begin: ASP_ops
               operation=N25Qxxx.cmdRecName;
@@ -4875,37 +4859,37 @@ end //page_program_ops
               //delay=write_ASP_delay;
               delay=write_ASP_delay;
               if (ASP_Reg.ASP[1] == 1 ) begin
-                  ASP_Reg.ASP={ASP_MSByte,ASP_LSByte}; 
+                  ASP_Reg.ASP={ASP_MSByte,ASP_LSByte};
                   //plb.PLB[0] = 0;
                   `ifdef start_in_byte_4
-                    ASP_Reg.ASP={ASP_MSByte,ASP_LSByte[dataDim-1:1],1'b0}; 
+                    ASP_Reg.ASP={ASP_MSByte,ASP_LSByte[dataDim-1:1],1'b0};
                   `endif
               end else begin
-                $display(" [%0t ps] **WARNING** Cant write to ASP[1]  anymore. Write once only.!",$time); 
+                $display(" [%0t ps] **WARNING** Cant write to ASP[1]  anymore. Write once only.!",$time);
               end
               -> errorCheck;
 
               @(noError) begin
-                  
-                  //ASP_Reg.ASP={ASP_MSByte,ASP_LSByte}; 
+
+                  //ASP_Reg.ASP={ASP_MSByte,ASP_LSByte};
                   ////plb.PLB[0] = 0;
                   //`ifdef start_in_byte_4
-                  //  ASP_Reg.ASP={ASP_MSByte,ASP_LSByte[dataDim-1:1],1'b0}; 
+                  //  ASP_Reg.ASP={ASP_MSByte,ASP_LSByte[dataDim-1:1],1'b0};
                   //`endif
-                  
+
                   $display("  [%0t ns] Command execution completed: Write ASP Register. ASP=%h (%b)",
                              $time, ASP_Reg.ASP,ASP_Reg.ASP);
-              
+
               end
-                  
+
           end
         end
-    
+
     end
 `endif // MEDT_ADVANCED_SECTOR
-   
+
          always  @(posedge N25Qxxx.Vcc_L3) begin
-            if (N25Qxxx.cmdRecName == "Write NV Configuration Reg" && N25Qxxx.busy == 1) 
+            if (N25Qxxx.cmdRecName == "Write NV Configuration Reg" && N25Qxxx.busy == 1)
                 begin
                     N25Qxxx.rescue_seq_flag = 1;
                     $display("[%0t ps] **WARNING** Power Loss during WRNVCR detected. ", $time);
@@ -4913,12 +4897,12 @@ end //page_program_ops
             //else
             //    N25Qxxx.rescue_seq_flag = 0;
          end
-    
-    
+
+
 // write protection management register
 
     reg [dataDim-1:0] PMR_Byte;
-    
+
 
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Write Protection Management Reg") begin : write_PMR_ops
 
@@ -4930,23 +4914,23 @@ end //page_program_ops
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - ASP Write aborted due to Prog/Erase Suspend",$time);
             disable write_PMR_ops;
-          end  
+          end
              $display("[%0t ps] WEL.%b",$time,`WEL);
              if(`WEL == 0) begin
                 N25Qxxx.f.WEL_error;
                 disable write_PMR_ops;
-             end   
+             end
 
         if (PMReg.PMR[2] == 0) begin
-          //added    
-                $display(" [%0t ps] **WARNING** Cant write to PMR reg.PMR bit 2 set is 0.Register locked!",$time); 
+          //added
+                $display(" [%0t ps] **WARNING** Cant write to PMR reg.PMR bit 2 set is 0.Register locked!",$time);
 	         flag.FSR[1] = 1;
 	         flag.FSR[4] = 1;
                 disable pmr_ops;
 
         end else begin
 
-        
+
         @(posedge N25Qxxx.S) begin : pmr_ops
          //   -> stat.WEL_reset;
             operation=N25Qxxx.cmdRecName;
@@ -4960,13 +4944,13 @@ end //page_program_ops
             -> errorCheck;
 
             @(noError) begin
-                
-                PMReg.PMR=PMR_Byte; 
+
+                PMReg.PMR=PMR_Byte;
 
                 if(PMReg.PMR[3]==0) begin
                     OTP.mem[64][0]=0;
                 end
-                
+
                 $display("  [%0t ps] Command execution completed: Write PMR Configuration Register. PMR=%h (%b)",
                            $time, PMReg.PMR,PMReg.PMR);
             end
@@ -4978,7 +4962,7 @@ end //page_program_ops
 // write PPB Lock Bit register
 
     reg [dataDim-1:0] PLB_Byte;
-    
+
 
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="PPB Lock Bit Write") begin : write_PLB_ops
 
@@ -4988,14 +4972,14 @@ end //page_program_ops
               N25Qxxx.latchingMode="D";
 
         if (plb.PLB[0] == 0) begin
-          //added    
-                $display(" [%0t ps] **WARNING** Can't write to PLB reg.PLB bit set to 0. Register locked!",$time); 
+          //added
+                $display(" [%0t ps] **WARNING** Can't write to PLB reg.PLB bit set to 0. Register locked!",$time);
                 `WEL = 0;
                 disable write_PLB_ops;
 
         end else begin
 
-        
+
         @(posedge N25Qxxx.S) begin : plb_ops
          //   -> stat.WEL_reset;
              $display("[%0t ps] WEL.%b",$time,`WEL);
@@ -5006,7 +4990,7 @@ end //page_program_ops
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - PPB Lock Bit Write aborted due to Prog/Erase Suspend",$time);
             disable write_PLB_ops;
-          end  
+          end
             operation=N25Qxxx.cmdRecName;
             PLB_Byte=N25Qxxx.data;
             N25Qxxx.latchingMode="N";
@@ -5017,11 +5001,11 @@ end //page_program_ops
             -> errorCheck;
 
             @(noError) begin
-                
-                //plb.PLB=PLB_Byte; 
+
+                //plb.PLB=PLB_Byte;
                 plb.PLB[7:1]='h0;
                 plb.PLB[0]='h0;
-                
+
                 $display("  [%0t ps] Command execution completed: PPB Lock Bit Write. PLB=%h (%b)",
                            $time, plb.PLB,plb.PLB);
             end
@@ -5034,7 +5018,7 @@ end //page_program_ops
 
     reg [dataDim-1:0] PASSWRD_Byte;
     reg writePass_en = 0;
-    
+
 
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Password Write") begin : write_PASS_ops
         PSWORD_Reg.PSWORD_location = 'h0;
@@ -5045,13 +5029,13 @@ end //page_program_ops
               N25Qxxx.latchingMode="D";
 
         if (ASP_Reg.ASP[2:1] == 'b01) begin
-          //added    
-                $display(" [%0t ps] **WARNING** Cant write to Password reg. Password Mode is already enabled!",$time); 
+          //added
+                $display(" [%0t ps] **WARNING** Cant write to Password reg. Password Mode is already enabled!",$time);
                 disable write_PASS_ops;
 
         end else if (ASP_Reg.ASP[2:1] == 'b10) begin
 
-                $display(" [%0t ps] **WARNING** Cant write to Password reg. Persistent Protect Mode Lock Bit enabled!",$time); 
+                $display(" [%0t ps] **WARNING** Cant write to Password reg. Persistent Protect Mode Lock Bit enabled!",$time);
                 disable write_PASS_ops;
 
             end else begin
@@ -5059,8 +5043,8 @@ end //page_program_ops
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - Password Write aborted due to Prog/Erase Suspend",$time);
             disable write_PASS_ops;
-          end  
-        
+          end
+
         @(posedge N25Qxxx.S) begin : passwrd_ops
          //   -> stat.WEL_reset;
             writePass_en=0;
@@ -5079,23 +5063,23 @@ end //page_program_ops
             -> errorCheck;
 
             @(noError) begin
-                
-                PSWORD_Reg.PSWORD=PLB_Byte; 
-                PSWORD_Reg.programPassToRegister; 
+
+                PSWORD_Reg.PSWORD=PLB_Byte;
+                PSWORD_Reg.programPassToRegister;
                 $display("  [%0t ps] Command execution completed: Password Write. PassWord=%h (%b)",
                            $time, PSWORD_Reg.PSWORD,PSWORD_Reg.PSWORD);
             end
         end
       end
     end
-    
+
     always @N25Qxxx.dataLatched if(writePass_en) begin
         PSWORD_Reg.writeDataToPasswordBuffer(N25Qxxx.data);
-    end    
+    end
 
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Password Unlock") begin : write_PASSUNLOCK_ops
                 if(prog.prog_susp==1) begin
-                    $display(" [%0t ps] **WARNING** Password Unlock not allowed while in suspend state.",$time); 
+                    $display(" [%0t ps] **WARNING** Password Unlock not allowed while in suspend state.",$time);
                     disable write_PASSUNLOCK_ops;
                 end
         PSWORD_Reg.PSWORD_location = 'h0;
@@ -5106,13 +5090,13 @@ end //page_program_ops
               N25Qxxx.latchingMode="D";
 
         if (ASP_Reg.ASP[2] == 1) begin
-          //added    
-                $display(" [%0t ps] **WARNING** Not in Password Protect Mode.",$time); 
+          //added
+                $display(" [%0t ps] **WARNING** Not in Password Protect Mode.",$time);
                 disable passwrdUnlock_ops;
 
         end else begin
 
-        
+
         @(posedge N25Qxxx.S) begin : passwrdUnlock_ops
          //   -> stat.WEL_reset;
             writePass_en=0;
@@ -5129,12 +5113,12 @@ end //page_program_ops
             -> errorCheck;
 
             @(noError) begin
-                
+
               if(PSWORD_Reg.IsPasswordOK(1)) begin
                 $display("  [%0t ps] Command execution completed: Password Unlock Succeeded. PassWord=%h (%b)",
                            $time, PSWORD_Reg.PSWORD,PSWORD_Reg.PSWORD);
-                           plb.PLB[0] = 1; 
-                   end else begin        
+                           plb.PLB[0] = 1;
+                   end else begin
                 $display("  [%0t ps] Command execution completed: Password Unlock FAILED!. PassWord=%h (%b)",
                            $time, PSWORD_Reg.PSWORD,PSWORD_Reg.PSWORD);
                    end
@@ -5160,7 +5144,7 @@ end //page_program_ops
        else if (N25Qxxx.protocol=="quad") N25Qxxx.latchingMode="Q";
        else
               N25Qxxx.latchingMode="D";
-        
+
         @(posedge N25Qxxx.S) begin
             //`ifndef Feature_8
                 $display("[%0t ps] WEL.%b",$time,`WEL);
@@ -5170,7 +5154,7 @@ end //page_program_ops
                 end
                 if(N25Qxxx.dataLatchedr==0) begin
                     disable write_EAR_ops;
-                end    
+                end
             //`endif
             operation=N25Qxxx.cmdRecName;
             WEAR_data=N25Qxxx.data;
@@ -5184,9 +5168,9 @@ end //page_program_ops
             @(noError) begin
 
               if(addrDim > 24) begin
-                 
+
                 ExtAddReg.EAR[addrDim - 25 :0] =WEAR_data[addrDim - 25 :0];
-                $display("  [%0t ns] Command execution completed: Write Extended Address Register. EAR=%h", 
+                $display("  [%0t ns] Command execution completed: Write Extended Address Register. EAR=%h",
                            $time, ExtAddReg.EAR);
                          if(ExtAddReg.EAR[EARvalidDim-1:0]==0) $display("[%0t ns] ==INFO== Bottom 128M selected",$time);
                          else $display("[%0t ns] ==INFO== Top 128M selected",$time);
@@ -5194,9 +5178,9 @@ end //page_program_ops
               end
               N25Qxxx.dataLatchedr=0;
             end
-                
+
         end
-    
+
     end
 
 
@@ -5206,45 +5190,45 @@ end //page_program_ops
     // Erase
     //--------------
 
-    always @N25Qxxx.seqRecognized 
-    
+    always @N25Qxxx.seqRecognized
+
     if ((N25Qxxx.cmdRecName==="Sector Erase" || N25Qxxx.cmdRecName==="Subsector Erase" || N25Qxxx.cmdRecName==="Subsector Erase 32K" ||
         N25Qxxx.cmdRecName==="Bulk Erase" || N25Qxxx.cmdRecName==="Die Erase") && (N25Qxxx.die_active == 1))begin : erase_operations
-    
+
             `ifdef MEDITERANEO
                 if(`WEL==0) begin
                     N25Qxxx.f.WEL_error;
                     disable erase_operations;
-                end    
+                end
             `endif
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - %s aborted due to Prog/Erase Suspend",$time,N25Qxxx.cmdRecName);
             disable erase_operations;
-          end  
+          end
         if(flag.FSR[5]) begin
-                $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction. Erase Status bit is high!",$time); 
+                $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction. Erase Status bit is high!",$time);
                 disable erase_operations;
-                
+
         end else if(operation=="Program Erase Suspend" && prog_susp=='b1) begin
-           
-                 $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction after a program suspend",$time); 
+
+                 $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction after a program suspend",$time);
                  disable erase_operations;
 
         end else  if(operation=="Program Erase Suspend" && sec_erase_susp=='b1) begin
-        
-                 $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction after a sector erase suspend",$time); 
+
+                 $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction after a sector erase suspend",$time);
                  disable erase_operations;
         `ifdef SubSect
         end else  if(operation=="Program Erase Suspend" && subsec_erase_susp=='b1) begin
-                 
-                 $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction after a subsector erase suspend",$time); 
+
+                 $display(" [%0t ns] **WARNING** It's not allowed to perform an erase instruction after a subsector erase suspend",$time);
                  disable erase_operations;
-        `endif      
-        end else      
+        `endif
+        end else
         fork : erase_ops
 
         begin : exe
-        
+
            @(posedge N25Qxxx.S);
 
             disable reset;
@@ -5259,50 +5243,50 @@ end //page_program_ops
             if (operation=="Sector Erase") delay=erase_delay;
             `ifdef Stack512Mb
               else if (operation=="Die Erase") delay=erase_die_delay;
-            `elsif STACKED_MEDT_1G  
+            `elsif STACKED_MEDT_1G
               else if (operation=="Die Erase") delay=erase_die_delay;
             `else
               else if (operation=="Bulk Erase") delay=erase_bulk_delay;
             `endif
             `ifdef SubSect
-              else if (operation=="Subsector Erase")  delay=erase_ss_delay; 
-            `endif  
+              else if (operation=="Subsector Erase")  delay=erase_ss_delay;
+            `endif
             `ifdef MEDT_SubSect32K
-              else if (operation=="Subsector Erase 32K")  delay=erase_ss32k_delay; 
-            `endif  
-            
+              else if (operation=="Subsector Erase 32K")  delay=erase_ss32k_delay;
+            `endif
+
             -> errorCheck;
 
-            @(noError) 
+            @(noError)
                 begin
                     if (operation=="Sector Erase")          mem.eraseSector(destAddr);
                     `ifdef Stack512Mb
                       else if (operation=="Die Erase")       mem.eraseDie;
-                    `elsif STACKED_MEDT_1G  
+                    `elsif STACKED_MEDT_1G
                      else if (operation=="Die Erase")       mem.eraseDie;
                     `else
                       else if (operation=="Bulk Erase")       mem.eraseBulk;
                     `endif
                     `ifdef SubSect
-                      else if (operation=="Subsector Erase")  mem.eraseSubsector(destAddr); 
+                      else if (operation=="Subsector Erase")  mem.eraseSubsector(destAddr);
                     `endif
                     `ifdef MEDT_SubSect32K
-                      else if (operation=="Subsector Erase 32K") mem.eraseSubsector32K(destAddr);  
-                    `endif  
+                      else if (operation=="Subsector Erase 32K") mem.eraseSubsector32K(destAddr);
+                    `endif
                     $display("  [%0t ns] Command execution completed: %0s.", $time, operation);
                 end
         end
 
 
         begin : reset
-        
+
           @N25Qxxx.resetEvent;
             operation = "None";
-            disable exe;    
-        
+            disable exe;
+
         end
 
-            
+
     join
 end
 
@@ -5311,14 +5295,14 @@ end
 //-------------------------
 
 
- always @N25Qxxx.seqRecognized 
-    
+ always @N25Qxxx.seqRecognized
+
     if ((N25Qxxx.cmdRecName==="Program Erase Suspend") && (N25Qxxx.die_active == 1)) begin : PES_ops
-    
+
         if (operation=="Bulk Erase" || operation=="Die Erase" || operation=="Program OTP") begin
             $display("[%0t ns] %0s can't be suspended", $time, operation);
-        end else if (operation=="Write Protection Management Reg" || operation=="Write SR" || 
-            operation=="Write NV Configuration Reg" || operation=="Write PPB Reg") begin 
+        end else if (operation=="Write Protection Management Reg" || operation=="Write SR" ||
+            operation=="Write NV Configuration Reg" || operation=="Write PPB Reg") begin
             $display("[%0t ns] %0s can't be suspended", $time, operation);
             disable PES_ops;
         end
@@ -5328,16 +5312,16 @@ end
         //else if(prog.SwResetDuringSSE == 1) $display("[%0t ns] %0s PES after SW Reset is rejected IV", $time, operation);
 
         else fork : progerasesusp_ops
-        
+
             begin : exe
-            
+
                @(posedge N25Qxxx.S);
 
                 disable reset;
-                if (Suspended) begin 
+                if (Suspended) begin
                     holdOperation=oldOperation;
                     doubleSuspend=1;
-                end   
+                end
                 if(operation != "Program Erase Resume") begin
                   oldOperation = operation; //operazione sospesa
                 end
@@ -5347,7 +5331,7 @@ end
                       flag.FSR[6] = 1;
                   #eraseSusp_latencyTime; // (non definito ancora)
                   Suspended = 1;
-                end  
+                end
                 else begin
                            flag.FSR[2] = 1;
                   #progSusp_latencyTime; // (non definito ancora)
@@ -5373,10 +5357,10 @@ end
                           flag.FSR[6] = 1;
                         disable erase_operations;
                     //-etv    disable errorCheck_ops;
-                  end  
-                `endif  
+                  end
+                `endif
                   else if (oldOperation=="Page Program" || oldOperation=="Dual Program" || oldOperation=="Quad Program" ||
-                           oldOperation=="Dual Extended Program" || oldOperation=="Quad Extended Program" || 
+                           oldOperation=="Dual Extended Program" || oldOperation=="Quad Extended Program" ||
                            oldOperation=="Dual Command Page Program" || oldOperation=="Quad Command Page Program") begin
                            latencyTime = program_latency;
                            delay_resume=program_delay-($time - startTime);
@@ -5391,14 +5375,14 @@ end
 
 
         begin : reset
-        
+
           @N25Qxxx.resetEvent;
             operation = "None";
-            disable exe;    
-        
+            disable exe;
+
         end
 
-            
+
     join
 
   end
@@ -5408,36 +5392,36 @@ end
  // Program Erase Resume
  //-------------------------
 
-always @N25Qxxx.seqRecognized 
+always @N25Qxxx.seqRecognized
   begin
     #1;
     // $display("RESUME: Entered in program erase resume %s " ,N25Qxxx.cmdRecName, $time);
-    
+
     if ((N25Qxxx.cmdRecName==="Program Erase Resume") && (N25Qxxx.die_active == 1)) fork :resume_ops
 
 
         begin : exe
 
                 if(prog.prog_susp==0) begin
-                    $display(" [%0t ps] **WARNING** Program Erase Resume command aborted, device not in suspend mode.",$time); 
+                    $display(" [%0t ps] **WARNING** Program Erase Resume command aborted, device not in suspend mode.",$time);
                     disable resume_ops;
                 end
-            
+
            @(posedge N25Qxxx.S);
-            
+
             disable reset;
             operation = N25Qxxx.cmdRecName;
             N25Qxxx.latchingMode="N";
             delay=delay_resume;
-            
-            if (doubleSuspend==1) begin 
+
+            if (doubleSuspend==1) begin
                 Suspended=1;
-            end 
+            end
             else Suspended=0;
             N25Qxxx.busy=1;
-            
+
             -> errorCheck;
-            fork 
+            fork
 
                  begin : susp1
                     @(noError);
@@ -5445,26 +5429,26 @@ always @N25Qxxx.seqRecognized
                         if(Suspended == 1) mem.eraseSector(destAddr);
                         else mem.eraseSector(destAddrSusp1);
                         sec_erase_susp = 0;
-                    end    
+                    end
                     `ifdef SubSect
                     else if (oldOperation=="Subsector Erase" || oldOperation=="Subsector Erase 32K") begin
                         if(Suspended == 1) mem.eraseSector(destAddr);
                         else mem.eraseSector(destAddrSusp1);
                         subsec_erase_susp = 0;
-                    end    
-                        
+                    end
+
                     `endif
                     else begin
                         if(Suspended == 0) mem.setAddr(destAddrSusp1);
                         mem.writePageToMemory;
                         prog_susp = 0;
-                    end 
-                    
+                    end
+
                     $display(" [%0t ns] Command execution completed: %0s.", $time, oldOperation);
-                    if (doubleSuspend==1) begin 
+                    if (doubleSuspend==1) begin
                        doubleSuspend=0;
                        oldOperation=holdOperation;
-                   end    
+                   end
                    disable susp2;
                 end
 
@@ -5473,17 +5457,17 @@ always @N25Qxxx.seqRecognized
                   disable susp1;
                 end
             join
-                
-        end 
+
+        end
 
 
         begin : reset
-        
+
           @N25Qxxx.resetEvent;
             writePage_en=0;
             operation = "None";
-            disable exe;    
-        
+            disable exe;
+
         end
 
     join
@@ -5495,90 +5479,90 @@ begin
             operation = N25Qxxx.cmdRecName;
             N25Qxxx.latchingMode="N";
             delay=delay_resume;
-            
-            if (doubleSuspend==1) begin 
+
+            if (doubleSuspend==1) begin
                 Suspended=1;
-            end 
+            end
             else Suspended=0;
             N25Qxxx.busy=1;
-            
+
             -> errorCheck;
-            fork 
+            fork
 
                  begin : susp1a
                     @(noError);
                     `ifdef SubSect
                     if (oldOperation=="Subsector Erase" || oldOperation=="Subsector Erase 32K") begin
-                        mem.eraseSubsector(destAddr); 
+                        mem.eraseSubsector(destAddr);
                         subsec_erase_susp = 0;
                         ->N25Qxxx.SSEresumeDone;
-                    end    
+                    end
                     `endif
                     $display(" [%0t ns] Command execution completed: %0s.", $time, oldOperation);
-                    if (doubleSuspend==1) begin 
+                    if (doubleSuspend==1) begin
                        doubleSuspend=0;
                        oldOperation=holdOperation;
-                   end    
+                   end
                    //disable susp2;
                 end
             join
-        end            
+        end
 
 always @N25Qxxx.resumeSSEfromHwReset
         begin
             operation = N25Qxxx.cmdRecName;
             N25Qxxx.latchingMode="N";
             delay=delay_resume;
-            
-            if (doubleSuspend==1) begin 
+
+            if (doubleSuspend==1) begin
                 Suspended=1;
-            end 
+            end
             else Suspended=0;
             N25Qxxx.busy=1;
-            
+
             -> errorCheck;
-            fork 
+            fork
 
                  begin : susp1b
                     @(noError);
                     `ifdef SubSect
                     if (oldOperation=="Subsector Erase" || oldOperation=="Subsector Erase 32K") begin
-                        mem.eraseSubsector(destAddr); 
+                        mem.eraseSubsector(destAddr);
                         subsec_erase_susp = 0;
                         ->N25Qxxx.SSEresumeHwDone;
                         resumedFromHWReset = 0;
-                    end    
+                    end
                     `endif
                     $display(" [%0t ns] Command execution completed: %0s.", $time, oldOperation);
-                    if (doubleSuspend==1) begin 
+                    if (doubleSuspend==1) begin
                        doubleSuspend=0;
                        oldOperation=holdOperation;
-                   end    
+                   end
                    //disable susp2;
                 end
             join
-        end            
+        end
     //---------------------------
-    //  Program OTP 
+    //  Program OTP
     //---------------------------
 
-    
+
         reg write_OTP_buffer_en=0;
-     
+
          `define OTP_lockBit N25Qxxx.OTP.mem[OTP_dim-1][0]
 
          always @N25Qxxx.seqRecognized if((N25Qxxx.cmdRecName=="Program OTP") && (N25Qxxx.die_active == 1)) begin : OTP_PROG
 
            if(flag.FSR[4] || !PMReg.PMR[3]) begin
-                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction. Program Status bit is high!",$time); 
+                $display(" [%0t ns] **WARNING** It's not allowed to perform a program instruction. Program Status bit is high!",$time);
                 disable OTP_prog_ops;
            end else
         if(`WEL == 0) begin
             N25Qxxx.f.WEL_error;
             disable OTP_PROG;
-        end    
+        end
                 if(prog.prog_susp==1) begin
-                    $display(" [%0t ps] **WARNING** Program OTP not allowed while in suspend state.",$time); 
+                    $display(" [%0t ps] **WARNING** Program OTP not allowed while in suspend state.",$time);
                     disable OTP_PROG;
                 end
 
@@ -5604,7 +5588,7 @@ always @N25Qxxx.resumeSSEfromHwReset
                 $display("  [%0t ns] Command execution begins: OTP Program.",$time);
                 `ifdef MEDITERANEO
                     delay=program_OTP_delay;
-                `else    
+                `else
                     delay=program_delay;
                 `endif
                 -> errorCheck;
@@ -5613,15 +5597,15 @@ always @N25Qxxx.resumeSSEfromHwReset
                     OTP.writeBufferToMemory;
                     $display("  [%0t ns] Command execution completed: OTP Program.",$time);
                 end
-            end  
+            end
 
             begin : reset
                @N25Qxxx.resetEvent;
                 write_OTP_buffer_en=0;
                 operation = "None";
-                disable exe;    
+                disable exe;
             end
-        
+
         join
 
     end
@@ -5630,10 +5614,10 @@ always @N25Qxxx.resumeSSEfromHwReset
         always @N25Qxxx.dataLatched if(write_OTP_buffer_en) begin
 
             OTP.writeDataToBuffer(N25Qxxx.data);
-        
+
         end
 
-reg enable_4Byte_address;// enable_4Byte_address =1 the device accept 4 bytes of address 
+reg enable_4Byte_address;// enable_4Byte_address =1 the device accept 4 bytes of address
 `ifdef byte_4
 //-----------------------
 // 4-byte address
@@ -5647,14 +5631,14 @@ always @N25Qxxx.seqRecognized if (N25Qxxx.cmdRecName=="Enable 4 Byte Address") f
         @(posedge N25Qxxx.S);
         disable reset;
         //`ifndef Feature_8
-        //if(`WEL == 1) 
+        //if(`WEL == 1)
         if(`WEL == 0) begin
             N25Qxxx.f.WEL_error;
             disable CP_enable4ByteAddress;
-        end    
-        //`endif    
+        end
+        //`endif
     `ifdef MEDITERANEO
-        if(`WEL == 1) 
+        if(`WEL == 1)
         `endif
         begin
             -> stat.WEL_reset;
@@ -5681,16 +5665,16 @@ join
 
 `ifndef disEX4BYTE
 always @N25Qxxx.seqRecognized if (N25Qxxx.cmdRecName=="Exit 4 Byte Address") fork : CP_exit4ByteAddress
- 
+
     begin : exe
         @(posedge N25Qxxx.S);
         disable reset;
-        //`ifndef Feature_8 
+        //`ifndef Feature_8
         if(`WEL == 0) begin
             N25Qxxx.f.WEL_error;
             disable exe;
-        end    
-        //`endif    
+        end
+        //`endif
 
             -> stat.WEL_reset;
         begin
@@ -5722,52 +5706,52 @@ join
     //------------------------
     //  Error check
     //------------------------
-    // This process also models  
+    // This process also models
     // the operation delays
-    
+
 
     always @(errorCheck) fork : errorCheck_ops
-    
-    
+
+
         begin : static_check
 
-            if((operation=="Dual Extended Program" || N25Qxxx.protocol=="dual")) begin 
+            if((operation=="Dual Extended Program" || N25Qxxx.protocol=="dual")) begin
                 if((N25Qxxx.DoubleTransferRate == 0 && (N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=0)) ||
                    (N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=6 && N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=2))) begin
                     N25Qxxx.f.clock_error;
                     -> error;
-                end    
-//            end else if ((operation=="Quad Extended Program"|| N25Qxxx.protocol=="quad") && N25Qxxx.ck_count!=0 && N25Qxxx.ck_count!=2 && 
-//                         N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=6) begin 
+                end
+//            end else if ((operation=="Quad Extended Program"|| N25Qxxx.protocol=="quad") && N25Qxxx.ck_count!=0 && N25Qxxx.ck_count!=2 &&
+//                         N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=6) begin
             end else if ((operation=="Quad Extended Program"|| N25Qxxx.protocol=="quad")) begin
                         if((N25Qxxx.DoubleTransferRate == 0 && (N25Qxxx.ck_count!=0 && N25Qxxx.ck_count!=2 && N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=6)) ||
-                           (N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=1) && operation=="PPB Lock Bit Write")) begin 
+                           (N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=1) && operation=="PPB Lock Bit Write")) begin
                         N25Qxxx.f.clock_error;
                         -> error;
                     end
-            end else if(operation!="Dual Extended Program" && operation!="Quad Program" && operation!="Quad Extended Program" && operation!="Dual Command Page Program" && 
+            end else if(operation!="Dual Extended Program" && operation!="Quad Program" && operation!="Quad Extended Program" && operation!="Dual Command Page Program" &&
                         operation!="Dual Program" &&
-                       //N25Qxxx.protocol=="extended" && N25Qxxx.ck_count!=0) begin 
+                       //N25Qxxx.protocol=="extended" && N25Qxxx.ck_count!=0) begin
                        N25Qxxx.protocol=="extended" ) begin
                             if((N25Qxxx.DoubleTransferRate == 0 && N25Qxxx.ck_count!=0) ||
-                               //(N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=4 && operation == "Write NV Configuration Reg"))) 
-                               (N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=0))) begin 
+                               //(N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=4 && operation == "Write NV Configuration Reg")))
+                               (N25Qxxx.DoubleTransferRate == 1 && (N25Qxxx.ck_count!=4 && N25Qxxx.ck_count!=0))) begin
                                 N25Qxxx.f.clock_error;
                                 -> error;
-                            end         
-                            
+                            end
+
             end else if(`WEL==0 && operation !="Program Erase Resume" ) begin
-               
-                if(prog.resumedFromHWReset == 0) begin 
+
+                if(prog.resumedFromHWReset == 0) begin
                 //`ifndef Feature_8
                     N25Qxxx.f.WEL_error;
                     -> error;
                 //`endif
-                end    
-            
-            //end else if ( (operation=="Page Program" || operation=="Dual Program" || operation=="Dual Extended Program" || 
-            end 
-                if ( (operation=="Page Program" || operation=="Dual Program" || operation=="Dual Extended Program" || 
+                end
+
+            //end else if ( (operation=="Page Program" || operation=="Dual Program" || operation=="Dual Extended Program" ||
+            end
+                if ( (operation=="Page Program" || operation=="Dual Program" || operation=="Dual Extended Program" ||
                            operation=="Quad Extended Program" || operation=="Quad Program" || operation=="Dual Command Page Program" || operation=="Quad Command Page Program" ||
                            operation=="Sector Erase" ||  operation=="Subsector Erase" || operation=="Subsector Erase 32K")
 
@@ -5775,14 +5759,14 @@ join
                           `ifdef Stack512Mb
                             (isProtected_by_SR_stack(destAddr)!==0 || lock.isProtected_by_lockReg(destAddr)!==0) ) begin
                           `else
-                            `ifdef MEDT_PPB  
-                            ((lock.isProtected_by_SR(destAddr)!==0 || lock.isProtected_by_lockReg(destAddr)!==0) || 
+                            `ifdef MEDT_PPB
+                            ((lock.isProtected_by_SR(destAddr)!==0 || lock.isProtected_by_lockReg(destAddr)!==0) ||
                                ppb.isProtected_by_PPBReg(destAddr)!==1 || lock4kb.isProtected_by_lockReg(destAddr)!==0)) begin
-                            `else    
+                            `else
                             (lock.isProtected_by_SR(destAddr)!==0 || lock.isProtected_by_lockReg(destAddr)!==0)) begin
-                            `endif    
+                            `endif
                           `endif
-           
+
                 -> error;
 
 
@@ -5792,56 +5776,56 @@ join
                   if (lock.isProtected_by_SR(destAddr)!==0 && lock.isProtected_by_lockReg(destAddr)!==0)
                 `endif
                 $display("  [%0t ns] **WARNING** Sector locked by Status Register and by Lock Register: operation aborted.", $time);
-            
+
                 `ifdef Stack512Mb
                 else if (isProtected_by_SR_stack(destAddr)!==0)
                 `else
                 else if (lock.isProtected_by_SR(destAddr)!==0)
                 `endif
                 $display("  [%0t ns] **WARNING** Sector locked by Status Register: operation aborted.", $time);
-            
-                else if (lock.isProtected_by_lockReg(destAddr)!==0) 
+
+                else if (lock.isProtected_by_lockReg(destAddr)!==0)
                 $display("  [%0t ns] **WARNING** Sector locked by Lock Register: operation aborted.", $time);
                 `ifdef MEDT_4KBLocking
-                else if (lock4kb.isProtected_by_lockReg(destAddr)!==0) 
+                else if (lock4kb.isProtected_by_lockReg(destAddr)!==0)
                 $display("  [%0t ns] **WARNING** Subsector locked by Lock Register: operation aborted.", $time);
                 `endif
 
                 `ifdef MEDT_PPB
-                else if (ppb.isProtected_by_PPBReg(destAddr)!==1) 
+                else if (ppb.isProtected_by_PPBReg(destAddr)!==1)
                 $display("  [%0t ns] **WARNING** Sector locked by PPB Register: operation aborted.", $time);
                 `endif
-             
+
                 `ifdef MEDT_PPB
             end else if (operation=="Bulk Erase" && (lock.isAnySectorProtected(0) || ppb.isAnySectorProtected(0))) begin
             `else
             end else if (operation=="Bulk Erase" && (lock.isAnySectorProtected(0))) begin
                 `endif
-                
+
                 $display("  [%0t ns] **WARNING** Some sectors are locked: bulk erase aborted.", $time);
                 -> error;
-            
+
                 `ifdef MEDT_PPB
             end else if (operation=="Die Erase" && (lock.isAnySectorProtected(0) || ppb.isAnySectorProtected(0))) begin
                 `else
             end else if (operation=="Die Erase" && (lock.isAnySectorProtected(0))) begin
                 `endif
-                
+
                 $display("  [%0t ns] **WARNING** Some sectors are locked: die erase aborted.", $time);
                 -> error;
-            
-            end 
+
+            end
             else if (operation=="Bulk Erase" && N25Qxxx.Vpp_W_DQ2==0) begin
                  $display("  [%0t ns] **WARNING** Vpp_W=0 : bulk erase aborted.", $time);
                  -> error;
-            
-            end 
+
+            end
             else if (operation=="Die Erase" && N25Qxxx.Vpp_W_DQ2==0) begin
                  $display("  [%0t ns] **WARNING** Vpp_W=0 : bulk erase aborted.", $time);
                  -> error;
-            
-            end 
-            
+
+            end
+
               //else if(operation=="Write SR" && `SRWD==1 && N25Qxxx.W_int===0) begin
                //   $display("  [%0t ns] **WARNING** SRWD bit set to 1, and W=0: write SR isn't allowed!", $time);
               //    prog.SR_data = prog.SR_temp;
@@ -5861,12 +5845,12 @@ join
                   -> error;
               end
 
-              // added the additional check for PMR bit 3 set to 0 which means the array locked  
-                    else if ((operation=="Program OTP" && `OTP_lockBit==0)|| (operation == "Program_OTP" && PMReg.PMR[3] == 0)) begin 
+              // added the additional check for PMR bit 3 set to 0 which means the array locked
+                    else if ((operation=="Program OTP" && `OTP_lockBit==0)|| (operation == "Program_OTP" && PMReg.PMR[3] == 0)) begin
                     $display("  [%0t ps] **WARNING** OTP is read only, because lock bit has been programmed to 0: operation aborted.", $time);
-                    -> error;    
+                    -> error;
                     end
-            
+
         end
 
         fork : dynamicCheck
@@ -5875,7 +5859,7 @@ join
                 $display("  [%0t ns] **WARNING** Operation Fault because of Vcc Out of Range!", $time);
                 -> error;
             end
-            
+
             `ifdef RESET_pin
 //              if (operation!="Write SR") @(N25Qxxx.resetEvent) begin
 //                $display("  [%0t ns] **WARNING** Operation Fault because of Device Reset!", $time);
@@ -5885,22 +5869,22 @@ join
                       && operation!="Subsector Erase 32K" && operation!="Subsector Erase 32K") @(N25Qxxx.resetEvent) begin
                     $display("  [%0t ns] **WARNING** Operation Fault because of Device Reset!", $time);
                     -> error;
-                end  
-            `endif  
-            // #delay begin 
+                end
+            `endif
+            // #delay begin
             begin : main_ops
               #delay;
             N25Qxxx.busy=0;
                 if(!Suspended || !prog.prog_susp) -> stat.WEL_reset;
                 -> noError;
-                #1; 
+                #1;
                 -> noError2;
                 disable dynamicCheck;
                 disable errorCheck_ops;
             end
         join
 
-        
+
     join
 
 
@@ -5911,26 +5895,26 @@ join
         N25Qxxx.busy = 0;
         // -> stat.WEL_reset;
         disable errorCheck_ops;
-        if (operation=="Page Program" || operation=="Dual Program" || operation=="Quad Program" || operation=="Quad Command Page Program" || operation=="Dual Command Page Program" 
+        if (operation=="Page Program" || operation=="Dual Program" || operation=="Quad Program" || operation=="Quad Command Page Program" || operation=="Dual Command Page Program"
              || operation=="Dual Extended Program" || operation=="Quad Extended Program") disable page_program_ops;
         else if (operation=="Sector Erase" || operation=="Subsector Erase" || operation=="Bulk Erase" || operation=="Die Erase"
              || operation=="Subsector Erase 32K") disable erase_operations;
         else if (operation=="Write SR") disable write_SR_ops;
         else if (operation=="Write Protection Management Reg") disable write_PMR_ops; // added to error check
         `ifdef MEDT_PPB
-        else if (operation=="PPB Lock Bit Write") disable write_PLB_ops; 
+        else if (operation=="PPB Lock Bit Write") disable write_PLB_ops;
         else if (operation=="Write PPB Reg") disable ppb.WRPPB;
         `endif
         `ifdef MEDT_PASSWORD
-        else if (operation=="Password Write") disable write_PASS_ops; 
+        else if (operation=="Password Write") disable write_PASS_ops;
         `endif
-        else if (operation=="Write NV Configuration Reg") disable write_NVCR_ops;  // added to error check 
-        else if (operation=="Write VE Configuration Reg") disable write_VECR_ops;  // added to error check 
-        else if (operation=="Write Volatile Configuration Reg") disable write_VCR_ops;  // added to error check 
+        else if (operation=="Write NV Configuration Reg") disable write_NVCR_ops;  // added to error check
+        else if (operation=="Write VE Configuration Reg") disable write_VECR_ops;  // added to error check
+        else if (operation=="Write Volatile Configuration Reg") disable write_VCR_ops;  // added to error check
         else if (operation=="Program OTP") disable OTP_PROG;
         //else if (operation=="Program OTP") disable OTP_prog_ops;
         `ifdef byte_4
-        else if (operation=="Write EAR") disable write_EAR_ops; 
+        else if (operation=="Write EAR") disable write_EAR_ops;
         `endif
     end
 
@@ -5939,16 +5923,16 @@ join
         begin : exe1
             @N25Qxxx.Vpp_W_DQ2;
             disable exe2;
-        end    
-        begin : exe2      
+        end
+        begin : exe2
         if(operation=="Quad Command Page Program") begin
             #200;
             if(N25Qxxx.Vpp_W_DQ2 == 0)
                 $display("[%0t]***WARNING*** VPP did not rise within 200ns",$time);
                 disable exe1;
-                N25Qxxx.protocol = "extended"; 
-            end    
-        end    
+                N25Qxxx.protocol = "extended";
+            end
+        end
     join //checkVPP_during_quad_ops
     `endif
 
@@ -5957,15 +5941,15 @@ join
         N25Qxxx.busy = 0;
         // -> stat.WEL_reset;
         disable errorCheck_ops;
-        if (operation=="Page Program" || operation=="Dual Program" || operation=="Quad Program" || operation=="Quad Command Page Program" || operation=="Dual Command Page Program" 
+        if (operation=="Page Program" || operation=="Dual Program" || operation=="Quad Program" || operation=="Quad Command Page Program" || operation=="Dual Command Page Program"
              || operation=="Dual Extended Program" || operation=="Quad Extended Program") disable page_program_ops;
         else if (operation=="Sector Erase" || operation=="Subsector Erase" || operation=="Bulk Erase" || operation=="Die Erase"
              || operation=="Subsector Erase 32K") disable erase_operations;
-        else if (operation=="Write NV Configuration Reg") disable write_NVCR_ops; 
-        else if (operation=="Write VE Configuration Reg") disable write_VECR_ops;  // added to error check 
-        else if (operation=="Write Volatile Configuration Reg") disable write_VCR_ops;  // added to error check 
+        else if (operation=="Write NV Configuration Reg") disable write_NVCR_ops;
+        else if (operation=="Write VE Configuration Reg") disable write_VECR_ops;  // added to error check
+        else if (operation=="Write Volatile Configuration Reg") disable write_VCR_ops;  // added to error check
         `ifdef byte_4
-        else if (operation=="Write EAR") disable write_EAR_ops; 
+        else if (operation=="Write EAR") disable write_EAR_ops;
     `endif
         else if (operation=="Program OTP") disable OTP_PROG;
         `ifdef MEDT_ADVANCED_SECTOR
@@ -5974,12 +5958,12 @@ join
         `ifdef MEDT_PPB
         else if (operation=="Write PPB Reg") disable ppb.WRPPB;
     `endif
-        else if (operation=="Program Erase Suspend") begin 
+        else if (operation=="Program Erase Suspend") begin
             prog.prog_susp=0;
             disable PES_ops;
-        end    
+        end
         `ifdef MEDT_PASSWORD
-        else if (operation=="Password Write") disable write_PASS_ops; 
+        else if (operation=="Password Write") disable write_PASS_ops;
         `endif
         else if (operation=="Write Protection Management Reg") begin
             PMReg.PMR=prog.PMR_Byte;
@@ -5987,22 +5971,22 @@ join
                     OTP.mem[64][0]=0;
                 end
             disable write_PMR_ops;
-        end    
+        end
         else if (operation=="Write SR") begin
             `ifdef MEDITERANEO
             disable write_SR_ops;
-                `SRWD = SR_data[7];  
-                `BP3  = SR_data[6];  
-                `TB   = SR_data[5]; 
-                `BP2  = SR_data[4]; 
-                `BP1  = SR_data[3]; 
-                `BP0  = SR_data[2]; 
+                `SRWD = SR_data[7];
+                `BP3  = SR_data[6];
+                `TB   = SR_data[5];
+                `BP2  = SR_data[4];
+                `BP1  = SR_data[3];
+                `BP0  = SR_data[2];
                 -> Debug.debugSR;
-            `endif   
-            end        
+            `endif
+            end
      prog.prog_susp=0;
 
-     end 
+     end
     endtask
 
 
@@ -6034,13 +6018,13 @@ endmodule
 module StatusRegister;
 
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
 
 
     // status register
     reg [7:0] SR;
-    
+
 
 
 
@@ -6051,13 +6035,13 @@ module StatusRegister;
 
 
     initial begin
-        
+
         //see alias in DevParam.h
-        
-        SR[2] = 0; // BP0 - block protect bit 0 
+
+        SR[2] = 0; // BP0 - block protect bit 0
         SR[3] = 0; // BP1 - block protect bit 1
         SR[4] = 0; // BP2 - block protect bit 2
-        SR[5] = 0; // TB (block protect top/bottom) 
+        SR[5] = 0; // TB (block protect top/bottom)
         SR[6] = 0; // BP3 - block protect bit 3
         SR[7] = 0; // SRWD
 
@@ -6065,21 +6049,21 @@ module StatusRegister;
 
 
     always @(N25Qxxx.PollingAccessOn) if(N25Qxxx.PollingAccessOn) begin
-        
+
         SR[0] = 1; // WIP - write in progress
         SR[1] = 0; // WEL - write enable latch
 
     end
 
     always @(N25Qxxx.checkProtocol) begin
-        
+
         SR[0] = 0; // WIP - write in progress
         SR[1] = 0; // WEL - write enable latch
 
     end
 
     always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn) begin
-        
+
         SR[0] = 0; // WIP - write in progress
        // SR[1] = 0; // WEL - write enable latch
 
@@ -6087,28 +6071,28 @@ module StatusRegister;
 
 
 
-        
 
 
-     
+
+
 
 
     //----------
     // WIP bit
     //----------
-    
+
     always @(N25Qxxx.busy)
         `WIP = N25Qxxx.busy;
 
-   
+
     //----------
-    // WEL bit 
+    // WEL bit
     //----------
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Write Enable") fork : WREN 
-        
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Write Enable") fork : WREN
+
         begin : exe
-          @(posedge N25Qxxx.S); 
+          @(posedge N25Qxxx.S);
           disable reset;
           `WEL = 1;
           $display("  [%0t ns] Command execution completed: WEL bit set.", $time);
@@ -6118,24 +6102,24 @@ module StatusRegister;
           @N25Qxxx.resetEvent;
           disable exe;
         end
-    
+
     join
 
 
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Write Disable") fork : WRDI 
-        
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Write Disable") fork : WRDI
+
         begin : exe
           @(posedge N25Qxxx.S);
           disable reset;
           `WEL = 0;
           $display("  [%0t ns] Command execution completed: WEL bit reset.", $time);
         end
-        
+
         begin : reset
           @N25Qxxx.resetEvent;
           disable exe;
         end
-        
+
     join
 
 
@@ -6144,7 +6128,7 @@ module StatusRegister;
         `WEL = 0;
 
 
-    
+
 
     //------------------------
     // write status register
@@ -6160,9 +6144,9 @@ module StatusRegister;
     // NB : "Read SR" operation is also modelled in N25Qxxx.module
 
     reg enable_SR_read;
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read SR") begin : READ_SR 
-        
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read SR") begin : READ_SR
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
@@ -6174,17 +6158,17 @@ module StatusRegister;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_SR_read=0;
-        
-    join    
+
+    join
 
 end
 
 
-    
 
 
 
-endmodule   
+
+endmodule
 
 
 
@@ -6213,13 +6197,13 @@ endmodule
 module FlagStatusRegister;
 
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
 
 
     // status register
     reg [7:0] FSR;
-    
+
 
 
 
@@ -6231,12 +6215,12 @@ module FlagStatusRegister;
 
     initial begin
         FSR[0] = 0; // Reserved (N25Q032),4th address mode enabled(N25Q256)
-        FSR[1] = 0; // Protection Status bit 
-        FSR[2] = 0; // Program Suspend Status bit 
+        FSR[1] = 0; // Protection Status bit
+        FSR[2] = 0; // Program Suspend Status bit
         FSR[3] = 0; // VPP status bit not implemented
         FSR[4] = 0; // Program Status bit
-        FSR[5] = 0; // Erase Status bit 
-        FSR[6] = 0; // Erase Suspend status bit 
+        FSR[5] = 0; // Erase Status bit
+        FSR[6] = 0; // Erase Suspend status bit
         FSR[7] = 1; // P/E Controller bit(!WIP)
 
 
@@ -6255,59 +6239,59 @@ module FlagStatusRegister;
     // 4th address mode enabled bit
     //-----------------------
 
-    always @(N25Qxxx.prog.enable_4Byte_address) 
-    
+    always @(N25Qxxx.prog.enable_4Byte_address)
+
         FSR[0]=N25Qxxx.prog.enable_4Byte_address;
 
 `endif
 
     //------------------------------
-    // Erase and Program Suspend bit 
+    // Erase and Program Suspend bit
     //------------------------------
-    
-    always @(N25Qxxx.seqRecognized) if ((N25Qxxx.cmdRecName=="Program Erase Suspend" && FSR[7]==1 && (N25Qxxx.die_active == 1))) begin  
+
+    always @(N25Qxxx.seqRecognized) if ((N25Qxxx.cmdRecName=="Program Erase Suspend" && FSR[7]==1 && (N25Qxxx.die_active == 1))) begin
         if (prog.oldOperation=="Sector Erase" || prog.oldOperation=="Subsector Erase" || prog.oldOperation=="Subsector Erase 32K")  FSR[6]=1;
-        else FSR[2]=1;  
+        else FSR[2]=1;
     end
 
     always @(N25Qxxx.seqRecognized) if ((N25Qxxx.cmdRecName=="Program Erase Resume") && (N25Qxxx.die_active == 1)) begin
        if (prog.oldOperation=="Sector Erase" || prog.oldOperation=="Subsector Erase" || prog.oldOperation=="Subsector Erase 32K")  FSR[6]=0;
        else FSR[2]=0;
         end
-        
+
     always @N25Qxxx.SSEresumeHwDone begin
         FSR[6]=0;
     end
 
 
 //------------------------------------------
-// Erase Status bit and Program Status bit 
+// Erase Status bit and Program Status bit
 //------------------------------------------
 
      always @ prog.error if(`WEL == 1) begin
 
        if (prog.operation=="Sector Erase" || prog.operation=="Subsector Erase" || prog.operation=="Subsector Erase 32K" || prog.operation=="Bulk Erase" || prog.operation=="Die Erase" )  FSR[5]=1;
         else if (prog.operation=="Program OTP" || prog.operation=="Page Program" || prog.operation=="Dual Program" ||
-                 prog.operation=="Quad Program" || prog.operation=="Dual Extended Program" || prog.operation=="Quad Extended Program") 
-             FSR[4]=1;  
+                 prog.operation=="Quad Program" || prog.operation=="Dual Extended Program" || prog.operation=="Quad Extended Program")
+             FSR[4]=1;
 
      end
 
 //-------------------
-// Vpp Status bit 
+// Vpp Status bit
 //-------------------
 
-//not implemented 
+//not implemented
 
 
 // `define OTP_lockBit N25Qxxx.OTP.mem[OTP_dim-1][0]
 //------------------------
-// Protection Status bit 
+// Protection Status bit
 //------------------------
 
 always @ prog.error  if (((prog.operation=="Page Program" || prog.operation=="Dual Program" ||
                            prog.operation=="Dual Extended Program" || prog.operation=="Quad Extended Program" ||
-                           prog.operation=="Quad Program" || prog.operation=="Sector Erase" || 
+                           prog.operation=="Quad Program" || prog.operation=="Sector Erase" ||
                            prog.operation=="Subsector Erase" || prog.operation=="Subsector Erase 32K")
                                                         &&
                           `ifdef Stack512Mb
@@ -6316,17 +6300,17 @@ always @ prog.error  if (((prog.operation=="Page Program" || prog.operation=="Du
                             (lock.isProtected_by_SR(prog.destAddr)!==0 || lock.isProtected_by_lockReg(prog.destAddr)!==0))
                           `endif
                                                            ||
-                           (prog.operation=="Bulk Erase" && lock.isAnySectorProtected(0)) 
+                           (prog.operation=="Bulk Erase" && lock.isAnySectorProtected(0))
                                                            ||
-                           (prog.operation=="Die Erase" && lock.isAnySectorProtected(0)) 
+                           (prog.operation=="Die Erase" && lock.isAnySectorProtected(0))
                                                            ||
                            (prog.operation=="Write SR" && `SRWD==1 && N25Qxxx.W_int===0)
                                                            ||
-                            (prog.operation=="Program OTP" && `OTP_lockBit==0))  
-                               
-                          
+                            (prog.operation=="Program OTP" && `OTP_lockBit==0))
+
+
                     begin
-           
+
                          FSR[1]=1;
 
                     end
@@ -6340,45 +6324,45 @@ always @ prog.error  if (((prog.operation=="Page Program" || prog.operation=="Du
     // NB : "Read FSR" operation is also modelled in N25Qxxx.module
 
     reg enable_FSR_read;
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Flag SR") fork : READ_FSR 
-        
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Flag SR") fork : READ_FSR
+
         enable_FSR_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_FSR_read=0;
-        
-    join  
+
+    join
 
 //---------------------------
 // clear flag status register
 //---------------------------
-     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Clear Flag SR") begin  
-        
+     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Clear Flag SR") begin
+
          @(posedge N25Qxxx.S) begin
-         
+
             N25Qxxx.latchingMode="N";
             N25Qxxx.busy=1;
             $display("  [%0t ns] Command execution begins:Clear Flag Status Register.",$time);
-            
+
             #(clear_FSR_delay);
-            
+
             N25Qxxx.busy=0;
-            
+
             #0;
-            FSR[1] = 0; // Protection Status bit 
+            FSR[1] = 0; // Protection Status bit
             FSR[3] = 0; // VPP status bit
             FSR[4] = 0; // Program Status bit
-            FSR[5] = 0; // Erase Status bit 
+            FSR[5] = 0; // Erase Status bit
             $display("  [%0t ns] Command execution completed: Clear Flag Status Register. FSR=%b",
                          $time, FSR);
-                        
+
          end
 
-     end    
+     end
 
-       
-endmodule   
+
+endmodule
 
 
 
@@ -6397,22 +6381,22 @@ endmodule
 
 module ProtectionManagementRegister;
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     parameter [7:0] ProcManReg_default = 'b11111111;
-   
+
     // non volatile configuration register
 
     reg [7:0] PMR;
 
-     
+
     //--------------
     // Init
     //--------------
 
 
     initial begin
-        
+
         PMR[7:0] = ProcManReg_default;
 
     end
@@ -6432,25 +6416,25 @@ module ProtectionManagementRegister;
     // NB : "Read Non Volatile Configuration register" operation is also modelled in N25Qxxx.module
 
     reg enable_PMR_read ;
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Protection Management Reg") begin
-        
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-    fork 
-        
+    fork
+
         enable_PMR_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_PMR_read=0;
-        
-    join    
+
+    join
     end
- endmodule    
+ endmodule
 
 
 
@@ -6469,18 +6453,18 @@ module ProtectionManagementRegister;
 
 module NonVolatileConfigurationRegister(NVConfigReg);
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     // parameter [15:0] NVConfigReg_default = 'b1111111111111110;
     // parameter [15:0] NVConfigReg_default = 'b1111111111111111;
     // parameter [15:0] NVConfigReg_default = NVCR_DEFAULT_VALUE;
     input [15:0] NVConfigReg;
-   
+
     // non volatile configuration register
 
     reg [15:0] NVCR = 'hFFFF;
 
-     
+
     //--------------
     // Init
     //--------------
@@ -6489,7 +6473,7 @@ module NonVolatileConfigurationRegister(NVConfigReg);
     initial begin
         #1;
         // $display("In NVCR : nvcr default value is %h  and nvcr=%h",NVConfigReg ,NVCR, $time);
-        
+
         NVCR[15:0] = NVConfigReg;
         // NVCR[15:0] = NVConfigReg_default;
                                             // NVCR[15:12] = 'b1111; //dummy clock cycles number (default)
@@ -6501,8 +6485,8 @@ module NonVolatileConfigurationRegister(NVConfigReg);
                                             // NVCR[2] = 'b1; //Dual Input Command disabled (default)
                                             // NVCR[1] = 'b1; //reserved default 1(N25Q032),128MB segment enabled for 3bytes operations (default)(N25Q256)
                                             // NVCR[0] = 'b1; //reserved default 1(N25Q032), Address mode selection(default)(N25Q256)
-                                            
-        
+
+
     end
 
 
@@ -6520,34 +6504,34 @@ module NonVolatileConfigurationRegister(NVConfigReg);
     // NB : "Read Non Volatile Configuration register" operation is also modelled in N25Qxxx.module
 
     reg enable_NVCR_read;
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read NV Configuration Reg") begin : READ_NVCR
-        
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        
-    fork 
-        
+
+    fork
+
         enable_NVCR_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_NVCR_read=0;
-        
-    join    
+
+    join
 end
 
-    
 
 
-    
 
 
 
-endmodule   
+
+
+endmodule
 
 
 
@@ -6575,28 +6559,28 @@ endmodule
 
 module VolatileConfigurationRegister;
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     parameter [7:0] VConfigReg_default = 'b11111011;
-   
+
     // volatile configuration register
 
     reg [7:0] VCR;
 
-     
+
     //--------------
     // Init
     //--------------
 
 
     initial begin
-        
+
         VCR[7:0] = VConfigReg_default;
                                             // VCR[7:4] = 'b1111; //dummy clock cycles number (default)
                                             // VCR[3] = 'b1; // XIP disabled (default)
                                             // VCR[2] = 'b0; //reserved
                                             //VCR[1:0]='b11 // wrap. Continous reading (Default): All bytes are read sequentially
-        
+
     end
 
 
@@ -6614,7 +6598,7 @@ module VolatileConfigurationRegister;
     // NB : "Read Volatile Configuration register" operation is also modelled in N25Qxxx.module
 
     reg enable_VCR_read;
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Volatile Configuration Reg") begin : READ_VCR
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
@@ -6622,25 +6606,25 @@ module VolatileConfigurationRegister;
             @(negedge N25Qxxx.C);
             end
         `endif
-        
-        
-        fork 
-        
+
+
+        fork
+
         enable_VCR_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_VCR_read=0;
-        
-    join    
 
-end  
+    join
+
+end
 
 
-    
 
 
 
-endmodule   
+
+endmodule
 
 
 
@@ -6668,7 +6652,7 @@ endmodule
 
 module VolatileEnhancedConfigurationRegister;
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     `ifdef MEDITERANEO
     parameter [7:0] VEConfigReg_default = 'b11111111;
@@ -6680,14 +6664,14 @@ module VolatileEnhancedConfigurationRegister;
 
     reg [7:0] VECR;
 
-     
+
     //--------------
     // Init
     //--------------
 
 
     initial begin
-        
+
         VECR[7:0] = VEConfigReg_default;
                                             // VECR[7] = 'b1; //quad input command disable (default)
                                             // VECR[6] = 'b1; // dual input command disable (default)
@@ -6695,7 +6679,7 @@ module VolatileEnhancedConfigurationRegister;
                                             // VECR[4] = 'b1; // Reset/Hold disable(default)
                                             // VECR[3] = 'b1; //Accelerator pin enable in Quad SPI protocol(default) //not implemented
                                             //VECR[2:0] ='b111; // Output driver strength
-        
+
     end
 
 always @VECR if (N25Qxxx.Vcc_L2) begin
@@ -6729,31 +6713,31 @@ end
     // NB : "Read Volatile Enhanced Configuration register" operation is also modelled in N25Qxxx.module
 
     reg enable_VECR_read;
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read VE Configuration Reg")begin : READ_VECR 
-        
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read VE Configuration Reg")begin : READ_VECR
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        fork 
-        
+        fork
+
         enable_VECR_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_VECR_read=0;
-        
-    join    
+
+    join
 end
 
-`ifdef ENRSTQIO 
+`ifdef ENRSTQIO
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Enable QPI Mode") fork : EQIO
 
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Enable QPI Mode") fork : EQIO 
-        
         begin : exe
-          @(posedge N25Qxxx.S); 
+          @(posedge N25Qxxx.S);
           disable reset;
           VECR[7] = 0;
           $display("  [%0t ns] Command execution: Enable QPI, setting VECR[7] to 0.", $time);
@@ -6763,24 +6747,24 @@ end
           @N25Qxxx.resetEvent;
           disable exe;
         end
-    
+
     join
 
 
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Reset QPI Mode") fork : RSTQIO 
-        
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Reset QPI Mode") fork : RSTQIO
+
         begin : exe
           @(posedge N25Qxxx.S);
           disable reset;
           VECR[7] = 1;
           $display("  [%0t ns] Command execution: Reset QPI, setting VECR[7] to 1", $time);
         end
-        
+
         begin : reset
           @N25Qxxx.resetEvent;
           disable exe;
         end
-        
+
     join
 
 
@@ -6793,11 +6777,11 @@ end
 
 
 
-    
 
 
 
-endmodule   
+
+endmodule
 
 
 `ifdef MEDT_PASSWORD
@@ -6814,7 +6798,7 @@ endmodule
 
 module PasswordRegister();
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     reg [(8*8)-1:0] PSWORD = 64'hFFFF_FFFF_FFFF_FFFF;
     //reg [(8*8)-1:0] PSWORD = 'h0011_2233_44cc_ddee;
@@ -6829,18 +6813,18 @@ module PasswordRegister();
 
     reg enable_PSWORD_read;
     reg [3:0] PSWORD_location;
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Password Read") begin
-        
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        
-        fork 
-        
+
+        fork
+
         PSWORD_location = 0;
         enable_PSWORD_read=1;
 
@@ -6848,7 +6832,7 @@ module PasswordRegister();
             begin
                 $display("[%0t ns] **INFO** Password read is allowed. (ASP.2 = 1)", $time);
                 passwordReadNotAllowed = 0;
-            end 
+            end
         else if(ASP_Reg.ASP[2] == 0 || ASP_Reg.ASP[1] == 0)
             begin
                 $display("[%0t ns] **WARNING** Password can't be read when Password Protect Mode is enabled (ASP.2 = 0)", $time);
@@ -6859,9 +6843,9 @@ module PasswordRegister();
                 enable_PSWORD_read=0;
                 passwordReadNotAllowed = 0;
             end
-    join    
+    join
 
-end 
+end
 
     task writeDataToPasswordBuffer;
 
@@ -6870,7 +6854,7 @@ end
     begin
 
         passwordBuffer[(PSWORD_location*8) +: 8] = data;
-        PSWORD_location = PSWORD_location + 1; 
+        PSWORD_location = PSWORD_location + 1;
 
     end
 
@@ -6893,7 +6877,7 @@ end
         end
     endfunction
 
-endmodule   
+endmodule
 
 `endif // MEDT_PASSWORD
 
@@ -6915,10 +6899,10 @@ endmodule
 module Read;
 
 
-    `include "include/DevParam.h"
-    
-   
-   
+    `include "DevParam.h"
+
+
+
     reg enable, enable_fast, enable_rsfdp = 0;
      `ifdef MEDITERANEO
          reg succeedingReads = 0;
@@ -6931,8 +6915,8 @@ module Read;
     //  Read
     //--------------
     // NB : "Read" operation is also modelled in N25Qxxx.module
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read") 
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read")
     begin
 
         `ifdef MEDITERANEO
@@ -6941,20 +6925,20 @@ module Read;
             @(negedge N25Qxxx.C);
             end
         `endif
-        
-        fork 
-        
+
+        fork
+
         begin
-           
-            if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr)) 
-                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time); 
-            else begin    
+
+            if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr))
+                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time);
+            else begin
                 enable = 1;
                 mem.setAddr(N25Qxxx.addr);
-            end    
+            end
         end
-        
-        @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin 
+
+        @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
             enable=0;
             `ifdef MEDITERANEO
                 succeedingReads = 0;
@@ -6970,35 +6954,35 @@ end
     //  Read Fast
     //--------------
 
-    always @(N25Qxxx.seqRecognized) if ((N25Qxxx.cmdRecName=="Read Fast") || 
-                                        (N25Qxxx.cmdRecName=="Read Fast DTR") 
+    always @(N25Qxxx.seqRecognized) if ((N25Qxxx.cmdRecName=="Read Fast") ||
+                                        (N25Qxxx.cmdRecName=="Read Fast DTR")
                                         ) fork :READFAST_d
 
         begin
-             if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr)) 
-                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time); 
-            else begin 
+             if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr))
+                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time);
+            else begin
                 if(N25Qxxx.protocol == "extended" || N25Qxxx.protocol == "dual") begin
                     if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
-                        if(N25Qxxx.cmdRecName == "Read Fast") begin 
+                        if(N25Qxxx.cmdRecName == "Read Fast") begin
                             if(N25Qxxx.DoubleTransferRate==0) begin
-                                N25Qxxx.dummyDimEff = 8; 
+                                N25Qxxx.dummyDimEff = 8;
                                 N25Qxxx.iDummy = 7;
                             end else begin
-                                N25Qxxx.dummyDimEff = `defaultDummy; 
+                                N25Qxxx.dummyDimEff = `defaultDummy;
                                 N25Qxxx.iDummy = `defaultiDummy;
                             end
                         end else begin
-                            N25Qxxx.dummyDimEff = `defaultDummy; 
+                            N25Qxxx.dummyDimEff = `defaultDummy;
                             N25Qxxx.iDummy = `defaultiDummy;
                         end
                     end else begin
-                        N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                        N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                         N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                     end
-                end   
+                end
+
 
-            
             mem.setAddr(N25Qxxx.addr);
             $display("  [%0t ns] Dummy byte expected ...",$time);
             N25Qxxx.latchingMode="Y"; //Y=dummy
@@ -7012,8 +6996,8 @@ end
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
             enable_fast=0;
             disable READFAST_d;
-        end    
-    
+        end
+
     join
 
 
@@ -7024,7 +7008,7 @@ end
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Serial Flash Discovery Parameter") fork : READ_SFDP_ops
 
         begin
-            
+
             FlashDiscPar.setAddr(N25Qxxx.addr);
             $display("  [%0t ns] Dummy byte expected ...",$time);
             N25Qxxx.latchingMode="Y"; //Y=dummy
@@ -7039,8 +7023,8 @@ end
                 N25Qxxx.iDummy = 7; // Quad
                 N25Qxxx.read.enable_dual = 0;
                 N25Qxxx.read.enable_quad = 1;
-            end    
-            else 
+            end
+            else
             begin
                 N25Qxxx.iDummy = 7;
                 N25Qxxx.read.enable_dual = 0;
@@ -7057,8 +7041,8 @@ end
             N25Qxxx.read.enable_dual = 0;
             N25Qxxx.read.enable_quad = 0;
             disable READ_SFDP_ops;
-        end        
-    
+        end
+
     join
 
 
@@ -7072,8 +7056,8 @@ end
     reg enable_ID;
     reg [4:0] ID_index;
 
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read ID") 
-    begin 
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read ID")
+    begin
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
@@ -7081,16 +7065,16 @@ end
             end
         `endif
 
-        fork 
-        
+        fork
+
         begin
             enable_ID = 1;
             ID_index=0;
         end
-        
+
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_ID=0;
-        
+
     join
     end
 
@@ -7099,35 +7083,35 @@ end
     //--------------------------
 
 
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Multiple I/O Read ID") 
-        
-    begin 
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Multiple I/O Read ID")
+
+    begin
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        fork 
-        
+        fork
+
         begin
             enable_ID = 1;
             ID_index=0;
         end
-        
+
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_ID=0;
-        
+
     join
     end
 
     //-------------
-    //  Dual Read  
+    //  Dual Read
     //-------------
 
     reg enable_dual=0;
-    
-    
+
+
       always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Dual Output Fast Read" ||
                                           N25Qxxx.cmdRecName=="Dual I/O Fast Read" ||
                                           N25Qxxx.cmdRecName=="Dual Command Fast Read" ||
@@ -7140,80 +7124,80 @@ end
 
           begin
 
-           if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr)) 
-                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time); 
+           if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr))
+                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time);
             else begin
                 if(N25Qxxx.protocol == "dual" || N25Qxxx.protocol == "extended") begin
-                    if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin  
+                    if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
                         if(N25Qxxx.cmdRecName=="Extended command DIOFRDTR" ||
                            N25Qxxx.cmdRecName=="Extended command DOFRDTR" ||
                            N25Qxxx.cmdRecName=="Dual Command DOFRDTR" ||
                            N25Qxxx.cmdRecName=="Dual Command Fast Read DTR" ||
                            N25Qxxx.cmdRecName=="Dual Command DIOFRDTR") begin
-                            N25Qxxx.dummyDimEff = `defaultDummy; 
+                            N25Qxxx.dummyDimEff = `defaultDummy;
                             N25Qxxx.iDummy = `defaultiDummy;
                         end else begin
                             if(N25Qxxx.DoubleTransferRate == 0) begin
-                                N25Qxxx.dummyDimEff = 8; 
+                                N25Qxxx.dummyDimEff = 8;
                                 N25Qxxx.iDummy = 7;
                             end else begin
-                                N25Qxxx.dummyDimEff = `defaultDummy; 
+                                N25Qxxx.dummyDimEff = `defaultDummy;
                                 N25Qxxx.iDummy = `defaultiDummy;
                             end
                         end
                     end else begin
-                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                             N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                     end
-                end     
-            
+                end
+
               mem.setAddr(N25Qxxx.addr);
               $display("  [%0t ns] Dummy byte expected ...",$time);
-              
+
               N25Qxxx.latchingMode="Y"; //Y=dummy
               @N25Qxxx.dummyLatched;
               enable_dual = 1;
               N25Qxxx.latchingMode="N";
 
-             end 
-          end 
+             end
+          end
 
           @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
               enable_dual=0;
               disable DUAL_d;
-          end    
-    
+          end
+
       join
 
 
 
   //-------------------------
-  //  Quad Read  
+  //  Quad Read
   //-------------------------
 
     reg enable_quad=0;
-    
-    
+
+
       always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Quad Output Read" ||
                                           N25Qxxx.cmdRecName=="Quad I/O Fast Read" ||
                                           `ifdef MEDT_4READ4D
                                           N25Qxxx.cmdRecName=="Word Read Quad I/O" ||
                                           N25Qxxx.cmdRecName=="Word Read Quad Command Fast Read" ||
                                           `endif
-                                          N25Qxxx.cmdRecName=="Quad Command Fast Read" || 
-                                          N25Qxxx.cmdRecName=="Quad Command Fast Read DTR" || 
-                                          N25Qxxx.cmdRecName=="Quad Command QOFRDTR" || 
-                                          N25Qxxx.cmdRecName=="Quad Command QIOFRDTR" || 
+                                          N25Qxxx.cmdRecName=="Quad Command Fast Read" ||
+                                          N25Qxxx.cmdRecName=="Quad Command Fast Read DTR" ||
+                                          N25Qxxx.cmdRecName=="Quad Command QOFRDTR" ||
+                                          N25Qxxx.cmdRecName=="Quad Command QIOFRDTR" ||
                                           N25Qxxx.cmdRecName=="Extended command QOFRDTR" ||
-                                          N25Qxxx.cmdRecName=="Extended command QIOFRDTR" 
+                                          N25Qxxx.cmdRecName=="Extended command QIOFRDTR"
                                           ) fork :QUAD_d
 
           begin
 
-           if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr)) 
-                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time); 
-                
-            else if(prog.sec_erase_susp && prog.sec_susp==f.sec(N25Qxxx.addr)) 
+           if(prog.prog_susp && prog.page_susp==f.pag(N25Qxxx.addr))
+                $display("  [%0t ns] **WARNING** It's not allowed to read the page whose program cycle is suspended",$time);
+
+            else if(prog.sec_erase_susp && prog.sec_susp==f.sec(N25Qxxx.addr))
                  $display("  [%0t ns] **WARNING** It's not allowed to read the sector whose erase cycle is suspended",$time);
 
             else if (prog.subsec_erase_susp && prog.sec_susp==f.sec(N25Qxxx.addr))
@@ -7222,44 +7206,44 @@ end
 
             else begin
                 //if(N25Qxxx.dummySetByNVCR == 0 && prog.dummySetByVECR == 0 && prog.dummySetByVCR == 0 && N25Qxxx.protocol == "quad") begin
-                if((N25Qxxx.protocol == "quad" || N25Qxxx.protocol == "extended") && 
+                if((N25Qxxx.protocol == "quad" || N25Qxxx.protocol == "extended") &&
                     (N25Qxxx.cmdRecName != "Quad Output Read" && N25Qxxx.cmdRecName != "Quad Command QOFRDTR" && N25Qxxx.cmdRecName != "Extended command QOFRDTR" &&
                      //N25Qxxx.cmdRecName != "Extended command QIOFRDTR" && N25Qxxx.cmdRecName != "Quad I/O Fast Read")) begin
                      N25Qxxx.cmdRecName != "Extended command QIOFRDTR"  && N25Qxxx.cmdRecName != "Quad Command Fast Read DTR" &&
                      N25Qxxx.cmdRecName != "Quad Command QIOFRDTR")) begin
                     if(prog.dummySetByVCR == 1) begin
-                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin  
-                            N25Qxxx.dummyDimEff = 10; 
+                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
+                            N25Qxxx.dummyDimEff = 10;
                             N25Qxxx.iDummy = 9;
                         end
                         else begin
-                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                             N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                         end
                             `ifdef MEDT_4READ4D
                                 if (N25Qxxx.cmdRecName=="Word Read Quad I/O" || N25Qxxx.cmdRecName=="Word Read Quad Command Fast Read") begin
-                                    N25Qxxx.dummyDimEff = 4; 
+                                    N25Qxxx.dummyDimEff = 4;
                                     N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                                 end
                             `endif
                     end
-                    else if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin  
-                        N25Qxxx.dummyDimEff = 10; 
+                    else if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
+                        N25Qxxx.dummyDimEff = 10;
                         N25Qxxx.iDummy = 9;
                             `ifdef MEDT_4READ4D
                                 if (N25Qxxx.cmdRecName=="Word Read Quad I/O" || N25Qxxx.cmdRecName=="Word Read Quad Command Fast Read") begin
-                                    N25Qxxx.dummyDimEff = 4; 
+                                    N25Qxxx.dummyDimEff = 4;
                                     N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                                 end
                             `endif
                     end else begin
-                        N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                        N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                         N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
-                        //N25Qxxx.dummyDimEff = 8; 
+                        //N25Qxxx.dummyDimEff = 8;
                         //N25Qxxx.iDummy = 7;
                             `ifdef MEDT_4READ4D
                                 if (N25Qxxx.cmdRecName=="Word Read Quad I/O" || N25Qxxx.cmdRecName=="Word Read Quad Command Fast Read") begin
-                                    N25Qxxx.dummyDimEff = 4; 
+                                    N25Qxxx.dummyDimEff = 4;
                                     N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                                 end
                             `endif
@@ -7268,107 +7252,107 @@ end
                 else begin
                     `ifdef MEDITERANEO
                     if(N25Qxxx.cmdRecName=="Extended command QOFRDTR" && N25Qxxx.protocol=="extended" ) begin
-                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin 
-                            N25Qxxx.dummyDimEff = `defaultDummy; 
+                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
+                            N25Qxxx.dummyDimEff = `defaultDummy;
                             N25Qxxx.iDummy = `defaultiDummy;
                         end else begin
-                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                             N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1 ;
                         end
-                    end else if (N25Qxxx.cmdRecName=="Quad Command QOFRDTR" && N25Qxxx.protocol=="quad") begin    
-                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin 
-                            N25Qxxx.dummyDimEff = 8; 
+                    end else if (N25Qxxx.cmdRecName=="Quad Command QOFRDTR" && N25Qxxx.protocol=="quad") begin
+                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
+                            N25Qxxx.dummyDimEff = 8;
                             N25Qxxx.iDummy = 7;
                         end else begin
-                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                             N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1 ;
                         end
-                    end else if (N25Qxxx.cmdRecName=="Quad Output Read" && N25Qxxx.protocol=="extended") begin    
-                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin 
+                    end else if (N25Qxxx.cmdRecName=="Quad Output Read" && N25Qxxx.protocol=="extended") begin
+                        if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
                             if(N25Qxxx.DoubleTransferRate == 0) begin
-                                N25Qxxx.dummyDimEff = 8; 
+                                N25Qxxx.dummyDimEff = 8;
                                 N25Qxxx.iDummy = 7;
                             end else begin
-                                N25Qxxx.dummyDimEff = `defaultDummy; 
+                                N25Qxxx.dummyDimEff = `defaultDummy;
                                 N25Qxxx.iDummy = `defaultiDummy;
                             end
                         end else begin
-                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                             N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1 ;
                         end
                     end else begin
                         if(prog.dummySetByVCR == 1) begin
-                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+                            N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                             N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                         end else begin
-                            N25Qxxx.dummyDimEff = 8; 
+                            N25Qxxx.dummyDimEff = 8;
                             N25Qxxx.iDummy = 7;
-                        end    
+                        end
 //                        if(N25Qxxx.cmdRecName=="Extended command QOFRDTR" || N25Qxxx.cmdRecName=="Quad Command QOFRDTR") begin
-//                            if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin 
-//                                N25Qxxx.dummyDimEff = 8; 
+//                            if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
+//                                N25Qxxx.dummyDimEff = 8;
 //                                N25Qxxx.iDummy = 7;
 //                            end else begin
-//                                N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4]; 
+//                                N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
 //                                N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1 ;
 //                            end
 //                        end
                     end
                 `else
                     if(N25Qxxx.protocol == "quad")begin
-                        N25Qxxx.dummyDimEff = 8; 
+                        N25Qxxx.dummyDimEff = 8;
                         N25Qxxx.iDummy = 7;
                     end else begin
-                        N25Qxxx.dummyDimEff = `defaultDummy; 
+                        N25Qxxx.dummyDimEff = `defaultDummy;
                         N25Qxxx.iDummy = `defaultiDummy;
                     end
 
                 `endif
-                end     
+                end
               mem.setAddr(N25Qxxx.addr);
               $display("  [%0t ns] %d Dummy clock cycles expected ...",N25Qxxx.dummyDimEff,$time);
               N25Qxxx.latchingMode="Y"; //Y=dummy
               //`ifdef MEDT_4READ4D
               //    N25Qxxx.iDummy = 7;
-              //`endif    
+              //`endif
               N25Qxxx.quadMode = 1;
               @N25Qxxx.dummyLatched;
               enable_quad = 1;
               N25Qxxx.latchingMode="N";
 
             end
-            
-          end 
+
+          end
 
           @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
               enable_quad=0;
               disable QUAD_d;
-          end    
-    
+          end
+
       join
 
 
 
 
     //-------------
-    //  Read OTP 
+    //  Read OTP
     //-------------
     // NB : "Read OTP" operation is also modelled in N25Qxxx.module
 
     reg enable_OTP=0;
-    
-    
+
+
       always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read OTP") fork : READ_OTP
-        
+
           begin
               `ifdef MEDITERANEO
               if(N25Qxxx.protocol == "extended" || N25Qxxx.protocol == "dual") begin
                   if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
                         if(N25Qxxx.DoubleTransferRate == 0) begin
-                            N25Qxxx.dummyDimEff = 8; 
+                            N25Qxxx.dummyDimEff = 8;
                             N25Qxxx.iDummy = 7;
                         end else begin
-                            N25Qxxx.dummyDimEff = `defaultDummy; 
+                            N25Qxxx.dummyDimEff = `defaultDummy;
                             N25Qxxx.iDummy = `defaultiDummy;
                         end
                   end else begin
@@ -7379,11 +7363,11 @@ end
                   if(VolatileReg.VCR[7:4] == 'b1111 || VolatileReg.VCR[7:4] == 'b0000) begin
                       N25Qxxx.dummyDimEff = 10;
                       N25Qxxx.iDummy = 9;
-                  end else begin   
+                  end else begin
                       N25Qxxx.dummyDimEff = VolatileReg.VCR[7:4];
                       N25Qxxx.iDummy = N25Qxxx.dummyDimEff - 1;
                   end
-              end    
+              end
               `endif
 
               $display("  [%0t ns] Dummy byte expected ...",$time);
@@ -7394,17 +7378,17 @@ end
               N25Qxxx.latchingMode="N";
               OTP.setAddr(N25Qxxx.addr);
           end
-        
+
           @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
               enable_OTP=0;
               disable READ_OTP;
           end
       join
-    
-    
 
 
-    
+
+
+
 
 
 endmodule
@@ -7424,7 +7408,7 @@ endmodule
 
 module FlashDiscoveryParameter(sfdp_file);
 
-`include "include/DevParam.h"
+`include "DevParam.h"
 
 
   //input [2048*8:1] sfdp_file ;
@@ -7449,28 +7433,28 @@ module FlashDiscoveryParameter(sfdp_file);
  //  Init
  //-----------
 
-    initial begin 
+    initial begin
 
-        for (i=0; i<=FDP_dim-1; i=i+1) 
+        for (i=0; i<=FDP_dim-1; i=i+1)
             FDP[i] = data_NP;
         #1;
-         
+
          // if ( `FILENAME_sfdp!="" && `FILENAME_sfdp!=" ") begin
          if ( sfdp_file!="" && sfdp_file!=" ") begin
 
             $readmemb(sfdp_file, FDP);
             $display("[%0t ns] ==INFO== Load flash discovery paramater table content from file: \"%0s\".", $time, sfdp_file);
-    
+
          end
     end
 
 
-//read data from the fdp file    
+//read data from the fdp file
 task readData;
 
     output [dataDim-1:0] data;
     begin
-        
+
         if (fdpAddr[FDP_addrDim -1 :0] < FDP_dim-1) begin
 
             data = FDP[fdpAddr[FDP_addrDim -1 :0]];
@@ -7478,16 +7462,16 @@ task readData;
             fdpAddr[FDP_addrDim -1 :0] = fdpAddr[FDP_addrDim -1 :0] + 1;
             $display("In SFDP READ: fdpAddr=%h , data=%h ", fdpAddr[FDP_addrDim -1 :0], data , $time);
 
-            
-        end else 
-            
+
+        end else
+
             $display("  [%0t ns] **WARNING** Highest address reached", $time);
     end
 
 endtask
  // set start address & page index
     // (for program and read operations)
-    
+
     task setAddr;
 
     input [addrDim-1:0] addr;
@@ -7495,9 +7479,9 @@ endtask
     begin
 
         fdpAddr[FDP_addrDim -1 :0] = addr[FDP_addrDim -1 :0];
-    
+
     end
-    
+
     endtask
 
 endmodule
@@ -7511,12 +7495,12 @@ endmodule
 -----------------------------------------------------------
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 
-`timescale 1ns / 1ps 
+`timescale 1ns / 1ps
 
 module LockManager;
 
 
-`include "include/DevParam.h"
+`include "DevParam.h"
 
 
 
@@ -7547,17 +7531,17 @@ integer i;
 initial
     for (i=0; i<=nSector-1; i=i+1) begin
         lock_by_SR[i] = 0;
-        //LockReg_WL & LockReg_LD are initialized by powerUp  
+        //LockReg_WL & LockReg_LD are initialized by powerUp
     end
-    
+
 
 
 //------------------------
 // Reset signal effects
 //------------------------
 
-  
-  always @N25Qxxx.resetEvent 
+
+  always @N25Qxxx.resetEvent
         #1
       for (i=0; i<=nSector-1; i=i+1) begin
         if(PMReg.PMR[5] == 0) begin
@@ -7567,7 +7551,7 @@ initial
           LockReg_WL[i] = 0;
         end
         LockReg_LD[i] = 0;
-      end    
+      end
 
 
 
@@ -7578,13 +7562,13 @@ initial
 //----------------------------------
 
 
-//  always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn) 
+//  always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn)
 //      for (i=0; i<=nSector-1; i=i+1) begin
 //          LockReg_WL[i] = 0;
 //          LockReg_LD[i] = 0;
 //      end
 
-  always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn) 
+  always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn)
       for (i=0; i<=nSector-1; i=i+1) begin
         if(PMReg.PMR[5] == 0) begin
           LockReg_WL[i] = 1;
@@ -7608,18 +7592,18 @@ integer nLockedSector;
 integer temp;
 
 
-  
-  always @(`TB or `BP3 or `BP2 or `BP1 or `BP0) 
+
+  always @(`TB or `BP3 or `BP2 or `BP1 or `BP0)
   begin
 
       for (i=0; i<=nSector-1; i=i+1) //reset lock status of all sectors
           lock_by_SR[i] = 0;
-    
+
       temp = {`BP3, `BP2, `BP1, `BP0};
       if(temp==0) begin
           nLockedSector = 0;
-      end else begin    
-        nLockedSector = 2**(temp-1); 
+      end else begin
+        nLockedSector = 2**(temp-1);
       end
 
       if (nLockedSector>0 && `TB==0) // upper sectors protected
@@ -7628,9 +7612,9 @@ integer temp;
               lock_by_SR[i] = 1;
               $display("  [%0t ns] ==INFO== Sector %0d locked", $time, i);
           end
-    
-      else if (nLockedSector>0 && `TB==1) // lower sectors protected 
-          for ( i = 0 ; i <= nLockedSector-1 ; i = i+1 ) 
+
+      else if (nLockedSector>0 && `TB==1) // lower sectors protected
+          for ( i = 0 ; i <= nLockedSector-1 ; i = i+1 )
           begin
               lock_by_SR[i] = 1;
               $display("  [%0t ns] ==INFO== Sector %0d locked", $time, i);
@@ -7657,12 +7641,12 @@ reg enable_lockReg_read=0;
       // if (!PMReg.PMR[5]) begin
       //     $display("  [%0t ps] **WARNING** PMR bit is set. Write lock register is not allowed!", $time);
       //     disable WRLR;
-      //  end else 
+      //  end else
        fork : WRLR
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - Write Lock Reg aborted due to Prog/Erase Suspend",$time);
             disable WRLR;
-          end  
+          end
         begin : exe1
 
             sect = f.sec(N25Qxxx.addr);
@@ -7686,17 +7670,17 @@ reg enable_lockReg_read=0;
                 disable exe2;
             end
             `ifdef MEDT_4KBLocking
-            else if(sect != 'h0 && sect != 'h1FF) begin    
+            else if(sect != 'h0 && sect != 'h1FF) begin
                 if (LockReg_LD[sect]==1) begin
                         $display("  [%0t ns] **WARNING** Lock Down bit is set. Write lock register is not allowed!", $time);
                 end
                 else begin
                     LockReg_LD[sect]=sectLockReg[1];
                     LockReg_WL[sect]=sectLockReg[0];
-                    $display("  [%0t ns] Command execution: lock register of sector %0h set to (%b,%b)", 
+                    $display("  [%0t ns] Command execution: lock register of sector %0h set to (%b,%b)",
                               $time, sect, LockReg_LD[sect], LockReg_WL[sect] );
-                end    
-            end    
+                end
+            end
         `else
             else if (LockReg_LD[sect]==1) begin
                     $display("  [%0t ns]- **WARNING** Lock Down bit is set. Write lock register is not allowed!", $time);
@@ -7704,9 +7688,9 @@ reg enable_lockReg_read=0;
             else begin
                 LockReg_LD[sect]=sectLockReg[1];
                 LockReg_WL[sect]=sectLockReg[0];
-                $display("  [%0t ns]- Command execution: lock register of sector %0d set to (%b,%b)", 
+                $display("  [%0t ns]- Command execution: lock register of sector %0d set to (%b,%b)",
                           $time, sect, LockReg_LD[sect], LockReg_WL[sect] );
-            end    
+            end
             `endif
         end
 
@@ -7715,7 +7699,7 @@ reg enable_lockReg_read=0;
             disable exe1;
             disable exe2;
         end
-        
+
     join
 
 
@@ -7723,7 +7707,7 @@ reg enable_lockReg_read=0;
 
     // Read lock register
 
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Lock Reg") begin : READ_LOCKEG
 
         `ifdef MEDITERANEO
@@ -7734,14 +7718,14 @@ reg enable_lockReg_read=0;
         `endif
         fork : READ_LOCKREG
         begin
-          //sect = f.sec(N25Qxxx.addr); 
+          //sect = f.sec(N25Qxxx.addr);
           //N25Qxxx.dataOut = {4'b0, LockReg_LD[sect], LockReg_WL[sect]};
           enable_lockReg_read=1;
-        end   
-        
+        end
+
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_lockReg_read=0;
-        
+
     join
 
 end
@@ -7760,7 +7744,7 @@ reg [sectorAddrDim-1:0] sectAddr;
 begin
 
     sectAddr = f.sec(byteAddr);
-    isProtected_by_SR = lock_by_SR[sectAddr]; 
+    isProtected_by_SR = lock_by_SR[sectAddr];
 
 end
 endfunction
@@ -7789,12 +7773,12 @@ function isAnySectorProtected;
 input required;
 begin
 
-    i=0;   
+    i=0;
     isAnySectorProtected=0;
-    while(isAnySectorProtected==0 && i<=nSector-1) begin 
+    while(isAnySectorProtected==0 && i<=nSector-1) begin
           isAnySectorProtected=lock_by_SR[i] || LockReg_WL[i];
         i=i+1;
-    end    
+    end
 
 end
 endfunction
@@ -7810,12 +7794,12 @@ endmodule
 
 `ifdef MEDT_4KBLocking
 
-`timescale 1ns / 1ps 
+`timescale 1ns / 1ps
 
 module LockManager4KB;
 
 
-`include "include/DevParam.h"
+`include "DevParam.h"
 
 //---------------------------------------------------
 // Data structures for protection status modelling
@@ -7839,16 +7823,16 @@ integer i;
 initial
     for (i=0; i<=nSSector-1; i=i+1)
         lock_by_SR[i] = 0;
-        //LockReg_WL & LockReg_LD are initialized by powerUp  
-    
+        //LockReg_WL & LockReg_LD are initialized by powerUp
+
 
 
 //------------------------
 // Reset signal effects
 //------------------------
 
-  
-  always @N25Qxxx.resetEvent 
+
+  always @N25Qxxx.resetEvent
       for (i=0; i<=nSSector-1; i=i+1) begin
         if(PMReg.PMR[5] == 0) begin
           LockReg_WL[i] = 1;
@@ -7857,7 +7841,7 @@ initial
           LockReg_WL[i] = 0;
         end
         LockReg_LD[i] = 0;
-      end    
+      end
 
 
 //----------------------------------
@@ -7865,7 +7849,7 @@ initial
 //----------------------------------
 
 
-  always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn) 
+  always @(N25Qxxx.ReadAccessOn) if(N25Qxxx.ReadAccessOn)
       for (i=0; i<=nSSector-1; i=i+1) begin
           LockReg_WL[i] = 0;
           LockReg_LD[i] = 0;
@@ -7879,15 +7863,15 @@ integer nLockedSubSector;
 integer temp;
 
 
-  
-  always @(`TB or `BP3 or `BP2 or `BP1 or `BP0) 
+
+  always @(`TB or `BP3 or `BP2 or `BP1 or `BP0)
   begin
 
       for (i=0; i<=nSSector-1; i=i+1) //reset lock status of all sectors
           lock_by_SR[i] = 0;
-    
+
       temp = {`BP3, `BP2, `BP1, `BP0};
-      nLockedSubSector = 2**(temp-1); 
+      nLockedSubSector = 2**(temp-1);
 
       if (nLockedSubSector>0 && `TB==0) // upper sectors protected
           for ( i=nSSector-1 ; i>=nSSector-nLockedSubSector ; i=i-1 )
@@ -7895,9 +7879,9 @@ integer temp;
               lock_by_SR[i] = 1;
               $display("  [%0t ns] ==INFO== Sector %0d locked", $time, i);
           end
-    
-      else if (nLockedSubSector>0 && `TB==1) // lower sectors protected 
-          for ( i = 0 ; i <= nLockedSubSector-1 ; i = i+1 ) 
+
+      else if (nLockedSubSector>0 && `TB==1) // lower sectors protected
+          for ( i = 0 ; i <= nLockedSubSector-1 ; i = i+1 )
           begin
               lock_by_SR[i] = 1;
               $display("  [%0t ns] ==INFO== Sector %0d locked", $time, i);
@@ -7925,7 +7909,7 @@ reg enable_lockReg_read=0;
       // if (!PMReg.PMR[5]) begin
       //     $display("  [%0t ps] **WARNING** PMR bit is set. Write lock register is not allowed!", $time);
       //     disable WRLR;
-      //  end else 
+      //  end else
        fork : WRLR
         begin : exe1
             sect = f.sec(N25Qxxx.addr);
@@ -7954,10 +7938,10 @@ reg enable_lockReg_read=0;
                 else begin
                 LockReg_LD[sub]=subLockReg[1];
                 LockReg_WL[sub]=subLockReg[0];
-                $display("  [%0t ns] Command execution: lock register of sub-sector %0d set to (%b,%b)", 
+                $display("  [%0t ns] Command execution: lock register of sub-sector %0d set to (%b,%b)",
                           $time, sub, LockReg_LD[sub], LockReg_WL[sub] );
-                end    
-            end    
+                end
+            end
         end
 
         begin : reset
@@ -7965,7 +7949,7 @@ reg enable_lockReg_read=0;
             disable exe1;
             disable exe2;
         end
-        
+
     join
 
 
@@ -7973,26 +7957,26 @@ reg enable_lockReg_read=0;
 
     // Read lock register
 
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read Lock Reg") begin : READ_LOCKREG4KB
-        
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        
+
         fork
         begin
-          //sect = f.sec(N25Qxxx.addr); 
+          //sect = f.sec(N25Qxxx.addr);
           //N25Qxxx.dataOut = {4'b0, LockReg_LD[sect], LockReg_WL[sect]};
           enable_lockReg_read=1;
-        end   
-        
+        end
+
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_lockReg_read=0;
-        
+
     join
 
 end
@@ -8011,7 +7995,7 @@ reg [subsecAddrDim-1:0] subsecAddr;
 begin
 
     subsecAddr = f.sub(byteAddr);
-    isProtected_by_SR = lock_by_SR[subsecAddr]; 
+    isProtected_by_SR = lock_by_SR[subsecAddr];
 
 end
 endfunction
@@ -8034,12 +8018,12 @@ function isAnySubSectorProtected;
 input required;
 begin
 
-    i=0;   
+    i=0;
     isAnySubSectorProtected=0;
-    while(isAnySubSectorProtected==0 && i<=nSSector-1) begin 
+    while(isAnySubSectorProtected==0 && i<=nSSector-1) begin
           isAnySubSectorProtected=lock_by_SR[i] || LockReg_WL[i];
         i=i+1;
-    end    
+    end
 
 end
 endfunction
@@ -8094,7 +8078,7 @@ endmodule // LockManager4KB
 -----------------------------------------------------------
 -----------------------------------------------------------
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
-// In this module are modeled 
+// In this module are modeled
 // "Dual Input Fast Program"
 // and "Dual Output Fast program"
 // commands
@@ -8106,7 +8090,7 @@ endmodule // LockManager4KB
 `else
   module DualQuadOps (S, C, ck_count, DoubleTransferRate, DQ0, DQ1, Vpp_W_DQ2, RESET_DQ3);
 `endif
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     input S;
     input C;
@@ -8114,25 +8098,25 @@ endmodule // LockManager4KB
     input DoubleTransferRate;
 
     output DQ0, DQ1, Vpp_W_DQ2;
-    
+
    `ifdef HOLD_pin
     output HOLD_DQ3;
    `endif
- 
+
      `ifdef RESET_pin
-        output RESET_DQ3; 
+        output RESET_DQ3;
     `endif
 
 
 
-    
+
 
     //----------------------------
     // Latching data (dual input)
     //----------------------------
 
     always @(C) if (N25Qxxx.logicOn && N25Qxxx.latchingMode=="F") begin : CP_latchData_fast //fast=dual
-      //if (C==1) begin // ENABLE if posedge C in all modes 
+      //if (C==1) begin // ENABLE if posedge C in all modes
       if (C==1 || (C==0 && DoubleTransferRate)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode
 
         N25Qxxx.data[N25Qxxx.iData] = DQ1;
@@ -8145,12 +8129,12 @@ endmodule // LockManager4KB
             if ((N25Qxxx.cmdRecName=="Write NV Configuration Reg" || N25Qxxx.cmdRecName=="ASP Write") && prog.LSByte) begin
                 N25Qxxx.LSdata=N25Qxxx.data;
                  prog.LSByte=0;
-            end 
+            end
                 -> N25Qxxx.dataLatched;
                 N25Qxxx.dataLatchedr=1;
                 $display("  [%0t ns] Data latched: %h", $time,N25Qxxx.data);
                 N25Qxxx.iData=N25Qxxx.dataDim-1;
-        end    
+        end
       end
     end
 
@@ -8160,16 +8144,16 @@ endmodule // LockManager4KB
     //----------------------------
 
     always @(C) if (N25Qxxx.logicOn && N25Qxxx.latchingMode=="Q") begin : CP_latchData_quad //quad
-      // if (C==1) begin // ENABLE if posedge C in all modes 
+      // if (C==1) begin // ENABLE if posedge C in all modes
       if (C==1 || (C==0 && DoubleTransferRate)) begin // ENABLE if posedge C in all modes or negedge C in DTR mode
         `ifdef HOLD_pin
         N25Qxxx.data[N25Qxxx.iData] = HOLD_DQ3;
         `endif
-       
+
        `ifdef RESET_pin
         N25Qxxx.data[N25Qxxx.iData] = RESET_DQ3;
         `endif
-        
+
         N25Qxxx.data[N25Qxxx.iData-1] = Vpp_W_DQ2;
         N25Qxxx.data[N25Qxxx.iData-2] = DQ1;
         N25Qxxx.data[N25Qxxx.iData-3] = DQ0;
@@ -8185,7 +8169,7 @@ endmodule // LockManager4KB
             N25Qxxx.dataLatchedr=1;
             $display("  [%0t ns] Data latched: %h", $time,N25Qxxx.data);
             N25Qxxx.iData=N25Qxxx.dataDim-1;
-        end    
+        end
       end
     end
 
@@ -8199,26 +8183,26 @@ endmodule // LockManager4KB
 
 
     reg bitOut='hZ, bitOut_extra='hZ;
-    
+
     reg [addrDim-1:0] readAddr;
     reg [dataDim-1:0] dataOut;
 
-    event sendToBus_dual; 
-    
-    
+    event sendToBus_dual;
+
+
     // read with DQ1 and DQ0 out bit (For dual output fast read: DOFR/DIOFR in ext-SPI and DIO-SPI modes)
     always @(negedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_dual==1 && N25Qxxx.cmd != 'h5A ) begin
 #1;
 	doubleIO_memread_output(ck_count * ((DoubleTransferRate || (((N25Qxxx.cmd
   == 'h3D) || (N25Qxxx.cmd == 'hBD) ||(N25Qxxx.cmd == 'h0D) || (N25Qxxx.cmd == 'h39) || (N25Qxxx.cmd == 'hBE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0))  +1)); // 2*ck_count if DTR and when the command is 'hBD or 'h3D, O.W. 1*ck_count
   // == 'h3D) || (N25Qxxx.cmd == 'hBD) ||(N25Qxxx.cmd == 'h0D) || (N25Qxxx.cmd == 'h3E) || (N25Qxxx.cmd == 'hBE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0))  +1)); // 2*ck_count if DTR and when the command is 'hBD or 'h3D, O.W. 1*ck_count
-    end  
+    end
 
     always @(posedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_dual==1
     && (DoubleTransferRate || (((N25Qxxx.cmd == 'h3D) || (N25Qxxx.cmd ==
     'hBD)|| (N25Qxxx.cmd == 'h0D) ||  (N25Qxxx.cmd == 'h39) || (N25Qxxx.cmd == 'hBE)|| (N25Qxxx.cmd == 'h0E)) ? 1 : 0)) && N25Qxxx.dtr_dout_started) begin
 	doubleIO_memread_output(2*ck_count + 1);
-    end  
+    end
 
     task doubleIO_memread_output;
       input [2:0] bit_count;
@@ -8241,12 +8225,12 @@ endmodule // LockManager4KB
                         readAddr = mem.memAddr;
                         mem.readData(dataOut); //read data and increments address
                         f.out_info(readAddr, dataOut);
-                        N25Qxxx.dataOut=dataOut; //N25Qxxx.dataOut is accessed by Transactions  
+                        N25Qxxx.dataOut=dataOut; //N25Qxxx.dataOut is accessed by Transactions
                     end
                #tCLQX
                 bitOut = dataOut[ dataDim-1 - (2*(bit_count_%4)) ]; //%=modulo operator
-                bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count_%4)) ]; 
-                
+                bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count_%4)) ];
+
                 -> sendToBus_dual;
             `else
 
@@ -8255,17 +8239,17 @@ endmodule // LockManager4KB
                 readAddr = mem.memAddr;
                 mem.readData(dataOut); //read data and increments address
                 f.out_info(readAddr, dataOut);
-                N25Qxxx.dataOut=dataOut; //N25Qxxx.dataOut is accessed by Transactions  
+                N25Qxxx.dataOut=dataOut; //N25Qxxx.dataOut is accessed by Transactions
             end
-           
+
            #tCLQX
             bitOut = dataOut[ dataDim-1 - (2*(bit_count%4)) ]; //%=modulo operator
-            bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
-            
+            bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
+
             -> sendToBus_dual;
             `endif
       end
-    endtask  
+    endtask
 
 // read with DQ1 and DQ0 out bit
     always @(negedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual") begin : CP_read_dual
@@ -8277,19 +8261,19 @@ endmodule // LockManager4KB
     end
 
   //RK always @(negedge(C)) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual") begin : CP_read_dual
-  //RK   doubleIO_IDreg_output(ck_count * ((((N25Qxxx.cmd == 'h3D) || 
+  //RK   doubleIO_IDreg_output(ck_count * ((((N25Qxxx.cmd == 'h3D) ||
   //RK      (N25Qxxx.cmd == 'hBD)) ? 1 : 0)  +1)); // 2*ck_count if DTR, nd when the command is 'hBD or 'h3D,O.W. 1*ck_count
   //RK end
 
   // always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual" && (DoubleTransferRate || (((N25Qxxx.cmd == 'h3D) || (N25Qxxx.cmd == 'hBD)|| (N25Qxxx.cmd == 'h0D) || (N25Qxxx.cmd == 'h3E) || (N25Qxxx.cmd == 'hBE) || (N25Qxxx.cmd == 'h0E) ) ? 1 : 0)) && N25Qxxx.dtr_dout_started) begin
-  always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual" && (DoubleTransferRate || (((N25Qxxx.cmd == 'h3D) || (N25Qxxx.cmd == 'hBD)|| (N25Qxxx.cmd == 'h0D) 
+  always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual" && (DoubleTransferRate || (((N25Qxxx.cmd == 'h3D) || (N25Qxxx.cmd == 'hBD)|| (N25Qxxx.cmd == 'h0D)
                          || (N25Qxxx.cmd == 'h39) || (N25Qxxx.cmd == 'hBE) || (N25Qxxx.cmd == 'h0E) ) ? 1 : 0)) && N25Qxxx.dtr_dout_started) begin
 #1
       doubleIO_IDreg_output(2*ck_count + 1);
       //doubleIO_IDreg_output(2*(ck_count-1) + 1); //July16 etv
   end
 
-  //RK always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual" &&  
+  //RK always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="dual" &&
   //RK      (((N25Qxxx.cmd == 'h3D) || (N25Qxxx.cmd == 'hBD)) ? 1 : 0) && N25Qxxx.dtr_dout_started) begin
   //RK   doubleIO_IDreg_output(2*ck_count + 1);
   //RK end
@@ -8298,9 +8282,9 @@ endmodule // LockManager4KB
   task doubleIO_IDreg_output;
     input [2:0] bit_count;
     begin
-     #1; 
+     #1;
      if (read.enable_rsfdp==1) begin
-  
+
        if(bit_count==0 || bit_count==4)
        //if(bit_count==0)
        begin
@@ -8308,53 +8292,53 @@ endmodule // LockManager4KB
            FlashDiscPar.readData(dataOut); //read data and increments address
            f.out_info(readAddr, dataOut);
         end
-        
+
         #tCLQX
         bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-        bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+        bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
-  
+
      end else if (stat.enable_SR_read==1) begin
-        
-        if(bit_count==0 || bit_count==4) begin 
+
+        if(bit_count==0 || bit_count==4) begin
             dataOut = stat.SR;
             f.out_info(readAddr, dataOut);
-        end    
-        
+        end
+
         #tCLQX
         bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-        bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+        bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
 
      end else if (flag.enable_FSR_read==1) begin
-        
+
         if(bit_count==0 || bit_count==4) begin
 
             dataOut = flag.FSR;
             f.out_info(readAddr, dataOut);
-        end    
-        
+        end
+
         #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
 
      end else if (VolatileReg.enable_VCR_read==1) begin
-        
+
        if(bit_count==0 || bit_count==4) begin
- 
+
             dataOut = VolatileReg.VCR;
             f.out_info(readAddr, dataOut);
-       end    
-       
+       end
+
         #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
 
-    //added   
+    //added
      end else if (PMReg.enable_PMR_read==1) begin
-        
+
         `ifdef MEDITERANEO
         if(bit_count==0 || bit_count==6) begin
         `else
@@ -8362,16 +8346,16 @@ endmodule // LockManager4KB
         `endif
             dataOut = PMReg.PMR;
             f.out_info(readAddr, dataOut);
-       end    
-        
+       end
+
         #tCLQX
 
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
-   
+
      end else if (VolatileEnhReg.enable_VECR_read==1) begin
-        
+
         `ifdef MEDITERANEO
         if(bit_count==0 || bit_count==6) begin
         `else
@@ -8379,36 +8363,36 @@ endmodule // LockManager4KB
         `endif
             dataOut = VolatileEnhReg.VECR;
             f.out_info(readAddr, dataOut);
-        end    
-        
+        end
+
         #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
-    
+
 
      end else if (NonVolatileReg.enable_NVCR_read==1) begin
-     
+
         if((bit_count==0 || bit_count==4) && N25Qxxx.firstNVCR == 1) begin
- 
+
             dataOut = NonVolatileReg.NVCR[7:0];
             f.out_info(readAddr, dataOut);
             N25Qxxx.firstNVCR=0;
-          
+
         end else if((bit_count==0 || bit_count==4) && N25Qxxx.firstNVCR == 0) begin
            dataOut = NonVolatileReg.NVCR[15:8];
            f.out_info(readAddr, dataOut);
            N25Qxxx.firstNVCR=2;
-                                   
+
         end else if((bit_count==0 || bit_count==4) && N25Qxxx.firstNVCR == 2) begin
-           dataOut = 0; 
+           dataOut = 0;
            f.out_info(readAddr, dataOut);
         end
-        
+
 
          #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4))]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4))];
         -> sendToBus_dual;
 
 `ifdef MEDT_GPRR
@@ -8417,36 +8401,36 @@ endmodule // LockManager4KB
               if (GPRR_Reg.GPRR_location != 0  && GPRR_Reg.GPRR_location >= 64) begin
                  dataOut = 8'h00;
                  f.out_info(readAddr, dataOut);
-              end else begin 
+              end else begin
                  dataOut = GPRR_Reg.GPRR[(GPRR_Reg.GPRR_location*8) +: 8];
                 f.out_info(readAddr, dataOut);
               end
               if(GPRR_Reg.GPRR_location < 65) begin
-                GPRR_Reg.GPRR_location = GPRR_Reg.GPRR_location + 1; 
+                GPRR_Reg.GPRR_location = GPRR_Reg.GPRR_location + 1;
               end
            end
            #tCLQX
            bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-           bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4))]; 
+           bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4))];
            -> sendToBus_dual;
 `endif
 
 `ifdef byte_4
 
    end else if (ExtAddReg.enable_EAR_read==1) begin
-        
+
         if(bit_count==0 || bit_count==4)  begin
-            
+
             dataOut = ExtAddReg.EAR[7:0];
             f.out_info(readAddr, dataOut);
         end
-        
+
         #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
 
- `endif     
+ `endif
  `ifdef MEDT_4KBLocking
       end else if (lock.enable_lockReg_read==1 || lock4kb.enable_lockReg_read==1) begin
  `else
@@ -8463,17 +8447,17 @@ endmodule // LockManager4KB
                       dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
                       f.out_info(readAddr, dataOut);
                   end
-              `else    
+              `else
                 dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
                 f.out_info(readAddr, dataOut);
-              `endif 
+              `endif
               //readAddr = f.sec(N25Qxxx.addr);
               //dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
               //f.out_info(readAddr, dataOut);
           end
           #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
 
 `ifdef MEDT_PPB
@@ -8487,12 +8471,12 @@ end else if (ppb.enable_PPBReg_read == 1) begin
           end
           #tCLQX
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
         -> sendToBus_dual;
 
 `endif
 
-      end else if (read.enable_OTP==1) begin 
+      end else if (read.enable_OTP==1) begin
 
           if(bit_count==0 || bit_count==4)  begin
 
@@ -8507,21 +8491,21 @@ end else if (ppb.enable_PPBReg_read == 1) begin
               f.out_info(readAddr, dataOut);
           end
           if(N25Qxxx.deep_power_down==1) dataOut = 'hzz;
-          
+
            #tCLQX
           bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-          bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+          bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
           -> sendToBus_dual;
 
-   
-   
-    end else if (read.enable_ID==1) begin 
+
+
+    end else if (read.enable_ID==1) begin
 
         if(bit_count==0 || bit_count==4)  begin
 
             readAddr = 'h0;
             readAddr = read.ID_index;
-            
+
             if (read.ID_index==0)      dataOut=Manufacturer_ID;
             else if (read.ID_index==1) dataOut=MemoryType_ID;
             else if (read.ID_index==2) dataOut=MemoryCapacity_ID;
@@ -8543,24 +8527,24 @@ end else if (ppb.enable_PPBReg_read == 1) begin
             else if (read.ID_index==18) dataOut=CFD_12;
             else if (read.ID_index==19) dataOut=CFD_13;
             else if (read.ID_index>19) dataOut=0;
-            
+
             if (read.ID_index<=19) read.ID_index=read.ID_index+1;
             //RK else read.ID_index=0;
 
 
             f.out_info(readAddr, dataOut);
-        
+
         end
-         
+
          #tCLQX
 
          bitOut = dataOut[dataDim-1- (2*(bit_count%4))];
-         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ]; 
+         bitOut_extra = dataOut[ dataDim-2 - (2*(bit_count%4)) ];
          -> sendToBus_dual;
     end
 
-    
-   
+
+
 end
 endtask
 
@@ -8573,27 +8557,27 @@ endtask
 
 	        N25Qxxx.dtr_dout_started = 1'b1;
             begin
-                force DQ1 = 1'bX;
-                force DQ0 = 1'bX; 
+                // force DQ1 = 1'bX;
+                // force DQ0 = 1'bX;
             end
-           begin 
-              if((N25Qxxx.cmdRecName == "Read Fast") || 
-                (N25Qxxx.cmdRecName == "Dual Command Fast Read") || 
-                (N25Qxxx.cmdRecName == "Quad Command Fast Read") || 
+           begin
+              if((N25Qxxx.cmdRecName == "Read Fast") ||
+                (N25Qxxx.cmdRecName == "Dual Command Fast Read") ||
+                (N25Qxxx.cmdRecName == "Quad Command Fast Read") ||
                 (N25Qxxx.cmdRecName == "Dual Output Fast Read") ||
                 (N25Qxxx.cmdRecName == "Dual I/O Fast Read") ||
-                (N25Qxxx.cmdRecName == "Quad I/O Fast Read") 
-                ) begin 
-          //     #(tCLQV - tCLQX) 
-                #(tCLQV/2 - tCLQX - 1); 
-              end 
+                (N25Qxxx.cmdRecName == "Quad I/O Fast Read")
+                ) begin
+          //     #(tCLQV - tCLQX)
+                #(tCLQV/2 - tCLQX - 1);
+              end
               else begin
                 #(tCLQV - tCLQX - 1) ;
               end
               // #(tCLQV -tCLQX) begin
-                force DQ1 = bitOut;
-                force DQ0 = bitOut_extra;
-              // end        
+                // force DQ1 = bitOut;
+                // force DQ0 = bitOut_extra;
+              // end
             end
 
         join
@@ -8602,42 +8586,42 @@ endtask
 
 
 
-    always @(negedge(C)) if(N25Qxxx.logicOn && (read.enable_dual==1 || N25Qxxx.protocol=="dual")) 
-        @(posedge S) begin 
-           #tSHQZ 
+    always @(negedge(C)) if(N25Qxxx.logicOn && (read.enable_dual==1 || N25Qxxx.protocol=="dual"))
+        @(posedge S) begin
+           #tSHQZ
             release DQ0;
             release DQ1;
-        end    
-   
+        end
+
     //--------------------------------------------------------------
     // Quad read (RESET_DQ3/HOLD_DQ3 Vpp_W_DQ2 DQ1 and DQ0 out bit)
     //--------------------------------------------------------------
 
 
     reg bitOut0='hZ, bitOut1='hZ, bitOut2='hZ, bitOut3='hZ;
-    
 
-    event sendToBus_quad; 
-    
+
+    event sendToBus_quad;
+
     always @(negedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_quad==1 && N25Qxxx.cmd != 'h5A) begin
 	quadIO_memread_output(ck_count * ((DoubleTransferRate || (((N25Qxxx.cmd
   == 'h6D) || (N25Qxxx.cmd == 'hED) ||(N25Qxxx.cmd == 'h0D)|| (N25Qxxx.cmd == 'h3A) || (N25Qxxx.cmd == 'hEE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0)) +1)); // 2*ck_count if DTR and when the command is 'hED, O.W. 1*ck_count
   // == 'h6D) || (N25Qxxx.cmd == 'hED) ||(N25Qxxx.cmd == 'h0D)|| (N25Qxxx.cmd == 'h6E) || (N25Qxxx.cmd == 'hEE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0)) +1)); // 2*ck_count if DTR and when the command is 'hED, O.W. 1*ck_count
-    end   
+    end
 
 //RK     always @(negedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_quad==1) begin
-//RK 
-//RK 	quadIO_memread_output(ck_count * ((((N25Qxxx.cmd == 'h6D) || 
+//RK
+//RK 	quadIO_memread_output(ck_count * ((((N25Qxxx.cmd == 'h6D) ||
 //RK            (N25Qxxx.cmd == 'hED)) ? 1 : 0) +1)); // 2*ck_count if DTR and when the command is 'hED, O.W. 1*ck_count
-//RK      end  
+//RK      end
 
     // always @(posedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_quad==1 && (DoubleTransferRate || (((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED) ||(N25Qxxx.cmd == 'h0D)|| (N25Qxxx.cmd == 'h6E) || (N25Qxxx.cmd == 'hEE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0)) && N25Qxxx.dtr_dout_started) begin
     always @(posedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_quad==1 && (DoubleTransferRate || (((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED) ||(N25Qxxx.cmd == 'h0D)|| (N25Qxxx.cmd == 'h3A) || (N25Qxxx.cmd == 'hEE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0)) && N25Qxxx.dtr_dout_started) begin
 
-    //RK always @(posedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_quad==1 &&  
+    //RK always @(posedge(C)) if(N25Qxxx.logicOn && N25Qxxx.read.enable_quad==1 &&
     //RK       (((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED)) ? 1 : 0) && N25Qxxx.dtr_dout_started) begin
 	quadIO_memread_output(2*ck_count + 1);
-     end  
+     end
 
     task quadIO_memread_output;
       input [2:0] bit_count;
@@ -8648,17 +8632,17 @@ endtask
                 readAddr = mem.memAddr;
                 mem.readData(dataOut); //read data and increments address
                 f.out_info(readAddr, dataOut);
-                N25Qxxx.dataOut=dataOut; //N25Qxxx.dataOut is accessed by Transactions  
+                N25Qxxx.dataOut=dataOut; //N25Qxxx.dataOut is accessed by Transactions
             end
-            
+
             #tCLQX
             bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-            bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-            bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-            bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+            bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+            bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+            bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
             -> sendToBus_quad;
-            
-    end  
+
+    end
     endtask
 
 
@@ -8667,13 +8651,13 @@ endtask
  always @(negedge(C)) if(N25Qxxx.logicOn && N25Qxxx.protocol=="quad") begin : CP_read_quad
   if(DoubleTransferRate == 1) begin
     quadIO_IDreg_output(ck_count * ((((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED)) ? 1 : 0) )); // 2*ck_count if DTR and when the command is 'hED, O.W. 1*ck_count
-  end 
+  end
   else begin
-    quadIO_IDreg_output(ck_count * ((((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED)) ? 1 : 0) +1)); 
+    quadIO_IDreg_output(ck_count * ((((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED)) ? 1 : 0) +1));
   end
  end
 
- //RK always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="quad" &&  
+ //RK always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="quad" &&
  //RK       (((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED)) ? 1 : 0) && N25Qxxx.dtr_dout_started) begin
  // always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="quad" && (DoubleTransferRate || (((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED) ||(N25Qxxx.cmd == 'h0D)|| (N25Qxxx.cmd == 'h6E) || (N25Qxxx.cmd == 'hEE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0))) begin
  always @(posedge C) if(N25Qxxx.logicOn && N25Qxxx.protocol=="quad" && (DoubleTransferRate || (((N25Qxxx.cmd == 'h6D) || (N25Qxxx.cmd == 'hED) ||(N25Qxxx.cmd == 'h0D)|| (N25Qxxx.cmd == 'h3A) || (N25Qxxx.cmd == 'hEE) ||(N25Qxxx.cmd == 'h0E) ) ? 1 : 0))) begin
@@ -8683,131 +8667,131 @@ endtask
 
  task quadIO_IDreg_output;
    input [2:0] bit_count;
-   begin   
+   begin
    #1;
     if (read.enable_rsfdp==1) begin
-  
+
        if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)
        begin
            readAddr = FlashDiscPar.fdpAddr;
            FlashDiscPar.readData(dataOut); //read data and increments address
            f.out_info(readAddr, dataOut);
         end
-        
+
         #tCLQX
         bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 
 
     end else if (stat.enable_SR_read==1) begin
-        
+
         if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)
         begin
             dataOut = stat.SR;
             f.out_info(readAddr, dataOut);
-        end    
-       
+        end
+
         #tCLQX
         bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 
      end else if (flag.enable_FSR_read==1) begin
-        
+
         if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)
         begin
-                
+
             dataOut = flag.FSR;
             f.out_info(readAddr, dataOut);
-        end    
-       
+        end
+
         #tCLQX
         bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 
      end else if (VolatileReg.enable_VCR_read==1) begin
-        
+
        if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)
        begin
-                               
+
             dataOut = VolatileReg.VCR;
             f.out_info(readAddr, dataOut);
-       end    
-       
+       end
+
         #tCLQX
         bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
         -> sendToBus_quad;
-      
-     // added   
+
+     // added
      end else if (PMReg.enable_PMR_read==1) begin
-        
+
        if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)
        begin
-                               
+
             dataOut = PMReg.PMR;
             f.out_info(readAddr, dataOut);
-       end    
-        
+       end
+
         #tCLQX
         bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+        bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+        bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+        bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
         -> sendToBus_quad;
-    
+
      end else if (VolatileEnhReg.enable_VECR_read==1) begin
-        
+
         if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)
         begin
             dataOut = VolatileEnhReg.VECR;
             f.out_info(readAddr, dataOut);
-        end    
-       
+        end
+
 
         #tCLQX
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
-                                              
+
 
      end else if (NonVolatileReg.enable_NVCR_read==1) begin
-     
+
       if((bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6) && N25Qxxx.firstNVCR == 1) begin
- 
+
             dataOut = NonVolatileReg.NVCR[7:0];
             f.out_info(readAddr, dataOut);
             N25Qxxx.firstNVCR=0;
-          
+
       end else if((bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6) && N25Qxxx.firstNVCR == 0) begin
            dataOut = NonVolatileReg.NVCR[15:8];
            f.out_info(readAddr, dataOut);
            N25Qxxx.firstNVCR=2;
-                                   
+
       end else if((bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6) && N25Qxxx.firstNVCR == 2) begin
            dataOut = 0;
            f.out_info(readAddr, dataOut);
        end
 
-       
+
         #tCLQX
 
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 
 `ifdef MEDT_GPRR
@@ -8821,38 +8805,38 @@ endtask
                  f.out_info(readAddr, dataOut);
               end
               if(GPRR_Reg.GPRR_location < 65) begin
-                GPRR_Reg.GPRR_location = GPRR_Reg.GPRR_location + 1; 
+                GPRR_Reg.GPRR_location = GPRR_Reg.GPRR_location + 1;
               end
            end
            #tCLQX
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 `endif
 
 `ifdef byte_4
 
    end else if (ExtAddReg.enable_EAR_read==1) begin
-        
+
         if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)  begin
-            
+
             dataOut = ExtAddReg.EAR[7:0];
             f.out_info(readAddr, dataOut);
         end
-        
+
         #tCLQX
 
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
-`endif      
+`endif
    `ifdef MEDT_4KBLocking
    end else if (lock.enable_lockReg_read==1 || lock4kb.enable_lockReg_read==1) begin
-   `else    
+   `else
    end else if (lock.enable_lockReg_read==1) begin
    `endif
 
@@ -8867,19 +8851,19 @@ endtask
                       dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
                       f.out_info(readAddr, dataOut);
                   end
-              `else    
+              `else
                 dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
                 f.out_info(readAddr, dataOut);
-              `endif 
+              `endif
               //dataOut = {6'b0, lock.LockReg_LD[readAddr], lock.LockReg_WL[readAddr]};
               //f.out_info(readAddr, dataOut);
           end
         #tCLQX
 
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 
 `ifdef MEDT_PPB
@@ -8893,13 +8877,13 @@ end else if (ppb.enable_PPBReg_read == 1) begin
         #tCLQX
 
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 `endif
-    
-      end else if (read.enable_OTP==1) begin 
+
+      end else if (read.enable_OTP==1) begin
 
           if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)  begin
 
@@ -8916,20 +8900,20 @@ end else if (ppb.enable_PPBReg_read == 1) begin
          #tCLQX
 
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
 
-   
-   
-    end else if (read.enable_ID==1) begin 
+
+
+    end else if (read.enable_ID==1) begin
 
         if(bit_count==0 || bit_count==2 || bit_count==4 || bit_count==6)  begin
 
             readAddr = 'h0;
             readAddr = read.ID_index;
-            
+
             if (read.ID_index==0)      dataOut=Manufacturer_ID;
             else if (read.ID_index==1) dataOut=MemoryType_ID;
             else if (read.ID_index==2) dataOut=MemoryCapacity_ID;
@@ -8951,25 +8935,25 @@ end else if (ppb.enable_PPBReg_read == 1) begin
             else if (read.ID_index==18) dataOut=CFD_12;
             else if (read.ID_index==19) dataOut=CFD_13;
             else if (read.ID_index>19) dataOut=0;
-            
+
             if (read.ID_index<=19) read.ID_index=read.ID_index+1;
             //RK else read.ID_index=0;
 
 
             f.out_info(readAddr, dataOut);
-        
+
         end
          #tCLQX
 
          bitOut3 = dataOut[ dataDim-1 - (4*(bit_count%2)) ]; //%=modulo operator
-         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ]; 
-         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ]; 
-         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ]; 
+         bitOut2 = dataOut[ dataDim-2 - (4*(bit_count%2)) ];
+         bitOut1 = dataOut[ dataDim-3 - (4*(bit_count%2)) ];
+         bitOut0 = dataOut[ dataDim-4 - (4*(bit_count%2)) ];
          -> sendToBus_quad;
     end
 
-    
-   
+
+
 end
 endtask
 
@@ -8983,49 +8967,49 @@ endtask
 
          	N25Qxxx.dtr_dout_started = 1'b1;
             begin
-               
+
                `ifdef HOLD_pin
-                force HOLD_DQ3 = 1'bX;
-               `endif 
-            
+                // force HOLD_DQ3 = 1'bX;
+               `endif
+
                `ifdef RESET_pin
-                force RESET_DQ3 = 1'bX;
-               `endif 
-                force Vpp_W_DQ2 = 1'bX;
-                force DQ1 = 1'bX;
-                force DQ0 = 1'bX; 
+                // force RESET_DQ3 = 1'bX;
+               `endif
+                // force Vpp_W_DQ2 = 1'bX;
+                // force DQ1 = 1'bX;
+                // force DQ0 = 1'bX;
             end
             begin
-              if((N25Qxxx.cmdRecName == "Read Fast") || 
-                (N25Qxxx.cmdRecName == "Dual Command Fast Read") || 
-                (N25Qxxx.cmdRecName == "Quad Command Fast Read") || 
+              if((N25Qxxx.cmdRecName == "Read Fast") ||
+                (N25Qxxx.cmdRecName == "Dual Command Fast Read") ||
+                (N25Qxxx.cmdRecName == "Quad Command Fast Read") ||
                 (N25Qxxx.cmdRecName == "Dual Output Fast Read") ||
                 (N25Qxxx.cmdRecName == "Dual I/O Fast Read") ||
-                (N25Qxxx.cmdRecName == "Quad I/O Fast Read") || 
-                (N25Qxxx.cmdRecName == "Quad Output Read") 
-                ) begin 
-          //     #(tCLQV - tCLQX) 
-                #(tCLQV/2 - tCLQX - 1); 
-              end 
+                (N25Qxxx.cmdRecName == "Quad I/O Fast Read") ||
+                (N25Qxxx.cmdRecName == "Quad Output Read")
+                ) begin
+          //     #(tCLQV - tCLQX)
+                #(tCLQV/2 - tCLQX - 1);
+              end
               else begin
                 #(tCLQV - tCLQX - 2) ;
               end
-            
+
             // #(tCLQV-tCLQX) begin
-               
+
                `ifdef HOLD_pin
-                force HOLD_DQ3 = bitOut3;
+                // force HOLD_DQ3 = bitOut3;
                `endif
-              
+
                `ifdef RESET_pin
-                force RESET_DQ3 = bitOut3;
-               `endif 
-               
-                
-                force Vpp_W_DQ2 = bitOut2;
-                force DQ1 = bitOut1;
-                force DQ0 = bitOut0;
-            end        
+                // force RESET_DQ3 = bitOut3;
+               `endif
+
+
+                // force Vpp_W_DQ2 = bitOut2;
+                // force DQ1 = bitOut1;
+                // force DQ0 = bitOut0;
+            end
 
         join
       end
@@ -9033,35 +9017,35 @@ endtask
 
 
 
-    always @(negedge(C)) if(N25Qxxx.logicOn && read.enable_quad==1 || N25Qxxx.protocol=="quad") 
-    
-        @(posedge S) begin 
-        
-         #tSHQZ          
+    always @(negedge(C)) if(N25Qxxx.logicOn && read.enable_quad==1 || N25Qxxx.protocol=="quad")
+
+        @(posedge S) begin
+
+         #tSHQZ
             release DQ0;
             release DQ1;
             release Vpp_W_DQ2;
             `ifdef HOLD_pin
             release HOLD_DQ3;
             `endif
-            
+
             `ifdef RESET_pin
             release RESET_DQ3;
-            `endif 
+            `endif
+
+       end
 
-       end   
+    `ifdef RESET_pin
 
-    `ifdef RESET_pin 
-       
        always @N25Qxxx.resetEvent begin
-       
-            release DQ0; 
+
+            release DQ0;
             release Vpp_W_DQ2;
-           
+
             release RESET_DQ3;
-       
+
        end
-       
+
     `endif
 
 
@@ -9089,8 +9073,8 @@ endmodule
 
 module OTP_memory;
 
-    
-    `include "include/DevParam.h"
+
+    `include "DevParam.h"
 
 
     reg [dataDim-1:0] mem [0:OTP_dim-1];
@@ -9109,7 +9093,7 @@ module OTP_memory;
     //-----------
 
     initial begin
-        for (i=0; i<=OTP_dim-2; i=i+1) 
+        for (i=0; i<=OTP_dim-2; i=i+1)
             mem[i] = data_NP;
         `ifdef MEDITERANEO
         mem[OTP_dim-1] = 'b1111111x;
@@ -9117,7 +9101,7 @@ module OTP_memory;
     `else
         mem[OTP_dim-1] = 'bxxxxxxxx;
         `OTP_lockBit = 1;
-    `endif 
+    `endif
 
     end
 
@@ -9130,18 +9114,18 @@ module OTP_memory;
 
     // set start address
     // (for program and read operations)
-    
+
     task setAddr;
     input [addrDim-1:0] A;
     begin
         overflow = 0;
         addr = A[OTP_addrDim-1:0];
-        if (addr > (OTP_dim-1)) 
+        if (addr > (OTP_dim-1))
         begin
             addr = OTP_dim-1;
             overflow =1;
             $display(  "  [%0t ns] **WARNING** Address out of OTP memory area. Column %0d will be considered!", $time, addr);
-        end    
+        end
     end
     endtask
 
@@ -9155,13 +9139,13 @@ module OTP_memory;
     task writeDataToBuffer;
     input [dataDim-1:0] data;
     begin
-        
+
         if (!overflow)
             buffer[addr] = data;
-        
+
         if (addr < OTP_dim-1)
             addr = addr + 1;
-        else if (overflow==0) 
+        else if (overflow==0)
             overflow = 1;
         else if (overflow==1)
             $display("  [%0t ns] **WARNING** OTP limit reached: data latched will be discarded!", $time);
@@ -9176,14 +9160,14 @@ module OTP_memory;
 
         for (i=0; i<=OTP_dim-2; i=i+1)
             mem[i] = mem[i] & buffer[i];
-          mem[OTP_dim-1][0] = mem[OTP_dim-1][0] & buffer[OTP_dim-1][0]; 
+          mem[OTP_dim-1][0] = mem[OTP_dim-1][0] & buffer[OTP_dim-1][0];
           if(mem[OTP_dim-1][0] == 0)begin
               PMReg.PMR[3] = 0;
               $display("[%0t ns] PMR[3] set to 0",$time);
           end
-          
+
     end
-    endtask  
+    endtask
 
 
 
@@ -9198,16 +9182,16 @@ module OTP_memory;
         //    data[0] = mem[addr][0] & PMReg.PMR[3];
         //    $display("---debug--- %b = %b & %b",data[0],mem[addr][0],PMReg.PMR[3]);
         //    $display("---debug--- addr = %h",addr);
-        //end    
+        //end
         if (VolatileReg.VCR[1:0]!=2'd3) begin //implements the read data output wrap
-               
+
              case (VolatileReg.VCR[1:0])
-                    2'd0 : addr = {N25Qxxx.addr[addrDim-1: 4], addr[3:0]}; 
-                    2'd1 : addr = {N25Qxxx.addr[addrDim-1: 5], addr[4:0]}; 
+                    2'd0 : addr = {N25Qxxx.addr[addrDim-1: 4], addr[3:0]};
+                    2'd1 : addr = {N25Qxxx.addr[addrDim-1: 5], addr[4:0]};
                     2'd2 : addr = {N25Qxxx.addr[addrDim-1: 6], addr[5:0]};
              endcase
-                
-        end      
+
+        end
     end
     endtask
 
@@ -9218,7 +9202,7 @@ module OTP_memory;
 
 
 
-endmodule   
+endmodule
 
 
 
@@ -9248,44 +9232,44 @@ endmodule
   module TimingCheck (S, C, D, Q, W, R);
 `endif
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     input S, C, D, Q;
     `ifdef HOLD_pin
-      input H; 
+      input H;
     `endif
      input W;
-    
+
     `ifdef RESET_pin
-      input R; 
+      input R;
     `endif
     `define W_feature
-    
+
 
     realtime delta; //used for interval measuring
-    
-   
+
+
 
     //--------------------------
     //  Task for timing check
     //--------------------------
 
     task check;
-        
+
         input [8*8:1] name;  //constraint check
         input realtime interval;
         input realtime constr;
-        
+
         begin
-        
+
             if (interval<constr)
                 //$display("[%0f ns] --TIMING ERROR-- %0s constraint violation. Measured time: %0f ns - Constraint: %0f ns",
                 $display("[%0f ns] --TIMING VIOLATION-- %0s constraint violation. Measured time: %0f ns - Constraint: %0f ns",
                           $realtime, name, interval, constr);
-            
-        
+
+
         end
-    
+
     endtask
 
 
@@ -9299,17 +9283,17 @@ endmodule
     realtime C_high=initialTime, C_low=initialTime;
     realtime S_low=initialTime, S_high=initialTime;
     realtime D_valid=initialTime;
-     
+
     `ifdef HOLD_pin
-        realtime H_low=initialTime, H_high=initialTime; 
+        realtime H_low=initialTime, H_high=initialTime;
     `endif
 
     `ifdef RESET_pin
-        realtime R_low=initialTime, R_high=initialTime; 
+        realtime R_low=initialTime, R_high=initialTime;
     `endif
 
     `ifdef W_feature
-        realtime W_low=initialTime, W_high=initialTime; 
+        realtime W_low=initialTime, W_high=initialTime;
     `endif
 
 
@@ -9318,65 +9302,65 @@ endmodule
     //------------------------
 
 
-    always 
+    always
     @C if(C===0) //posedge(C)
     @C if(C===1)
     begin
-        
-        delta = $realtime - C_low; 
+
+        delta = $realtime - C_low;
           check("tCL", delta, tCL);
 
-        delta = $realtime - S_low; 
+        delta = $realtime - S_low;
             check("tSLCH", delta, tSLCH);
 
-        delta = $realtime - D_valid; 
-        if (N25Qxxx.latchingMode!="N") 
+        delta = $realtime - D_valid;
+        if (N25Qxxx.latchingMode!="N")
         begin
             check("tDVCH", delta, tDVCH); // do not check during data output
         end
-        delta = $realtime - S_high; 
+        delta = $realtime - S_high;
             check("tSHCH", delta, tSHCH);
 
         // clock frequency checks
         delta = $realtime - C_high;
-	
+
 	    if (read.enable && delta<TR)
 		$display("[%0f ns] --TIMING ERROR-- Violation of Max clock frequency (%0d MHz) during normal READ operation. T_ck_measured=%0f ns, T_clock_min=%0f ns.",
                       $realtime, fR, delta, TR);
-	    else if ( (read.enable_fast || read.enable_ID || read.enable_dual || read.enable_quad || read.enable_OTP || 
-                   stat.enable_SR_read || lock.enable_lockReg_read )   
-                          && 
+	    else if ( (read.enable_fast || read.enable_ID || read.enable_dual || read.enable_quad || read.enable_OTP ||
+                   stat.enable_SR_read || lock.enable_lockReg_read )
+                          &&
                         delta<TC  )
 		$display("[%0t ns] --TIMING ERROR-- Violation of Max clock frequency during fast READ operation(%0d MHz). T_ck_measured=%0f ns, T_clock_min=%0f ns.",
                       $realtime, fC, delta, TC);
 
-        
+
         `ifdef HOLD_pin
-        
-            delta = $realtime - H_low; 
+
+            delta = $realtime - H_low;
             check("tHLCH", delta, tHLCH);
 
-            delta = $realtime - H_high; 
+            delta = $realtime - H_high;
             check("tHHCH", delta, tHHCH);
-        
+
         `endif
-        
+
         C_high = $realtime;
-        
+
     end
 
 
 
-    always 
+    always
     @C if(C===1) //negedge(C)
     @C if(C===0)
     begin
-        
-       delta = $realtime - C_high; 
+
+       delta = $realtime - C_high;
             check("tCH", delta, tCH);
-        
+
         C_low = $realtime;
-        
+
     end
 
 
@@ -9387,58 +9371,58 @@ endmodule
     //------------------------
 
 
-    always 
+    always
     @S if(S===1) //negedge(S)
     @S if(S===0)
     begin
-        
-        delta = $realtime - C_high; 
+
+        delta = $realtime - C_high;
             check("tCHSL", delta, tCHSL);
 
-        delta = $realtime - S_high; 
+        delta = $realtime - S_high;
         check("tSHSL", delta, tSHSL);
 
         `ifdef W_feature
-          delta = $realtime - W_high; 
+          delta = $realtime - W_high;
           check("tWHSL", delta, tWHSL);
         `endif
 
 
         `ifdef RESET_pin
             //check during decoding
-            if (N25Qxxx.resetDuringDecoding) begin 
-                delta = $realtime - R_high; 
+            if (N25Qxxx.resetDuringDecoding) begin
+                delta = $realtime - R_high;
                 check("tRHSL", delta, tRHSL_1);
                 N25Qxxx.resetDuringDecoding = 0;
-            end 
+            end
             //check during program-erase operation
-            else if (N25Qxxx.resetDuringBusy && (prog.operation=="Page Program" || prog.operation=="Page Write" ||  
-                      prog.operation=="Sector Erase" || prog.operation=="Bulk Erase"  || prog.operation=="Die Erase"  ||  prog.operation=="Page Erase") )   
-            begin 
-                delta = $realtime - R_high; 
+            else if (N25Qxxx.resetDuringBusy && (prog.operation=="Page Program" || prog.operation=="Page Write" ||
+                      prog.operation=="Sector Erase" || prog.operation=="Bulk Erase"  || prog.operation=="Die Erase"  ||  prog.operation=="Page Erase") )
+            begin
+                delta = $realtime - R_high;
                 check("tRHSL", delta, tRHSL_2);
                 N25Qxxx.resetDuringBusy = 0;
             end
             //check during subsector erase
-            else if ( N25Qxxx.resetDuringBusy && (prog.operation=="Subsector Erase" || prog.operation=="Subsector Erase 32K" )) begin 
-                delta = $realtime - R_high; 
+            else if ( N25Qxxx.resetDuringBusy && (prog.operation=="Subsector Erase" || prog.operation=="Subsector Erase 32K" )) begin
+                delta = $realtime - R_high;
                 check("tRHSL", delta, tRHSL_3);
                 N25Qxxx.resetDuringBusy = 0;
             end
             //check during WRSR
-            else if ( N25Qxxx.resetDuringBusy && prog.operation=="Write SR" ) begin 
-                delta = $realtime - R_high; 
+            else if ( N25Qxxx.resetDuringBusy && prog.operation=="Write SR" ) begin
+                delta = $realtime - R_high;
                 check("tRHSL", delta, tRHSL_4);
                 N25Qxxx.resetDuringBusy = 0;
-            end    
-             //check during WNVCR   
-            else if ( N25Qxxx.resetDuringBusy && prog.operation=="Write NV Configuration Reg" ) begin 
-                delta = $time - R_high; 
+            end
+             //check during WNVCR
+            else if ( N25Qxxx.resetDuringBusy && prog.operation=="Write NV Configuration Reg" ) begin
+                delta = $time - R_high;
                 check("tRHSL", delta, tRHSL_5);
                 N25Qxxx.resetDuringBusy = 0;
             end
-            else begin//verificare 
-                delta = $time - R_high; 
+            else begin//verificare
+                delta = $time - R_high;
                 check("tRHSL", delta, tRHSL_6);
                 N25Qxxx.resetDuringBusy = 0;
 
@@ -9454,16 +9438,16 @@ endmodule
 
 
 
-    always 
+    always
     @S if(S===0) //posedge(S)
     @S if(S===1)
     begin
-        
-        delta = $realtime - C_high; 
+
+        delta = $realtime - C_high;
             check("tCHSH", delta, tCHSH);
-        
+
         S_high = $realtime;
-        
+
     end
 
 
@@ -9472,7 +9456,7 @@ endmodule
     //  D signal (data in) checks
     //----------------------------
 
-    always @D 
+    always @D
     begin
 
         delta = $realtime - C_high;
@@ -9494,36 +9478,36 @@ endmodule
     //------------------------
 
 
-    `ifdef HOLD_pin    
-    
+    `ifdef HOLD_pin
+
 
-        always 
+        always
         @H if(H===1) //negedge(H)
         @H if(H===0)
         begin
-            if(N25Qxxx.intHOLD == 0) begin 
-              delta = $realtime - C_high; 
+            if(N25Qxxx.intHOLD == 0) begin
+              delta = $realtime - C_high;
               check("tCHHL", delta, tCHHL);
 
               H_low = $realtime;
             end
-            
+
         end
 
 
 
-        always 
+        always
         @H if(H===0) //posedge(H)
         @H if(H===1)
         begin
-            if(N25Qxxx.intHOLD == 0) begin 
-            
-              delta = $realtime - C_high; 
+            if(N25Qxxx.intHOLD == 0) begin
+
+              delta = $realtime - C_high;
               check("tCHHH", delta, tCHHH);
-              
+
               H_high = $realtime;
             end
-            
+
         end
 
 
@@ -9539,28 +9523,28 @@ endmodule
 
     `ifdef W_feature
 
-        always 
+        always
         @W if(W===1) //negedge(W)
         @W if(W===0)
         begin
-            
-            delta = $realtime - S_high; 
+
+            delta = $realtime - S_high;
             if(N25Qxxx.VolatileEnhReg.VECR[7:6] == 'b01 || N25Qxxx.NonVolatileReg.NVCR[3:2] == 'b01) //disable SHWL check when in quad mode
             begin
             end
-            else    
+            else
             begin
                 check("tSHWL", delta, tSHWL);
             end
             W_low = $realtime;
-            
+
         end
 
-        always 
+        always
         @W if(W===0) //posedge(W)
         @W if(W===1)
             W_high = $realtime;
-            
+
     `endif
 
 
@@ -9573,24 +9557,24 @@ endmodule
 
     `ifdef RESET_pin
 
-        always 
+        always
         @R if(R===1) //negedge(R)
         @R if(R===0)
             R_low = $realtime;
-            
-        always 
+
+        always
         @R if(R===0) //posedge(R)
         @R if(R===1)
         begin
-            
-            delta = $realtime - S_high; 
+
+            delta = $realtime - S_high;
             check("tSHRH", delta, tSHRH);
-            
-            delta = $realtime - R_low; 
+
+            delta = $realtime - R_low;
             check("tRLRH", delta, tRLRH);
-            
+
             R_high = $realtime;
-            
+
         end
 
     `endif
@@ -9611,9 +9595,9 @@ endmodule
 
 
 
-    
 
-endmodule   
+
+endmodule
 
 
 
@@ -9640,14 +9624,14 @@ endmodule
 module ExtendedAddressRegister;
 
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     parameter [7:0] ExtendAddrReg_default = 'b00000000;
 
 
     // status register
     reg [7:0] EAR;
-    
+
 
 
 
@@ -9658,7 +9642,7 @@ module ExtendedAddressRegister;
 
 
     initial begin
-        
+
        EAR[7:0] = ExtendAddrReg_default;
     end
 
@@ -9686,43 +9670,43 @@ module ExtendedAddressRegister;
     // NB : "Read EAR" operation is also modelled in N25Qxxx.module
 
     reg enable_EAR_read;
-    
-//    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read EAR") 
+
+//    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read EAR")
 //    begin : READ_EAR
 //
 //        `ifdef MEDITERANEO
-//            if(N25Qxxx.DoubleTransferRate == 1) begin 
+//            if(N25Qxxx.DoubleTransferRate == 1) begin
 //                @(posedge N25Qxxx.C);
 //                @(negedge N25Qxxx.C);
 //            end
 //        `endif
-//        
-//        fork 
-//        
+//
+//        fork
+//
 //        enable_EAR_read=1;
 //
 //        @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
 //            enable_EAR_read=0;
 //            disable READ_EAR;
 //        end
-//        
-//        join    
+//
+//        join
 //    end
 
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read EAR") 
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read EAR")
     begin : READ_EAR
         fork
             begin
             `ifdef MEDITERANEO
-                if(N25Qxxx.DoubleTransferRate == 1) begin 
+                if(N25Qxxx.DoubleTransferRate == 1) begin
                     @(posedge N25Qxxx.C);
                     @(negedge N25Qxxx.C);
                 end
             `endif
-            
+
             enable_EAR_read=1;
             end
-        
+
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
             enable_EAR_read=0;
             disable READ_EAR;
@@ -9730,14 +9714,14 @@ module ExtendedAddressRegister;
         join
     end
 
-    
 
 
-    
 
 
 
-endmodule  // ExtendedAddressRegister 
+
+
+endmodule  // ExtendedAddressRegister
 `endif
 
 //***********************************************************************
@@ -9746,45 +9730,45 @@ endmodule  // ExtendedAddressRegister
 //***********************************************************************
 //***********************************************************************
 
-`timescale 1ns / 1ps 
+`timescale 1ns / 1ps
 `ifdef Stack512Mb
     `define STACKED
 `elsif Stack1024Mb
     `define STACKED
 `endif
 
-`ifdef STACKED 
+`ifdef STACKED
   `ifdef HOLD_pin
     module N25QxxxTop (S, C, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
-  `else 
+  `else
     module N25QxxxTop (S, C, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
   `endif
 
-  `include "include/DevParam.h"
-  
+  `include "DevParam.h"
+
   // parameter [15:0] NVConfigReg_default = 'b1111111111111110;
 
   input S;
   input C;
   input [`VoltageRange] Vcc;
-  
-  inout DQ0; 
+
+  inout DQ0;
   inout DQ1;
-  
+
   `ifdef HOLD_pin
     inout HOLD_DQ3; //input HOLD, inout DQ3
   `endif
-  
+
   `ifdef RESET_pin
     inout RESET_DQ3; //input RESET, inout DQ3
   `endif
-  
+
   inout Vpp_W_DQ2; //input Vpp_W, inout DQ2 (VPPH not implemented)
 
   parameter [1:0] deviceStack = 0;
-  `include "include/StackDecoder.h"
-  
-  
+  `include "StackDecoder.h"
+
+
     reg [1:0] current_die_sel = 0;
     reg all_die_cmd = 'h0;
     reg read_fsr_done = 'h0;
@@ -9818,7 +9802,7 @@ endmodule  // ExtendedAddressRegister
           N25Q_die0.cmd == 'h42 || N25Q_die0.cmd == 'h4B ||  N25Q_die0.cmd
           =='h5A ) begin
           all_die_cmd = 0;
-          N25Q_die0.die_active = 1; 
+          N25Q_die0.die_active = 1;
           N25Q_die1.die_active = 0;
           `ifdef Stack1024Mb
             N25Q_die2.die_active = 0;N25Q_die3.die_active = 0;
@@ -9828,7 +9812,7 @@ endmodule  // ExtendedAddressRegister
           all_die_cmd = 0;
         end
       end
-      else if(any_die_busy == 1) begin 
+      else if(any_die_busy == 1) begin
         if(N25Q_die0.cmd != 'h70 && N25Q_die0.cmd != 'h75) begin
           $display("[%0t ns] ==ERROR== Only FSR and PES commands are allowed.", $time);
         end
@@ -9851,7 +9835,7 @@ endmodule  // ExtendedAddressRegister
       if((all_die_cmd == 1) && (N25Q_die0.cmd == 'h70)) begin
         read_fsr_done = 0;
         `ifdef Stack1024Mb
-          case (stack_counter) 
+          case (stack_counter)
             0 : begin N25Q_die0.die_active = 1; N25Q_die1.die_active = 0;N25Q_die2.die_active = 0;N25Q_die3.die_active = 0; end
             1 : begin N25Q_die0.die_active = 0; N25Q_die1.die_active = 1;N25Q_die2.die_active = 0;N25Q_die3.die_active = 0; end
             2 : begin N25Q_die0.die_active = 0; N25Q_die1.die_active = 0;N25Q_die2.die_active = 1;N25Q_die3.die_active = 0; end
@@ -9859,7 +9843,7 @@ endmodule  // ExtendedAddressRegister
             default : $display("[%0t ns] ERROR in stack counter value ", $time);
           endcase
         `else
-          case (stack_counter) 
+          case (stack_counter)
             0 : begin N25Q_die0.die_active = 1; N25Q_die1.die_active = 0; end
             1 : begin N25Q_die0.die_active = 0; N25Q_die1.die_active = 1; end
             default : $display("[%0t ns] ERROR in stack counter value ", $time);
@@ -9927,7 +9911,7 @@ endmodule  // ExtendedAddressRegister
     // Calculating device select during stacked die
     // die active indicates the die selected
     //------------------------------
-    
+
     always@(N25Q_die0.addrLatched) begin
       if((N25Q_die0.prog.enable_4Byte_address == 1) || (N25Q_die0.NonVolatileReg.NVCR[0] == 0)) begin
         stackDieDecode(N25Q_die0.addrLatch[N25Q_die0.addrDim +1: N25Q_die0.addrDim]);
@@ -9936,7 +9920,7 @@ endmodule  // ExtendedAddressRegister
         stackDieDecode(N25Q_die0.ExtAddReg.EAR[1:0]);
       end
     end
-    
+
     task stackDieDecode;
       input [1:0] dieaddr ;
         `ifdef Stack1024Mb
@@ -9976,20 +9960,20 @@ endmodule  // ExtendedAddressRegister
           `endif
       endcase
     endtask
-    
+
     //-------------------------------------------
     // Function to test sector protection status
     //-------------------------------------------
-    
+
     function isProtected_by_SR_stack;
     input [addrDim-1:0] byteAddr;
     reg [sectorAddrDim+1:0] sectAddr;
     begin
-    
+
         sectAddr = N25Q_die0.f.sec(byteAddr) | (current_die_active -1 ) << sectorAddrDim ;
-        isProtected_by_SR_stack = N25Q_die0.lock.lock_by_SR[sectAddr]; 
+        isProtected_by_SR_stack = N25Q_die0.lock.lock_by_SR[sectAddr];
         // $display("In isProtected_by_SR_stack: sectAddr=%h, isProtected_by_SR_stack = %h ", sectAddr ,isProtected_by_SR_stack ,$time);
-    
+
     end
     endfunction
 
@@ -10000,7 +9984,7 @@ endmodule  // ExtendedAddressRegister
         $display("In getMemory : memData = %h, addr =%h , current_die_active =%h", getMemory, memAddr , current_die_active, $time);
       end
     endfunction
-    
+
     function setMemory;
       input [addrDim - 1: 0] memAddr;
       input [dataDim - 1: 0] memData;
@@ -10013,8 +9997,8 @@ endmodule  // ExtendedAddressRegister
         setMemory = 1;
       end
     endfunction
-    
-    
+
+
   endmodule // N25QxxxTop
 `endif
 
@@ -10022,24 +10006,24 @@ endmodule  // ExtendedAddressRegister
     `ifdef Feature_8
         `ifdef HOLD_pin
             module MT25QxxxTop (S, C, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2, RESET2);
-        `else 
+        `else
             module MT25QxxxTop (S, C, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2, RESET2);
         `endif
     `else
         `ifdef HOLD_pin
             module MT25QxxxTop (S, C, HOLD_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
-        `else 
+        `else
             module MT25QxxxTop (S, C, RESET_DQ3, DQ0, DQ1, Vcc, Vpp_W_DQ2);
         `endif
     `endif // Feature_8
 
-`include "include/DevParam.h"
+`include "DevParam.h"
 
   input S;
   input C;
   input [`VoltageRange] Vcc;
-  
-  inout DQ0; 
+
+  inout DQ0;
   inout DQ1;
 
 `ifdef Feature_8
@@ -10068,7 +10052,7 @@ endmodule  // ExtendedAddressRegister
     wire [3:0] current_die_busy ;
     wire [3:0] current_die_active ;
 
-`include "include/StackDecoder.h"
+`include "StackDecoder.h"
 
     assign any_die_busy = MT25Q_die0.busy || MT25Q_die1.busy  ;
     assign current_die_busy ={ MT25Q_die1.busy , MT25Q_die0.busy} ;
@@ -10081,7 +10065,7 @@ endmodule  // ExtendedAddressRegister
       if((all_die_cmd == 1) && (MT25Q_die0.cmd == `CMD_RDFSR)) begin
         read_fsr_done = 0;
         `ifdef Stack1024Mb
-          case (stack_counter) 
+          case (stack_counter)
             0 : begin MT25Q_die0.die_active = 1; MT25Q_die1.die_active = 0;MT25Q_die2.die_active = 0;MT25Q_die3.die_active = 0; end
             1 : begin MT25Q_die0.die_active = 0; MT25Q_die1.die_active = 1;MT25Q_die2.die_active = 0;MT25Q_die3.die_active = 0; end
             2 : begin MT25Q_die0.die_active = 0; MT25Q_die1.die_active = 0;MT25Q_die2.die_active = 1;MT25Q_die3.die_active = 0; end
@@ -10089,7 +10073,7 @@ endmodule  // ExtendedAddressRegister
             default : $display("[%0t ns] ERROR in stack counter value ", $time);
           endcase
         `else
-          case (stack_counter) 
+          case (stack_counter)
             0 : begin MT25Q_die0.die_active = 1; MT25Q_die1.die_active = 0; end
             1 : begin MT25Q_die0.die_active = 0; MT25Q_die1.die_active = 1; end
             default : $display("[%0t ns] ERROR in stack counter value ", $time);
@@ -10169,7 +10153,7 @@ endmodule  // ExtendedAddressRegister
         else if(MT25Q_die0.cmd == `CMD_RDID1 ||  MT25Q_die0.cmd == `CMD_RDID2 ||
           MT25Q_die0.cmd == `CMD_POTP || MT25Q_die0.cmd == `CMD_ROTP ||  MT25Q_die0.cmd ==`CMD_RDSFDP ) begin
           all_die_cmd = 0;
-          MT25Q_die0.die_active = 1; 
+          MT25Q_die0.die_active = 1;
           MT25Q_die1.die_active = 0;
           `ifdef Stack1024Mb
             MT25Q_die2.die_active = 0;MT25Q_die3.die_active = 0;
@@ -10179,7 +10163,7 @@ endmodule  // ExtendedAddressRegister
           all_die_cmd = 0;
         end
       end
-      else if(any_die_busy == 1) begin 
+      else if(any_die_busy == 1) begin
                if(MT25Q_die0.cmd != `CMD_RDFSR && MT25Q_die0.cmd != `CMD_PES) begin
                  $display("[%0t ns] ==ERROR== Only FSR and PES commands are allowed.", $time);
                end
@@ -10199,7 +10183,7 @@ endmodule  // ExtendedAddressRegister
     // Calculating device select during stacked die
     // die active indicates the die selected
     //------------------------------
-    
+
     always@(MT25Q_die0.addrLatched) begin
       if((MT25Q_die0.prog.enable_4Byte_address == 1) || (MT25Q_die0.NonVolatileReg.NVCR[0] == 0)) begin
         //stackDieDecode(MT25Q_die0.addrLatch[MT25Q_die0.addrDim +1: MT25Q_die0.addrDim]);
@@ -10209,7 +10193,7 @@ endmodule  // ExtendedAddressRegister
         stackDieDecode(MT25Q_die0.ExtAddReg.EAR[1:0]);
       end
     end
-    
+
     task stackDieDecode;
       input [1:0] dieaddr ;
         `ifdef Stack1024Mb
@@ -10253,16 +10237,16 @@ endmodule  // ExtendedAddressRegister
     //-------------------------------------------
     // Function to test sector protection status
     //-------------------------------------------
-    
+
     function isProtected_by_SR_stack;
     input [addrDim-1:0] byteAddr;
     reg [sectorAddrDim+1:0] sectAddr;
     begin
-    
+
         sectAddr = MT25Q_die0.f.sec(byteAddr) | (current_die_active -1 ) << sectorAddrDim ;
-        isProtected_by_SR_stack = MT25Q_die0.lock.lock_by_SR[sectAddr]; 
+        isProtected_by_SR_stack = MT25Q_die0.lock.lock_by_SR[sectAddr];
         // $display("In isProtected_by_SR_stack: sectAddr=%h, isProtected_by_SR_stack = %h ", sectAddr ,isProtected_by_SR_stack ,$time);
-    
+
     end
     endfunction
 
@@ -10273,7 +10257,7 @@ endmodule  // ExtendedAddressRegister
         $display("In getMemory : memData = %h, addr =%h , current_die_active =%h", getMemory, memAddr , current_die_active, $time);
       end
     endfunction
-    
+
     function setMemory;
       input [addrDim - 1: 0] memAddr;
       input [dataDim - 1: 0] memData;
@@ -10312,7 +10296,7 @@ module PLRSpart1Detect (S, C, EN4b);
     reg start_XIP_rescue = 0;
     reg not_valid_1st_part = 0;
     reg power_rst = 0;
-    
+
     event plrs_part1_count_reached;
 
     always @N25Qxxx.startCUIdec if ((N25Qxxx.cmd[6] && N25Qxxx.cmd[4] && N25Qxxx.cmd[2] && N25Qxxx.cmd[0] && N25Qxxx.protocol=="dual") ||
@@ -10320,19 +10304,19 @@ module PLRSpart1Detect (S, C, EN4b);
                                     (N25Qxxx.cmd=='b11111111 && N25Qxxx.protocol=="extended")) begin
         N25Qxxx.cmdRecName = "Power Loss Rescue Sequence";
         //$display("[%0t ns] COMMAND RECOGNIZED: %0s.", $time, N25Qxxx.cmdRecName);
-        -> N25Qxxx.seqRecognized; 
-    end    
+        -> N25Qxxx.seqRecognized;
+    end
 
     always @(negedge S) begin
         //if(protocol == N25Qxxx.protocol && power_rst == 0) begin
         if(protocol == N25Qxxx.protocol && EN4b) begin
-            iXIP_count = count;  
+            iXIP_count = count;
             //$display("  [%0t ps] PLRS: 1st part of Power Loss Rescue Sequence initiated. ", $time);
             start_XIP_rescue = 1;
-            plrs_part1_excess_clock = 0; 
+            plrs_part1_excess_clock = 0;
         end
     end
-    
+
     always @(posedge C) begin
     if (start_XIP_rescue ==  1 ) begin : Resc_seq
        if(iXIP_count > 0) begin
@@ -10351,8 +10335,8 @@ module PLRSpart1Detect (S, C, EN4b);
        end else begin
            if(S == 0)
             -> plrs_part1_count_reached;
-            end 
-       end         
+            end
+       end
     end // end for always block
 
     // detects that enough clock cycles for 1st part of PLR Sequence
@@ -10366,7 +10350,7 @@ module PLRSpart1Detect (S, C, EN4b);
                 //N25Qxxx.XIP = 0;
                 //VolatileReg.VCR[3] = 1;
                 start_XIP_rescue = 0;
-              //$display("  [%0t ps] ==INFO== PLRS: 1st part of Power Loss Rescue Sequence to get memory out of XIP mode completed", $time); 
+              //$display("  [%0t ps] ==INFO== PLRS: 1st part of Power Loss Rescue Sequence to get memory out of XIP mode completed", $time);
             end else begin
              not_valid_1st_part = 0;
              plrs_part1_excess_clock = 0;
@@ -10382,10 +10366,10 @@ module PLRSpart1Detect (S, C, EN4b);
         if(plrs_part1_excess_clock > 1) begin
             //$display("   [%0t ps] ==ERROR== Excess clock cycles for 1st part of PLRS ", $time);
             not_valid_1st_part = 1;
-        end    
+        end
     end
 
-endmodule // PLRSpart1Detect 
+endmodule // PLRSpart1Detect
 
 
 
@@ -10398,7 +10382,7 @@ endmodule // PLRSpart1Detect
 //
 //----------------------------------------------------
 
-`timescale 1ns / 1ps 
+`timescale 1ns / 1ps
 //module PLRSpart2Detect (S, C, PLR1Done, PLR2Done, PLR2Abort);
 module PLRSpart2Detect (S, C, modify_in_progress);
 
@@ -10412,7 +10396,7 @@ module PLRSpart2Detect (S, C, modify_in_progress);
     reg abort = 0;
     reg plr2_done = 0;
     integer iPow_res = 4;
-    integer plrs_part2_excess_clock = 0; 
+    integer plrs_part2_excess_clock = 0;
 
     event plrs_part2_count_reached;
 
@@ -10421,8 +10405,8 @@ module PLRSpart2Detect (S, C, modify_in_progress);
                                     (N25Qxxx.cmd=='b11111111 && N25Qxxx.protocol=="extended")) begin
     //    N25Qxxx.cmdRecName = "Power Loss Rescue Sequence";
         //$display("[%0t ns] COMMAND RECOGNIZED: %0s.", $time, N25Qxxx.cmdRecName);
-        -> N25Qxxx.seqRecognized; 
-    end    
+        -> N25Qxxx.seqRecognized;
+    end
 
     always @(negedge S) begin
         `ifdef INT_RST_SEQ
@@ -10433,7 +10417,7 @@ module PLRSpart2Detect (S, C, modify_in_progress);
              start_PLR2_rescue = 1;
          plr2_done = 0;
          plrs_part2_excess_clock = 0;
-    end    
+    end
 
     always @(posedge C) begin
         if (start_PLR2_rescue) begin : Resc2_seq
@@ -10453,15 +10437,15 @@ module PLRSpart2Detect (S, C, modify_in_progress);
             iPow_res = iPow_res - 1;
             end else begin
                 -> plrs_part2_count_reached;
-            `ifdef HOLD_pin 
+            `ifdef HOLD_pin
                 release N25Qxxx.DQ0;
                 release N25Qxxx.HOLD_DQ3;
-            `else 
+            `else
                 release N25Qxxx.DQ0;
                 release N25Qxxx.RESET_DQ3;
             `endif
             //latchingMode = "N";
-            end 
+            end
         end
     end
 
@@ -10478,7 +10462,7 @@ module PLRSpart2Detect (S, C, modify_in_progress);
                 plr2_done = 1;
     //          VolatileEnhReg.VECR[5] = 1;
                 N25Qxxx.VolatileEnhReg.VECR[6] = 1;
-                N25Qxxx.VolatileEnhReg.VECR[7] = 1;    
+                N25Qxxx.VolatileEnhReg.VECR[7] = 1;
     //            `ifdef MEDITERANEO
     //          N25Qxxx.DoubleTransferRate = !VolatileEnhReg.VECR[5];
     //            `endif
@@ -10492,7 +10476,7 @@ module PLRSpart2Detect (S, C, modify_in_progress);
                         $display("  [%0t ps] ==WARNING== PLRS: Device Busy, 2nd part of Power Loss Rescue Sequence did not complete.", $time);
                         $display("  [%0t ps] ==WARNING== PLRS: Redo the 2nd part of the sequence or Redo the entire sequence.", $time);
                     end
-                `endif      
+                `endif
             end else begin
                 iPow_res = 7;
                 not_valid_2nd_part = 0;
@@ -10510,7 +10494,7 @@ module PLRSpart2Detect (S, C, modify_in_progress);
             if(not_valid_2nd_part == 0)
                 //$display("   [%0t ps] ==ERROR== PLRS: Excess clock cycles for 2nd part of PLRS ", $time);
             not_valid_2nd_part = 1;
-        end    
+        end
     end
 
 endmodule // PLRSpart2Detect module
@@ -10528,17 +10512,17 @@ endmodule // PLRSpart2Detect module
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 module GeneralPurposeRegister;
 
-//    `include "include/DevParam.h"
+//    `include "DevParam.h"
 
     parameter [(64*8)-1:0] GPRR_default = 512'b0;
-   
+
     // General purpose register register
 
     reg [(64*8)-1:0] GPRR;
     reg enable_GPRR_read;
     reg [6:0] GPRR_location;
 
-     
+
     //--------------
     // Init
     //--------------
@@ -10548,11 +10532,11 @@ module GeneralPurposeRegister;
         GPRR[(64*8)-1:0] = GPRR_default;
     end
 
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read GPRR Reg") 
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read GPRR Reg")
     fork : READ_GPRR
-            begin : GPRR_read 
-                
+            begin : GPRR_read
+
                 N25Qxxx.dummyDimEff = 8;
                 N25Qxxx.iDummy = 7;
                 $display("  [%0t ps] GPRR Read Dummy byte expected ...",$time);
@@ -10561,16 +10545,16 @@ module GeneralPurposeRegister;
                 GPRR_location = 0;
                 enable_GPRR_read=1;
                 N25Qxxx.latchingMode="N"; // Data out
-            end    
+            end
 
             @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault) begin
                 enable_GPRR_read=0;
                 GPRR_location = 0;
                 disable GPRR_read;
             end
-    join    
+    join
 
-endmodule   
+endmodule
 `endif
 
 /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@@ -10584,7 +10568,7 @@ endmodule
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 `ifdef MEDT_PPB //Non-volatile block lock
 module PPBManager();
-    `include "include/DevParam.h"
+    `include "DevParam.h"
     reg [nSector-1:0] PPBReg;
     reg enable_PPBReg_read;
     integer i;
@@ -10602,7 +10586,7 @@ module PPBManager();
       // if (!PMReg.PMR[5]) begin
       //     $display("  [%0t ps] **WARNING** PMR bit is set. Write lock register is not allowed!", $time);
       //     disable WRLR;
-      //  end else 
+      //  end else
       begin : WRPPB
         begin : exe1
             sect = f.sec(N25Qxxx.addr);
@@ -10617,7 +10601,7 @@ module PPBManager();
           if(prog.prog_susp==1) begin
             $display("  [%0t ns] ***WARNING*** - Write PPB Reg aborted due to Prog/Erase Suspend",$time);
             disable WRPPB;
-          end  
+          end
             if(`WEL==0) begin
                 N25Qxxx.f.WEL_error;
                 disable WRPPB;
@@ -10650,7 +10634,7 @@ module PPBManager();
                 N25Qxxx.busy=1;
                 -> stat.WEL_reset;
                 //PPBReg[sect]=sectPPBReg[0];
-                $display("  [%0t ns]- Command execution: ppb register of sector %0d set to (%b)", 
+                $display("  [%0t ns]- Command execution: ppb register of sector %0d set to (%b)",
                           $time, sect, PPBReg[sect]);
                 prog.delay=write_PPB_delay;
                 -> prog.errorCheck;
@@ -10659,24 +10643,24 @@ module PPBManager();
                     PPBReg[sect]=0;
                  $display("  [%0t ns] Command execution completed: Write PPB Register. PPB=%h (%b)",
                              $time, PPBReg, PPBReg);
-                     end         
-            end    
+                     end
+            end
         end
 
         //begin : reset
         //    @N25Qxxx.resetEvent;
         //    disable WRPPB;
         //end
-        
+
     end
 
-    // PPB Erase 
+    // PPB Erase
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Erase PPB Reg")
       // if (!PMReg.PMR[5]) begin
       //     $display("  [%0t ps] **WARNING** PMR bit is set. Write lock register is not allowed!", $time);
       //     disable WRLR;
-      //  end else 
-       fork : PPBE 
+      //  end else
+       fork : PPBE
         begin : exe1e
             sect = f.sec(N25Qxxx.addr);
             if(N25Qxxx.protocol=="dual")
@@ -10712,7 +10696,7 @@ module PPBManager();
             N25Qxxx.busy=1;
             -> stat.WEL_reset;
                 //PPBReg[sect]=sectPPBReg[0];
-                $display("  [%0t ns]- Command execution: erase ppb register", 
+                $display("  [%0t ns]- Command execution: erase ppb register",
                           $time, sect, PPBReg[sect]);
                 prog.delay=erase_PPB_delay;
                 -> prog.errorCheck;
@@ -10722,8 +10706,8 @@ module PPBManager();
                     PPBReg[i] = 1;
                  $display("  [%0t ns] Command execution completed: Erase PPB Register. PPB=%h (%b)",
                              $time, PPBReg, PPBReg);
-                     end         
-            end    
+                     end
+            end
         end
 
         begin : resete
@@ -10731,30 +10715,30 @@ module PPBManager();
             disable exe1e;
             disable exe2e;
         end
-        
+
     join // PPB Erase
 
     // Read PPB register
 
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read PPB Reg") begin : READ_PPBReg
-        
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        
+
         fork
 
         begin
           enable_PPBReg_read=1;
-        end   
-        
+        end
+
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_PPBReg_read=0;
-        
+
     join
 end
 
@@ -10779,14 +10763,14 @@ function isAnySectorProtected;
 input required;
 begin
 
-    i=0;   
+    i=0;
     isAnySectorProtected=0;
-    while(isAnySectorProtected==0 && i<=nSector-1) begin 
+    while(isAnySectorProtected==0 && i<=nSector-1) begin
         if(PPBReg[i] == 0) begin
             isAnySectorProtected = 1;
         end
         i=i+1;
-    end    
+    end
 
 end
 endfunction
@@ -10806,22 +10790,22 @@ endmodule
 
 module PPBLockBitRegister;
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     parameter [7:0] PLBReg_default = 'b00000001;
-   
+
     // non volatile configuration register
 
     reg [7:0] PLB;
 
-     
+
     //--------------
     // Init
     //--------------
 
 
     initial begin
-        
+
         PLB[7:0] = PLBReg_default;
 
     end
@@ -10836,32 +10820,32 @@ module PPBLockBitRegister;
 
 
     //-----------------------------------------
-    // Read 
+    // Read
     //-----------------------------------------
 
     reg enable_PLBReg_read = 0;
-    
+
     always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="Read PPB Lock Bit") begin : READ_PLB
-        
+
         `ifdef MEDITERANEO
             if(N25Qxxx.DoubleTransferRate == 1) begin
                 @(posedge N25Qxxx.C);
                 @(negedge N25Qxxx.C);
             end
         `endif
-        fork 
-        
+        fork
+
         enable_PLBReg_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_PLBReg_read=0;
-        
-    join    
+
+    join
 end
 
- endmodule    
+ endmodule
 `endif //MEDT_PPB
- 
+
 `ifdef MEDT_ADVANCED_SECTOR
 /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 -----------------------------------------------------------
@@ -10876,11 +10860,11 @@ end
 
 module ASPRegister();
 
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
     reg [15:0] ASP = 'hFFFF;
 
-     
+
     //--------------
     // Init
     //--------------
@@ -10888,7 +10872,7 @@ module ASPRegister();
     initial begin
         #1;
         ASP[15:0] = 'hFFFF;
-        
+
     end
 
 
@@ -10905,30 +10889,30 @@ module ASPRegister();
     // NB : "Read Non Volatile Configuration register" operation is also modelled in N25Qxxx.module
 
     reg enable_ASP_read;
-    
-    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="ASP Read") 
-    begin 
+
+    always @(N25Qxxx.seqRecognized) if (N25Qxxx.cmdRecName=="ASP Read")
+    begin
         `ifdef MEDITERANEO
-        if(N25Qxxx.DoubleTransferRate == 1) begin   
+        if(N25Qxxx.DoubleTransferRate == 1) begin
             @(posedge N25Qxxx.C);
             @(negedge N25Qxxx.C);
         end
         `endif
-        fork 
-        
+        fork
+
         enable_ASP_read=1;
 
         @(posedge(N25Qxxx.S) or N25Qxxx.resetEvent or N25Qxxx.voltageFault)
             enable_ASP_read=0;
-        
-        join    
+
+        join
     end
-endmodule // MEDT_ADVANCED_SECTOR   
+endmodule // MEDT_ADVANCED_SECTOR
 `endif
 
 
 module DebugModule ();
-    `include "include/DevParam.h"
+    `include "DevParam.h"
 
 event x0;
 event x1;
@@ -10946,7 +10930,7 @@ event x12;
 reg [addrDim-1:0] Addr0;
 reg [addrDim-1:0] Addr1;
 event debugSR;
-reg [391:0] gprr;    
+reg [391:0] gprr;
 reg [7:0] gprr_esr;
 reg [95:0] gprr_tag;
 reg [31:0] gprr_counter;
-- 
2.17.1

